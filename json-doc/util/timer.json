{
    "doc": {
        "description": "Encryption Class",
        "tags": {
            "copyright": "BBN Solutions",
            "since": "July 11, 2013, 13:08:00 +01:00",
            "category": "Utilities",
            "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT",
            "version": "0.1"
        }
    },
    "name": "bbn\\Util\\Timer",
    "namespace": true,
    "traits": [],
    "interfaces": [],
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/util\/timer.php",
    "startLine": 18,
    "endLine": 177,
    "contentConstructor": {
        "file": "bbn\\Util\\Timer",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Util\\Timer",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->_measures = [];\n  }",
            "startLine": 27,
            "endLine": 30,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "start": {
            "name": "start",
            "summary": "Starts a timer for a given key",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Util\\Timer",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($key = 'default', $from = NULL)\n  {\n    if (!isset($this->_measures[$key])) {\n      $this->_measures[$key] = [\n        'num' => 0,\n        'sum' => 0,\n        'start' => $from ?: microtime(1)\n      ];\n    }\n    else {\n      $this->_measures[$key]['start'] = $from ?: microtime(1);\n    }\n\n    return true;\n  }",
            "startLine": 38,
            "endLine": 52,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "key",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "default",
                    "default_name": ""
                },
                {
                    "name": "from",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "has_started": {
            "name": "has_started",
            "summary": "Returns true is the timer has started for the given key",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Util\\Timer",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($key = 'default')\n  {\n    return isset($this->_measures[$key], $this->_measures[$key]['start']) &&\n      ($this->_measures[$key]['start'] > 0);\n  }",
            "startLine": 60,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "key",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "default",
                    "default_name": ""
                }
            ]
        },
        "reset": {
            "name": "reset",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Util\\Timer",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($key = 'default')\n  {\n    if ($this->hasStarted($key)) {\n      $this->_measures[$key] = [\n        'num' => 0,\n        'sum' => 0\n      ];\n    }\n  }",
            "startLine": 67,
            "endLine": 75,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "key",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "default",
                    "default_name": ""
                }
            ]
        },
        "stop": {
            "name": "stop",
            "summary": "Stops a timer for a given key",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Util\\Timer",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($key = 'default')\n  {\n    if ($this->hasStarted($key)) {\n      $this->_measures[$key]['num']++;\n      $time                          = $this->measure($key);\n      $this->_measures[$key]['sum'] += $time;\n      unset($this->_measures[$key]['start']);\n      return $time;\n    }\n\n    throw new \\Exception(_(\"Missing a start declaration for timer\").\" $key\");\n  }",
            "startLine": 83,
            "endLine": 94,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "key",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "default",
                    "default_name": ""
                }
            ]
        },
        "measure": {
            "name": "measure",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Util\\Timer",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($key = 'default')\n  {\n    if ($this->hasStarted($key)) {\n      return microtime(1) - $this->_measures[$key]['start'];\n    }\n  }",
            "startLine": 97,
            "endLine": 102,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "key",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "default",
                    "default_name": ""
                }
            ]
        },
        "current": {
            "name": "current",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Util\\Timer",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($key = 'default')\n  {\n    if (isset($this->_measures[$key])) {\n      return \\array_merge(\n        ['current' => $this->hasStarted($key) ? $this->measure($key) : 0],\n        $this->_measures[$key]\n      );\n    }\n\n    return [];\n  }",
            "startLine": 105,
            "endLine": 115,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "key",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "default",
                    "default_name": ""
                }
            ]
        },
        "currents": {
            "name": "currents",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Util\\Timer",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $currents = [];\n    foreach ($this->_measures as $key => $val){\n      $currents[$key] = \\array_merge(\n        [\n        'current' => $this->hasStarted($key) ? $this->measure($key) : 0\n        ], $val\n      );\n    }\n\n    return $currents;\n  }",
            "startLine": 118,
            "endLine": 130,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "result": {
            "name": "result",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Util\\Timer",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($key = 'default')\n  {\n    if (isset($this->_measures[$key])) {\n      if ($this->hasStarted($key)) {\n        $this->stop($key);\n      }\n\n      return [\n        'num' => $this->_measures[$key]['num'],\n        'total' => number_format($this->_measures[$key]['sum'], 10),\n        'average' => number_format($this->_measures[$key]['sum'] \/ $this->_measures[$key]['num'], 10)\n      ];\n    }\n  }",
            "startLine": 136,
            "endLine": 149,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "key",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "default",
                    "default_name": ""
                }
            ]
        },
        "results": {
            "name": "results",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Util\\Timer",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $r = [];\n    foreach ($this->_measures as $key => $val){\n      $r[$key] = $this->result($key);\n    }\n\n    return $r;\n  }",
            "startLine": 155,
            "endLine": 163,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "remove": {
            "name": "remove",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Util\\Timer",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($key = 'default')\n  {\n    if (isset($this->_measures[$key])) {\n      unset($this->_measures[$key]);\n      return true;\n    }\n\n    return false;\n  }",
            "startLine": 166,
            "endLine": 174,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "key",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "default",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": [],
    "constants": null,
    "numMethods": 11,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 0,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "_measures": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\util",
    "shortName": "timer",
    "summary": "Encryption Class"
}