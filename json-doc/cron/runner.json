{
    "doc": {
        "description": "Cron runner.\nThis class runs the jobs properly. It has three modalities:\n- `poll` will run the poller, continuously\n- `run_task_system` will run the task system, continuously\n- `run_task` will run a given task, once",
        "tags": []
    },
    "name": "bbn\\cron\\runner",
    "namespace": true,
    "traits": [
        "bbn\\cron\\common"
    ],
    "interfaces": [],
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/cron\/runner.php",
    "startLine": 14,
    "endLine": 434,
    "contentConstructor": {
        "file": "bbn\\cron\\runner",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "cron constructor.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\cron $cron, array $cfg)\n  {\n    \/\/if ( defined('BBN_DATA_PATH') ){\n    if (!empty($cfg['type']) && $cron->check()) {\n      $this->controller = $cron->get_controller();\n      $this->cron = $cron;\n      $this->log_file = $cron->get_log_file();\n      $this->db = $this->controller->db;\n      \/\/ It must be called from a plugin (appui-cron actually)\n      \/\/$this->path = BBN_DATA_PATH.'plugins\/appui-cron\/';\n      $this->path = $this->controller->data_path('appui-cron');\n      $this->data = $cfg;\n      $this->type = $cfg['type'];\n      $this->timer = new bbn\\util\\timer();\n    }\n  }",
            "startLine": 108,
            "endLine": 123,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "cron",
                    "position": 0,
                    "type": "bbn\\cron",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "output": {
            "name": "output",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name = '', $log = '')\n  {\n    if ($name === false) {\n      echo '}' . PHP_EOL;\n    }\n    else if ($name === true) {\n      echo '{' . PHP_EOL;\n    }\n    else if ($name) {\n      $is_number = bbn\\str::is_number($log);\n      $is_boolean = \\is_bool($log);\n      $is_string = \\is_string($log);\n      if (!$is_number && !$is_boolean && !$is_string) {\n        $log = bbn\\x::get_dump($log);\n      }\n      else if ($is_boolean) {\n        $log = $log ? 'true' : 'false';\n      }\n      echo '  \"' .\n        bbn\\str::escape_dquotes($name) .\n        '\": ' . ($is_string ? '\"' : '') .\n        ($is_string ? bbn\\str::escape_dquotes($log) : $log) .\n        ($is_string ? '\"' : '') . ',' .\n        PHP_EOL;\n    }\n    if (ob_get_length()) {\n      ob_end_flush();\n    }\n  }",
            "startLine": 125,
            "endLine": 153,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "log",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "shutdown": {
            "name": "shutdown",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $data = $this->get_data();\n    $pid = $this->get_pid_path($data);\n    $file_content = @file_get_contents($pid);\n    \/\/ Write the error log if an error is present\n    if ($error = error_get_last()) {\n      \/\/$this->output(_('Error'), $error);\n      $this->log([$data, $error]);\n    }\n    $ok = true;\n    if (ob_get_length()) {\n      $content = ob_end_flush();\n      $this->output(_('Content'), $content);\n    }\n    \/\/ We check if there is a problem with the PID file (it's only debug it shouldn't be necessary)\n    if ($file_content) {\n      $pid_content = explode('|', $file_content);\n      if ($pid_content[1] && ($pid_content[0] != BBN_PID)) {\n        $this->output(_('Different processes'), $pid_content[0] . '\/' . BBN_PID);\n        $this->log(_('Different processes') . ': ' . $pid_content[0] . '\/' . BBN_PID);\n        $ok = false;\n      }\n    }\n    if ($ok && isset($data['type'])) {\n      \/\/ Removing PID file\n      if (is_file($pid)) {\n        @unlink($pid);\n      }\n      \/\/ And relaunching the continuous tasks if we are in the poller...\n      if (\n        ($data['type'] === 'poll')\n      ) {\n        $this->cron->launch_poll();\n      }\n      else if ($data['type'] === 'cron') {\n        if (array_key_exists('id', $data) && bbn\\str::is_uid($data['id'])) {\n          $this->cron->get_manager()->finish($data['id']);\n        }\n        else {\n          $this->cron->launch_task_system();\n        }\n      }\n      \/\/x::dump(\"FROM SHUTDOWN\", $data);\n      \/\/ We output the ending time (as all output will be logged in the output file\n      \/\/$this->output(_('Shutdown'), date('H:i:s'));\n    }\n  }",
            "startLine": 155,
            "endLine": 202,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "get_data": {
            "name": "get_data",
            "summary": "Returns the $data property.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->data;\n  }",
            "startLine": 208,
            "endLine": 211,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return (bool) $this->type;\n  }",
            "startLine": 213,
            "endLine": 216,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                "startLine": 56,
                "endLine": 61,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "run": {
            "name": "run",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->_run();\n  }",
            "startLine": 218,
            "endLine": 221,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": []
        },
        "poll": {
            "name": "poll",
            "summary": "Returns the $data property.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->check()) {\n      $this->timer->start('timeout');\n      $this->timer->start('users');\n      $obs = new bbn\\appui\\observer($this->db);\n      \/\/$this->output(_('Starting poll'), date('Y-m-d H:i:s'));\n      \/*\n      foreach ( $admin->get_old_tokens() as $t ){\n        $id_user = $admin->get_user_from_token($t['id']);\n        @bbn\\file\\dir::delete(BBN_DATA_PATH.\"users\/$id_user\/tmp\/tokens\/$t[id]\", true);\n        if ( $this->db->delete('bbn_users_tokens', ['id' => $t['id']]) ){\n          echo '-';\n        }\n      }\n      *\/\n      while ($this->is_poll_active()) {\n        \/\/ The only centralized action are the observers\n        $res = $obs->observe();\n        if (\\is_array($res)) {\n          $time = time();\n          foreach ($res as $id_user => $o) {\n            $file = $this->controller->user_tmp_path($id_user).\"poller\/queue\/observer-$time.json\";\n            if (bbn\\file\\dir::create_path(\\dirname($file))) {\n              file_put_contents($file, json_encode(['observers' => $o]));\n            }\n          }\n        }\n        sleep(1);\n        if ($this->timer->measure('users') > self::$user_timeout) {\n          echo '?';\n          \/\/$admin->clean_tokens();\n          $this->timer->stop('users');\n          $this->timer->start('users');\n        }\n        if ($this->timer->measure('timeout') > self::$poll_timeout) {\n          \/\/$this->output(_('Timeout'), date('Y-m-d H:i:s'));\n          echo '.';\n        }\n      }\n      $this->output(_('Ending poll process'), date('Y-m-d H:i:s'));\n    }\n  }",
            "startLine": 228,
            "endLine": 270,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "run_task_system": {
            "name": "run_task_system",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->check()) {\n      \/\/$this->output(_('Start task system'), date('Y-m-d H:i:s'));\n      $this->timer->start('timeout');\n      $ok = true;\n      while ($ok) {\n        if (!$this->is_active() || !$this->is_cron_active()) {\n          \/\/$this->output(_('End'), date('Y-m-d H:i:s'));\n          if ($rows = $this->cron->get_manager()->get_running_rows()) {\n            foreach ($rows as $r) {\n              if (file_exists('\/proc\/' . $r['pid'])) {\n                exec('kill -9 ' . $r['pid']);\n                \/\/$this->output(_('Killing task'), $r['pid']);\n              }\n              $fpid = $this->get_pid_path(['type' => 'cron', 'id' => $r['id']]);\n              if (is_file($fpid)) {\n                unlink($fpid);\n                \/\/$this->output(_('Deleting PID file'), $fpid);\n              }\n              $this->cron->get_manager()->unset_pid($r['id']);\n            }\n          }\n          exit();\n        }\n        if ($rows = $this->cron->get_manager()->get_next_rows(0)) {\n          foreach ($rows as $r) {\n            $param = [\n              'type' => 'cron',\n              'id' => $r['id'],\n              'file' => $r['file']\n            ];\n            \/\/$this->output(_('Launch'), date('Y-m-d H:i:s'));\n            \/\/$this->output(_('Execution'), $param['file']);\n            $this->cron->get_launcher()->launch($param);\n          }\n        }\n        sleep(10);\n      }\n    }\n  }",
            "startLine": 272,
            "endLine": 312,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "run_task": {
            "name": "run_task",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    if (x::has_props($cfg, ['id', 'file', 'log_file'], true) && $this->check()) {\n      if (!defined('BBN_EXTERNAL_USER_ID') && defined('BBN_EXTERNAL_USER_EMAIL')) {\n        define('BBN_EXTERNAL_USER_ID', $this->db->select_one('bbn_users', 'id', ['email' => BBN_EXTERNAL_USER_EMAIL]));\n      }\n      if ($this->cron->get_manager()->start($cfg['id'])) {\n        $log = [\n          'start' => date('Y-m-d H:i:s'),\n          'file' => $cfg['file'],\n          'pid' => getmypid()\n        ];\n        $day = date('d');\n        $month = date('m');\n        $bits = x::split($cfg['log_file'], '\/');\n        $path_elements = array_splice($bits, -5, 3);\n        $path_bits = array_splice($bits, -5);\n        $path = x::join($path_bits, '\/');\n        $json_file = dirname(dirname(dirname($cfg['log_file']))).'\/'.x::join($path_elements, '-').'.json';\n        array_pop($path_elements);\n        $month_file = dirname(dirname($json_file)).'\/'.x::join($path_elements, '-').'.json';\n        array_pop($path_elements);\n        $year_file = dirname(dirname($month_file)).'\/'.x::join($path_elements, '-').'.json';\n        if (!is_file($json_file)) {\n          $logs = [];\n        }\n        else {\n          $logs = json_decode(file_get_contents($json_file), true);\n        }\n        $idx = count($logs);\n        $logs[] = $log;\n        file_put_contents($json_file, json_encode($logs, JSON_PRETTY_PRINT));\n        $this->timer->start($cfg['file']);\n        $this->controller->reroute($cfg['file']);\n        $this->controller->process();\n        $logs[$idx]['duration'] = $this->timer->stop($cfg['file']);\n        $content = file_get_contents($cfg['log_file']);\n        if (empty($content)) {\n          unlink($cfg['log_file']);\n          $logs[$idx]['content'] = false;\n        }\n        else {\n          $logs[$idx]['content'] = $path;\n        }\n        $logs[$idx]['end'] = date('Y-m-d H:i:s');\n        file_put_contents($json_file, json_encode($logs, JSON_PRETTY_PRINT));\n        if (!is_file($month_file)) {\n          $mlogs = [\n            'total' => 0,\n            'content' => 0,\n            'first' => $logs[$idx]['start'],\n            'last' => null,\n            'dates' => [],\n            'duration' => 0,\n            'duration_content' => 0\n          ];\n        }\n        else {\n          $mlogs = json_decode(file_get_contents($month_file), true);\n        }\n        $mlogs['total']++;\n        $mlogs['duration'] += $logs[$idx]['duration'];\n        if (!empty($content)) {\n          $mlogs['content']++;\n          $mlogs['duration_content'] += $logs[$idx]['duration'];\n        }\n        $mlogs['last'] = $logs[$idx]['start'];\n        if (!in_array($day, $mlogs['dates'])) {\n          $mlogs['dates'][] = $day;\n        }\n        file_put_contents($month_file, json_encode($mlogs, JSON_PRETTY_PRINT));\n        if (!is_file($year_file)) {\n          $ylogs = [\n            'total' => 0,\n            'content' => 0,\n            'first' => $logs[$idx]['start'],\n            'last' => null,\n            'month' => [],\n            'duration' => 0,\n            'duration_content' => 0\n          ];\n        }\n        else {\n          $ylogs = json_decode(file_get_contents($year_file), true);\n        }\n        $ylogs['total']++;\n        $ylogs['duration'] += $logs[$idx]['duration'];\n        if (!empty($content)) {\n          $ylogs['content']++;\n          $ylogs['duration_content'] += $logs[$idx]['duration'];\n        }\n        $ylogs['last'] = $logs[$idx]['start'];\n        if (!in_array($month, $ylogs['month'])) {\n          $ylogs['month'][] = $month;\n        }\n        file_put_contents($year_file, json_encode($ylogs, JSON_PRETTY_PRINT));\n      }\n    }\n    exit();\n  }",
            "startLine": 314,
            "endLine": 413,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "run_all": {
            "name": "run_all",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $time = 0;\n    $done = [];\n    while (($time < $this->timeout) &&\n      ($cron = $this->cron->get_manager()->get_next()) &&\n      !\\in_array($cron['id'], $done)\n    ) {\n      if ($ctx = $this->run($cron['id'])) {\n        $time += $ctx;\n      }\n      array_push($done, $cron['id']);\n    }\n    return $time;\n  }",
            "startLine": 419,
            "endLine": 433,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
            "startLine": 45,
            "endLine": 50,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                "startLine": 45,
                "endLine": 50,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "get_error": {
            "name": "get_error",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 72,
            "endLine": 74,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "get_error",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n  }",
                "startLine": 72,
                "endLine": 74,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "get_errors": {
            "name": "get_errors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 76,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "get_errors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n  }",
                "startLine": 76,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\t\t\t$ar = \\func_get_args();\n\t\t\t$cn = bbn\\str::encode_filename(str_replace('\\\\', '_', \\get_class($this)));\n\t\t\tforeach ( $ar as $a ){\n\t\t\t\tbbn\\x::log($a, $cn);\n\t\t\t}\n\t\t}\n  }",
            "startLine": 80,
            "endLine": 88,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\t\t\t$ar = \\func_get_args();\n\t\t\t$cn = bbn\\str::encode_filename(str_replace('\\\\', '_', \\get_class($this)));\n\t\t\tforeach ( $ar as $a ){\n\t\t\t\tbbn\\x::log($a, $cn);\n\t\t\t}\n\t\t}\n  }",
                "startLine": 80,
                "endLine": 88,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $this->log([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]);\n    die(var_dump([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]));\n  }",
            "startLine": 95,
            "endLine": 99,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $this->log([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]);\n    die(var_dump([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]));\n  }",
                "startLine": 95,
                "endLine": 99,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": null,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": null,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "is_debug": {
            "name": "is_debug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 104,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "is_debug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n  }",
                "startLine": 104,
                "endLine": 106,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "set_debug": {
            "name": "set_debug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($debug)\n  {\n  }",
            "startLine": 112,
            "endLine": 114,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "set_debug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($debug)\n  {\n  }",
                "startLine": 112,
                "endLine": 114,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_cron_timeout": {
            "name": "get_cron_timeout",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$cron_timeout;\n  }",
            "startLine": 57,
            "endLine": 60,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": []
        },
        "set_cron_timeout": {
            "name": "set_cron_timeout",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($cron_timeout)\n  {\n    self::$cron_timeout = $cron_timeout;\n  }",
            "startLine": 65,
            "endLine": 68,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cron_timeout",
                    "position": 0,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "timeout"
                }
            ]
        },
        "get_poll_timeout": {
            "name": "get_poll_timeout",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$poll_timeout;\n  }",
            "startLine": 73,
            "endLine": 76,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": []
        },
        "set_poll_timeout": {
            "name": "set_poll_timeout",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($poll_timeout)\n  {\n    self::$poll_timeout = $poll_timeout;\n  }",
            "startLine": 81,
            "endLine": 84,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "poll_timeout",
                    "position": 0,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "timeout"
                }
            ]
        },
        "get_user_timeout": {
            "name": "get_user_timeout",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$user_timeout;\n  }",
            "startLine": 89,
            "endLine": 92,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": []
        },
        "set_user_timeout": {
            "name": "set_user_timeout",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($user_timeout)\n  {\n    self::$user_timeout = $user_timeout;\n  }",
            "startLine": 97,
            "endLine": 100,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "user_timeout",
                    "position": 0,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "timeout"
                }
            ]
        },
        "init": {
            "name": "init",
            "summary": "cron constructor.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg = [])\n  {\n    $this->path = bbn\\mvc::get_data_path('appui-cron');\n  }",
            "startLine": 108,
            "endLine": 111,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "get_path": {
            "name": "get_path",
            "summary": "Returns the $data property.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->path;\n  }",
            "startLine": 117,
            "endLine": 120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_status_path": {
            "name": "get_status_path",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($type)\n  {\n  }",
            "startLine": 122,
            "endLine": 124,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_pid_path": {
            "name": "get_pid_path",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    if ($this->path && (isset($cfg['type']) || isset($cfg['id']))) {\n      return $this->path.'pid\/.'.($cfg['id'] ?? $cfg['type']);\n    }\n    return null;\n  }",
            "startLine": 126,
            "endLine": 132,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_log_path": {
            "name": "get_log_path",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg, $error = false, $no_path = false)\n  {\n    $path = null;\n    if ($this->path && (isset($cfg['type']) || isset($cfg['id']))) {\n      if ( $error ){\n        $path = $this->path.'error\/'.(isset($cfg['id']) ? 'tasks\/'.$cfg['id'] : $cfg['type']);\n      }\n      else {\n        $path = $this->path.'log\/'.(isset($cfg['id']) ? 'tasks\/'.$cfg['id'] : $cfg['type']);\n      }\n      if ($error || $no_path) {\n        $path .= '\/';\n      }\n      else {\n        $path = \\bbn\\x::make_storage_path($path);\n      }\n    }\n    return $path;\n  }",
            "startLine": 134,
            "endLine": 152,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "error",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "no_path",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "get_log_tree": {
            "name": "get_log_tree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg, $error = false)\n  {\n    $fs = new bbn\\file\\system();\n    $fpath = !empty($cfg['fpath']) ? $cfg['fpath'] . '\/' : '';\n    if (($path = $this->get_log_path($cfg, $error, true)) && $fs->is_dir($path.$fpath)) {\n      $fs->cd($path.$fpath);\n      $dirs = array_reverse($fs->get_files('.\/', true, true, null, 'cts'));\n      foreach ( $dirs as &$t ){\n        $t['numChildren'] = $t['num'] ?? 0;\n        $t['fpath'] = $fpath . $t['name'];\n        if ( isset($t['num']) ){\n          unset($t['num']);\n        }\n      }\n      return $dirs;\n    }\n  }",
            "startLine": 154,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "error",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "get_day_logs": {
            "name": "get_day_logs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    if ( bbn\\str::is_uid($cfg['id']) && bbn\\str::is_date_sql($cfg['day']) ){\n      $p = \\explode('-', $cfg['day']);\n      \\array_pop($p);\n      $p = \\implode('\/', $p).'\/';\n      if (\n        ($task = $this->get_manager()->get_cron($cfg['id'])) &&\n        !empty($task['file']) &&\n        ($path = $this->get_log_path($cfg, false, true)) &&\n        ($file = $path.$p.$cfg['day'].'.json') &&\n        \\is_file($file) &&\n        ($file = \\json_decode(\\file_get_contents($file), true))\n      ){\n        return array_reverse(array_filter($file, function($f) use($task){\n          return $f['file'] === $task['file'];\n        }));\n      }\n      return [];\n    }\n    return null;\n  }",
            "startLine": 172,
            "endLine": 193,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_log_prev_next": {
            "name": "get_log_prev_next",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $fs = new bbn\\file\\system();\n    $fpath = $cfg['fpath'] ?: '';\n    if ( ($path = $this->get_log_path($cfg, false, true)) && $fs->is_dir($path.$fpath) ){\n      $fs->cd($path.$fpath);\n      $files = array_reverse($fs->get_files('.\/', true, true, null, 'cts'));\n      foreach ( $files as $i => $f ){\n        if ( $f['name'] === $cfg['filename'] ){\n          $tf = $files[$i + ($cfg['action'] === 'prev' ? 1 : -1)];\n          return $path . $fpath . (!empty($tf) ? $tf['name'] : $f['name']);\n        }\n      }\n    }\n    return null;\n  }",
            "startLine": 195,
            "endLine": 210,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_last_logs": {
            "name": "get_last_logs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg, $error = false, $start = 0, $num = 10)\n  {\n    $fs = new \\bbn\\file\\system();\n    if (($path = $this->get_log_path($cfg, $error, true)) && $fs->is_dir($path)) {\n      $res = [];\n      $fs->cd($path);\n      $years = array_reverse($fs->get_dirs($path));\n      foreach ($years as $y) {\n        $months = array_reverse($fs->get_dirs($y));\n        foreach ($months as $m) {\n          $days = array_reverse($fs->get_dirs($m));\n          foreach ($days as $d) {\n            $nums = array_reverse($fs->get_dirs($d));\n            foreach ($nums as $num) {\n              foreach (array_reverse($fs->get_files($num)) as $f) {\n                if ($start) {\n                  $start--;\n                }\n                if (!$start) {\n                  $res[] = $f;\n                  if (count($res) >= $num) {\n                    return $res;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      return $res;\n    }\n    return null;\n  }",
            "startLine": 212,
            "endLine": 244,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "error",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "num",
                    "position": 3,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": 10,
                    "default_name": ""
                }
            ]
        },
        "get_last_log": {
            "name": "get_last_log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg, $error = false)\n  {\n    if ($tmp = $this->get_last_logs($cfg, $error, 0, 1)) {\n      return $tmp[0];\n    }\n    return null;\n\n  }",
            "startLine": 246,
            "endLine": 253,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "error",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "is_active": {
            "name": "is_active",
            "summary": "Returns true if the file data_folder\/.active exists, false otherwise.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ( $this->check() ){\n      return file_exists($this->get_status_path('active'));\n    }\n    return false;\n  }",
            "startLine": 268,
            "endLine": 274,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "is_cron_active": {
            "name": "is_cron_active",
            "summary": "Returns true if the file data_folder\/.cron exists, false otherwise.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ( $this->check() ){\n      return file_exists($this->get_status_path('cron'));\n    }\n    return false;\n  }",
            "startLine": 280,
            "endLine": 286,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "is_poll_active": {
            "name": "is_poll_active",
            "summary": "Returns true if the file data_folder\/.poll exists, false otherwise.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cron\\runner",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ( $this->check() ){\n      return file_exists($this->get_status_path('poll'));\n    }\n    return false;\n  }",
            "startLine": 292,
            "endLine": 298,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        }
    },
    "properties": null,
    "staticProperties": {
        "cron_timeout": 300,
        "poll_timeout": 600,
        "user_timeout": 480
    },
    "constants": null,
    "numMethods": 36,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 3,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\cron\\common"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\models\\cls\\basic",
    "isSubclassOf": false,
    "defaultProperties": {
        "cron_timeout": 300,
        "poll_timeout": 600,
        "user_timeout": 480,
        "controller": null,
        "timer": null,
        "errors": [],
        "error": false,
        "debug": false,
        "log": [],
        "prefix": "bbn_",
        "path": null,
        "db": null,
        "ctrl": null,
        "mail": null,
        "data": null,
        "enabled": true,
        "timeout": 50
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\cron",
    "shortName": "runner",
    "summary": "Cron runner.",
    "description": "This class runs the jobs properly. It has three modalities:\n- `poll` will run the poller, continuously\n- `run_task_system` will run the task system, continuously\n- `run_task` will run a given task, once",
    "description_parts": [
        {
            "type": "text",
            "content": "<p>This class runs the jobs properly. It has three modalities:<\/p>\n<ul>\n<li><code>poll<\/code> will run the poller, continuously<\/li>\n<li><code>run_task_system<\/code> will run the task system, continuously<\/li>\n<li><code>run_task<\/code> will run a given task, once<\/li>\n<\/ul>"
        }
    ]
}