{
    "doc": {
        "description": "Class text\nString manipulation class\n *\nThis class only uses static methods and has lots of alias for the escaping methods",
        "tags": {
            "author": "Thomas Nabet <thomas.nabet@gmail.com>",
            "copyright": "BBN Solutions",
            "since": "Apr 4, 2011, 23:23:55 +0000",
            "category": "Strings",
            "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT",
            "version": "0.2r89\n *"
        }
    },
    "name": "bbn\\Str",
    "namespace": true,
    "traits": [],
    "interfaces": [],
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/str.php",
    "startLine": 20,
    "endLine": 1464,
    "contentConstructor": null,
    "methods": {
        "cast": {
            "name": "cast",
            "summary": "Converts any type of variable to a string.",
            "description": "*\n```php\n$st = 122\nx::dump(\\bbn\\Str::cast($st));\n\/\/ (string) \"122\"\nx::dump(\\bbn\\Str::cast(1));\n\/\/ (string) \"1\"\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "$st = 122\nx::dump(\\bbn\\Str::cast($st));\n\/\/ (string) \"122\"\nx::dump(\\bbn\\Str::cast(1));\n\/\/ (string) \"1\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    if ( \\is_array($st) || \\is_object($st) ){\n      return '';\n    }\n    return (string)$st;\n  }",
            "startLine": 44,
            "endLine": 50,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "change_case": {
            "name": "change_case",
            "summary": "Converts the case of a string.",
            "description": "*\n```php\n$st = 'TEST CASE';\nx::dump(\\bbn\\Str::changeCase($st, 'lower'));\n\/\/ (string) \"test case\"\nx::dump(\\bbn\\Str::changeCase('TEsT Case', 'upper'));\n\/\/ (string) \"TEST CASE\"\nx::dump(\\bbn\\Str::changeCase('test case'));\n\/\/ (string) \"Test Case\"\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "$st = 'TEST CASE';\nx::dump(\\bbn\\Str::changeCase($st, 'lower'));\n\/\/ (string) \"test case\"\nx::dump(\\bbn\\Str::changeCase('TEsT Case', 'upper'));\n\/\/ (string) \"TEST CASE\"\nx::dump(\\bbn\\Str::changeCase('test case'));\n\/\/ (string) \"Test Case\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st, $case = 'x')\n  {\n    $st = self::cast($st);\n    $case = substr(strtolower((string)$case), 0, 1);\n    switch ( $case ){\n      case \"l\":\n        $case = MB_CASE_LOWER;\n        break;\n      case \"u\":\n        $case = MB_CASE_UPPER;\n        break;\n      default:\n        $case = MB_CASE_TITLE;\n    }\n    if ( !empty($st) ){\n      $st = mb_convert_case($st, $case);\n    }\n    return $st;\n  }",
            "startLine": 69,
            "endLine": 87,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The case to convert to (\"lower\" or \"upper\"), default being the title case."
                },
                {
                    "name": "case",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "x",
                    "default_name": ""
                }
            ]
        },
        "escape_all_quotes": {
            "name": "escape_all_quotes",
            "summary": "Escapes all quotes (single and double) from a given string.",
            "description": "*\n```php\nx::dump(\\bbn\\Str::escapeDquotes('the \"Gay Pride\" is is Putin\\'s favorite'));\n\/\/ (string) \"the \\\"Gay Pride\\\" is is Putin\\'s favorite\"\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::escapeDquotes('the \"Gay Pride\" is is Putin\\'s favorite'));\n\/\/ (string) \"the \\\"Gay Pride\\\" is is Putin\\'s favorite\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return self::escapeDquotes(self::escapeSquotes($st));\n  }",
            "startLine": 102,
            "endLine": 105,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "escape_dquotes": {
            "name": "escape_dquotes",
            "summary": "Escapes the string in double quotes.",
            "description": "*\n```php\nx::dump(\\bbn\\Str::escapeDquotes('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\"\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::escapeDquotes('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return addcslashes(self::cast($st), \"\\\"\\\\\\r\\n\\t\");\n  }",
            "startLine": 119,
            "endLine": 122,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "escape_dquote": {
            "name": "escape_dquote",
            "summary": "Synonym of \"escape_dquotes\".",
            "description": "*\n```php\nx::dump(\\bbn\\Str::escapeDquote('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\"\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::escapeDquote('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return self::escapeDquotes($st);\n  }",
            "startLine": 135,
            "endLine": 138,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "escape_quote": {
            "name": "escape_quote",
            "summary": "Synonym of \"escape_dquotes\".",
            "description": "*\n```php\nx::dump(\\bbn\\Str::escapeQuote('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\"\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::escapeQuote('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return self::escapeDquotes($st);\n  }",
            "startLine": 151,
            "endLine": 154,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "escape_quotes": {
            "name": "escape_quotes",
            "summary": "Synonym of \"escape_dquotes\".",
            "description": "*\n```php\nx::dump(\\bbn\\Str::escapeQuotes('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\"\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::escapeQuotes('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return self::escapeDquotes($st);\n  }",
            "startLine": 167,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "escape_squotes": {
            "name": "escape_squotes",
            "summary": "Escapes the string in quotes.",
            "description": "*\n```php\nx::dump(\\bbn\\Str::escapeSquotes(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\"\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::escapeSquotes(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return addcslashes(self::cast($st), \"'\\\\\\r\\n\\t\");\n  }",
            "startLine": 183,
            "endLine": 186,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "escape": {
            "name": "escape",
            "summary": "Synonym of \"escape_squotes\".",
            "description": "*\n```php\nx::dump(\\bbn\\Str::escape(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\"\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::escape(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return self::escapeSquotes($st);\n  }",
            "startLine": 199,
            "endLine": 202,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "escape_apo": {
            "name": "escape_apo",
            "summary": "Synonym of \"escape_squotes\".",
            "description": "*\n```php\nx::dump(\\bbn\\Str::escapeApo(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\"\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::escapeApo(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return self::escapeSquotes($st);\n  }",
            "startLine": 215,
            "endLine": 218,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "escape_squote": {
            "name": "escape_squote",
            "summary": "Synonym of \"escape_squotes\".",
            "description": "*\n```php\nx::dump(\\bbn\\Str::escapeSquote(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\"\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::escapeSquote(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return self::escapeSquotes($st);\n  }",
            "startLine": 231,
            "endLine": 234,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "clean": {
            "name": "clean",
            "summary": "Returns an expunged string of several types of character(s) depending on the configuration.",
            "description": "*\n```php\n$test=\"this      is\ncold\";\n   *\nx::dump(\\bbn\\Str::clean($test));\n\/\/ (string)  \"this is\\n cold\"\n   *\n$test1=\"this is\n   *\n   *\ncold\";\n   *\nx::dump(\\bbn\\Str::clean($test1,'2nl'));\n\/* (string)\n\"this is\n cold\"\n   *\nx::dump(\\bbn\\Str::clean($test1,'html'));\n\/\/ (string)  \"this is cold\"\n   *\nx::dump(\\bbn\\Str::clean('$x = 9993','code'));\n\/\/ (string)  \"$x=9993\"\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "$test=\"this      is\ncold\";\n   *\nx::dump(\\bbn\\Str::clean($test));\n\/\/ (string)  \"this is\\n cold\"\n   *\n$test1=\"this is\n   *\n   *\ncold\";\n   *\nx::dump(\\bbn\\Str::clean($test1,'2nl'));\n\/* (string)\n\"this is\n cold\"\n   *\nx::dump(\\bbn\\Str::clean($test1,'html'));\n\/\/ (string)  \"this is cold\"\n   *\nx::dump(\\bbn\\Str::clean('$x = 9993','code'));\n\/\/ (string)  \"$x=9993\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st, $mode = 'all')\n  {\n    if ( \\is_array($st) ){\n      reset($st);\n      $i = \\count($st);\n      if ( trim($st[0]) == '' ){\n        array_splice($st,0,1);\n        $i--;\n      }\n      if ( $i > 0 ){\n        if ( trim($st[$i-1]) === '' ){\n          array_splice($st, $i-1, 1);\n          $i--;\n        }\n      }\n      return $st;\n    }\n    else{\n      $st = self::cast($st);\n      if ( $mode == 'all' ){\n        $st = mb_ereg_replace(\"\\n\",'\\n',$st);\n        $st = mb_ereg_replace(\"[\\t\\r]\",\"\",$st);\n        $st = mb_ereg_replace('\\s{2,}',' ',$st);\n      }\n      else if ( $mode == '2nl' ){\n        $st = mb_ereg_replace(\"[\\r]\",\"\",$st);\n        $st = mb_ereg_replace(\"\\n{2,}\",\"\\n\",$st);\n      }\n      else if ( $mode == 'html' ){\n        $st = mb_ereg_replace(\"[\\t\\r\\n]\",'',$st);\n        $st = mb_ereg_replace('\\s{2,}',' ',$st);\n      }\n      else if ( $mode == 'code' ){\n        $st = mb_ereg_replace(\"!\/\\*.*?\\*\/!s\",'',$st); \/\/ comment_pattern\n        $st = mb_ereg_replace(\"[\\r\\n]\",'',$st);\n        $st = mb_ereg_replace(\"\\t\",\" \",$st);\n        $chars = [';','=','+','-','\\(','\\)','\\{','\\}','\\[','\\]',',',':'];\n        foreach ( $chars as $char ){\n          while ( mb_strpos($st,$char.' ') !== false ){\n            $st = mb_ereg_replace($char.' ',$char,$st);\n          }\n          while ( mb_strpos($st,' '.$char) !== false ){\n            $st = mb_ereg_replace(' '.$char,$char,$st);\n          }\n        }\n        $st = mb_ereg_replace('<\\?p'.'hp','<?p'.'hp ',$st);\n        $st = mb_ereg_replace('\\?'.'>','?'.'> ',$st);\n        $st = mb_ereg_replace('\\s{2,}',' ',$st);\n      }\n      return trim($st);\n    }\n  }",
            "startLine": 267,
            "endLine": 318,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "A selection of configuration: \"all\" (default), \"2n1\", \"html\", \"code\"."
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "all",
                    "default_name": ""
                }
            ]
        },
        "cut": {
            "name": "cut",
            "summary": "Cuts a string (HTML and PHP tags stripped) to maximum length inserted.",
            "description": "*\n```php\nx::dump(\\bbn\\Str::cut(\"<!-- HTML Document --> Example text\", 7));\n\/\/ (string) \"Example...\"\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::cut(\"<!-- HTML Document --> Example text\", 7));\n\/\/ (string) \"Example...\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st, $max = 15)\n  {\n    $st = self::cast($st);\n    $st = mb_ereg_replace('&nbsp;',' ',$st);\n    $st = mb_ereg_replace('\\n',' ',$st);\n    $st = strip_tags($st);\n    $st = html_entity_decode($st, ENT_QUOTES, 'UTF-8');\n    $st = self::clean($st);\n    if ( mb_strlen($st) >= $max ){\n      \/\/ Chars forbidden to finish with a string\n      $chars = [' ', '.'];\n      \/\/ Final chars\n      $ends = [];\n      \/\/ The string gets cut at $max\n      $st = mb_substr($st, 0, $max);\n      while ( \\in_array(substr($st, -1), $chars) ){\n        $st = substr($st, 0, -1);\n      }\n      $st .= '...';\n    }\n    return $st;\n  }",
            "startLine": 332,
            "endLine": 353,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The maximum string length."
                },
                {
                    "name": "max",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 15,
                    "default_name": ""
                }
            ]
        },
        "sanitize": {
            "name": "sanitize",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    $file = mb_ereg_replace(\"([^\\w\\s\\d\\-_~,;\\[\\]\\(\\).])\", '', $st);\n\t\/\/ Removes any run of periods (thanks falstro!)\n    $file = mb_ereg_replace(\"([\\.]{2,})\", '', $file);\n    return $file;\n  }",
            "startLine": 358,
            "endLine": 364,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "encode_filename": {
            "name": "encode_filename",
            "summary": "Returns a cross-platform filename for the file.",
            "description": "*\n```php\nx::dump(\\bbn\\Str::encodeFilename('test file\/,1', 15, 'txt'));\n\/\/ (string) \"test_file_1.txt\"\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::encodeFilename('test file\/,1', 15, 'txt'));\n\/\/ (string) \"test_file_1.txt\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st, $maxlength = 50, $extension = NULL, $is_path = false)\n  {\n\n    $st = self::removeAccents(self::cast($st));\n    $allowed = '~\\-_.,\\(\\[\\)\\]';\n\n    \/\/ Arguments order doesn't matter\n    $args = \\func_get_args();\n    foreach ( $args as $i => $a ){\n      if ( $i > 0 ){\n        if ( \\is_string($a) ){\n          $extension = $a;\n        }\n        else if ( \\is_int($a) ){\n          $maxlength = $a;\n        }\n        else if ( \\is_bool($a) ){\n          $is_path = $a;\n        }\n      }\n    }\n\n    if ( !\\is_int($maxlength) ){\n      $maxlength = mb_strlen($st);\n    }\n\n    if ( $is_path ){\n      $allowed .= '\/';\n    }\n\n    if (\n      $extension &&\n      (self::fileExt($st) === self::changeCase($extension, 'lower'))\n    ){\n      $st = substr($st, 0, -(\\strlen($extension)+1));\n    }\n    else if ( $extension = self::fileExt($st) ){\n      $st = substr($st, 0, -(\\strlen($extension)+1));\n    }\n    $st = mb_ereg_replace(\"([^\\w\\s\\d\".$allowed.\".])\", '', $st);\n    $st = mb_ereg_replace(\"([\\.]{2,})\", '', $st);\n    $res = mb_substr($st, 0, $maxlength);\n    if ( $extension ){\n      $res .= '.' . $extension;\n    }\n    return $res;\n  }",
            "startLine": 380,
            "endLine": 426,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The maximum filename length (without extension), default: \"50\"."
                },
                {
                    "name": "maxlength",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": 50,
                    "default_name": "",
                    "description": "The extension of the file."
                },
                {
                    "name": "extension",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "path Tells if the slashes (\/) are authorized in the string"
                },
                {
                    "name": "is_path",
                    "position": 3,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "encode_dbname": {
            "name": "encode_dbname",
            "summary": "Returns a corrected string for database naming.",
            "description": "*\n```php\nx::dump(\\bbn\\Str::encodeDbname('my.database_name ? test  :,; !plus'));\n\/\/ (string) \"my_database_name_test_plus\"\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::encodeDbname('my.database_name ? test  :,; !plus'));\n\/\/ (string) \"my_database_name_test_plus\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st, $maxlength = 50)\n  {\n    $st = self::removeAccents(self::cast($st));\n    $res = '';\n\n    if ( !\\is_int($maxlength) ){\n      $maxlength = mb_strlen($st);\n    }\n\n    for ( $i = 0; $i < $maxlength; $i++ ){\n      if ( mb_ereg_match('[A-z0-9]',mb_substr($st,$i,1)) ){\n        $res .= mb_substr($st,$i,1);\n      }\n      else if ( (mb_strlen($res) > 0) &&\n        (mb_substr($res,-1) != '_') &&\n        ($i < ( mb_strlen($st) - 1 )) ){\n        $res .= '_';\n      }\n    }\n    if ( substr($res, -1) === '_' ){\n      $res = substr($res, 0, -1);\n    }\n    return $res;\n  }",
            "startLine": 440,
            "endLine": 463,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The maximum length, default: \"50\"."
                },
                {
                    "name": "maxlength",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": 50,
                    "default_name": ""
                }
            ]
        },
        "file_ext": {
            "name": "file_ext",
            "summary": "Returns the file extension.",
            "description": "*\n```php\n\/\/ (string) \"txt\"\nx::dump(str::fileExt(\"\/test\/test.txt\"));\n\n\/\/ (array) [ \"test\", \"txt\", ]\nx::dump(\\bbn\\Str::fileExt('\/home\/user\/Desktop\/test.txt', true));\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "\/\/ (string) \"txt\"\nx::dump(str::fileExt(\"\/test\/test.txt\"));\n\n\/\/ (array) [ \"test\", \"txt\", ]\nx::dump(\\bbn\\Str::fileExt('\/home\/user\/Desktop\/test.txt', true));"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($file, $ar = false)\n  {\n    $file = self::cast($file);\n    if ( mb_strrpos($file, '\/') !== false ){\n      $file = substr($file, mb_strrpos($file, '\/') + 1);\n    }\n    if ( mb_strpos($file, '.') !== false ){\n      $p = mb_strrpos($file, '.');\n      $f = mb_substr($file, 0, $p);\n      $ext = mb_convert_case(mb_substr($file, $p+1), MB_CASE_LOWER);\n      return $ar ? [$f, $ext] : $ext;\n    }\n    return $ar ? [$file, ''] : '';\n  }",
            "startLine": 480,
            "endLine": 493,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "If \"true\" also returns the file path, default: \"false\"."
                },
                {
                    "name": "ar",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "genpwd": {
            "name": "genpwd",
            "summary": "Returns a random password.",
            "description": "*\n```php\nx::dump(\\bbn\\Str::genpwd());\n\/\/ (string) \"khc9P871w\"\nx::dump(\\bbn\\Str::genpwd(6, 4));\n\/\/ (string) \"dDEtxY\"\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::genpwd());\n\/\/ (string) \"khc9P871w\"\nx::dump(\\bbn\\Str::genpwd(6, 4));\n\/\/ (string) \"dDEtxY\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($int_max = NULL, $int_min = NULL)\n  {\n    if ( is_null($int_max) && is_null($int_min) ){\n      $int_max = 12;\n      $int_min = 8;\n    }\n    else if ( is_null($int_min) ){\n      $int_min = $int_max;\n    }\n    else if ( is_null($int_max) ){\n      $int_max = $int_min;\n    }\n    mt_srand();\n    $len = ($int_min > 0) && ($int_min < $int_max) ? random_int($int_min, $int_max) : $int_max;\n    $mdp = '';\n    for( $i = 0; $i < $len; $i++ ){\n      \/\/ First character is a letter\n      $type = $i === 0 ? random_int(2, 3) : random_int(1, 3);\n      switch ( $type ){\n        case 1:\n          $mdp .= random_int(0,9);\n          break;\n        case 2:\n          $mdp .= \\chr(random_int(65,90));\n          break;\n        case 3:\n          $mdp .= \\chr(random_int(97,122));\n          break;\n      }\n    }\n    return $mdp;\n  }",
            "startLine": 509,
            "endLine": 540,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "int_max",
                    "position": 0,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "min Minimum password characters, default: \"6\"."
                },
                {
                    "name": "int_min",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "is_json": {
            "name": "is_json",
            "summary": "Checks if the string is a json string.",
            "description": "*\n```php\nx::dump(\\bbn\\Str::isJson('{\"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25}'));\n\/\/ (bool) true\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::isJson('{\"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25}'));\n\/\/ (bool) true"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    if ( \\is_string($st) && !empty($st) &&\n      ( (substr($st, 0, 1) === '{') || (substr($st, 0, 1) === '[') )){\n      json_decode($st);\n      return (json_last_error() == JSON_ERROR_NONE);\n    }\n    return false;\n  }",
            "startLine": 553,
            "endLine": 561,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "is_number": {
            "name": "is_number",
            "summary": "Checks if the item is a number.",
            "description": "Can take as many arguments and will return false if one of them is not a number.\n   *\n```php\nx::dump(\\bbn\\Str::isNumber([1, 2]));\n\/\/ (bool) false\nx::dump(\\bbn\\Str::isNumber(150);\n\/\/ (bool) 1\nx::dump(\\bbn\\Str::isNumber('150'));\n\/\/ (bool)  1\nx::dump(\\bbn\\Str::isNumber(1.5);\n\/\/ (bool) 1\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Can take as many arguments and will return false if one of them is not a number.\n*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::isNumber([1, 2]));\n\/\/ (bool) false\nx::dump(\\bbn\\Str::isNumber(150);\n\/\/ (bool) 1\nx::dump(\\bbn\\Str::isNumber('150'));\n\/\/ (bool)  1\nx::dump(\\bbn\\Str::isNumber(1.5);\n\/\/ (bool) 1"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $args = \\func_get_args();\n    foreach ( $args as $a ){\n      if ( \\is_string($a) ){\n        if ( !preg_match('\/^-?(?:\\d+|\\d*\\.\\d+)$\/', $a) ){\n          return false;\n        }\n      }\n      else if ( !\\is_int($a) && !\\is_float($a) ){\n        return false;\n      }\n    }\n    return true;\n  }",
            "startLine": 581,
            "endLine": 595,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "is_integer": {
            "name": "is_integer",
            "summary": "Checks if the item is a integer.",
            "description": "Can take as many arguments and will return false if one of them is not an integer or the string of an integer.\n   *\n```php\nx::dump(\\bbn\\Str::isInteger(13.2));\n\/\/ (bool) false\nx::dump(\\bbn\\Str::isInteger(14));\n\/\/ (bool) true\nx::dump(\\bbn\\Str::isInteger('14'));\n\/\/ (bool) true\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Can take as many arguments and will return false if one of them is not an integer or the string of an integer.\n*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::isInteger(13.2));\n\/\/ (bool) false\nx::dump(\\bbn\\Str::isInteger(14));\n\/\/ (bool) true\nx::dump(\\bbn\\Str::isInteger('14'));\n\/\/ (bool) true"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $args = \\func_get_args();\n    foreach ( $args as $a ){\n      if ( \\is_string($a) || (abs($a) > PHP_INT_MAX) ){\n        if ( !preg_match('\/^-?(\\d+)$\/', (string)$a) ){\n          return false;\n        }\n      }\n      else if ( !\\is_int($a) ){\n        return false;\n      }\n    }\n    return true;\n  }",
            "startLine": 613,
            "endLine": 627,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "is_clean_path": {
            "name": "is_clean_path",
            "summary": "Checks if \".. \\\\\" or \"..\/\" is contained in the parameter and it will return false if true.",
            "description": "*\n```php\nx::dump(\\bbn\\Str::isCleanPath(\"\/home\/user\/Images\"));\n\/\/ (bool) true\nx::dump(\\bbn\\Str::isCleanPath(\"..\/home\/user\/Images\"));\n\/\/ (bool) false\nx::dump(\\bbn\\Str::isCleanPath(\"..\\\\home\\user\\Images\"));\n\/\/ (bool) false\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::isCleanPath(\"\/home\/user\/Images\"));\n\/\/ (bool) true\nx::dump(\\bbn\\Str::isCleanPath(\"..\/home\/user\/Images\"));\n\/\/ (bool) false\nx::dump(\\bbn\\Str::isCleanPath(\"..\\\\home\\user\\Images\"));\n\/\/ (bool) false"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $args = \\func_get_args();\n    foreach ( $args as $a ){\n      if ( \\is_string($a) ){\n        if ( (strpos($a, '..\/') !== false) || (strpos($a, '..\\\\') !== false) ){\n          return false;\n        }\n      }\n      else {\n        return false;\n      }\n    }\n    return true;\n  }",
            "startLine": 644,
            "endLine": 658,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "is_decimal": {
            "name": "is_decimal",
            "summary": "Checks if the item is a decimal.",
            "description": "Can take many arguments and it will return false if one of them is not a decimal or the string of a decimal (float).\n   *\n```php\nx::dump(\\bbn\\Str::isDecimal(13.2));\n\/\/ (bool) true\nx::dump(\\bbn\\Str::isDecimal('13.2'));\n\/\/ (bool) true\nx::dump(\\bbn\\Str::isDecimal(14));\n\/\/ (bool) false\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Can take many arguments and it will return false if one of them is not a decimal or the string of a decimal (float).\n*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::isDecimal(13.2));\n\/\/ (bool) true\nx::dump(\\bbn\\Str::isDecimal('13.2'));\n\/\/ (bool) true\nx::dump(\\bbn\\Str::isDecimal(14));\n\/\/ (bool) false"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $args = \\func_get_args();\n    foreach ( $args as $a ){\n      if ( \\is_string($a) ){\n        if ( !preg_match('\/^-?(\\d*\\.\\d+)$\/', $a) ){\n          return false;\n        }\n      }\n      else if ( !\\is_float($a) ){\n        return false;\n      }\n    }\n    return true;\n  }",
            "startLine": 676,
            "endLine": 690,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "is_uid": {
            "name": "is_uid",
            "summary": "Checks if the string is a valid UID string.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return \\is_string($st) && (\\strlen($st) === 32) && ctype_xdigit($st);\/\/ && !mb_detect_encoding($st);\n  }",
            "startLine": 698,
            "endLine": 701,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "is_buid": {
            "name": "is_buid",
            "summary": "Checks if the string is a valid binary UID string.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    if ( \\is_string($st) && (\\strlen($st) === 16) && !ctype_print($st) && !ctype_space($st) ){\n      $enc = mb_detect_encoding($st, ['8bit', 'UTF-8']);\n      if ( !$enc || ($enc === '8bit') ){\n        return true;\n      }\n    }\n    return false;\n  }",
            "startLine": 709,
            "endLine": 718,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "is_email": {
            "name": "is_email",
            "summary": "Checks if the string is the correct type of e-mail address.",
            "description": "*\n```php\nx::dump(\\bbn\\Str::isEmail('test@email.com'));\n\/\/ (bool) true\nx::dump(\\bbn\\Str::isEmail('test@email'));\n\/\/ (bool) false\nx::dump(\\bbn\\Str::isEmail('test@.com'));\n\/\/ (bool) false\nx::dump(\\bbn\\Str::isEmail('testemail.com'));\n\/\/ (bool) false\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::isEmail('test@email.com'));\n\/\/ (bool) true\nx::dump(\\bbn\\Str::isEmail('test@email'));\n\/\/ (bool) false\nx::dump(\\bbn\\Str::isEmail('test@.com'));\n\/\/ (bool) false\nx::dump(\\bbn\\Str::isEmail('testemail.com'));\n\/\/ (bool) false"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($email)\n  {\n    if ( function_exists('filter_var') ){\n      return filter_var($email,FILTER_VALIDATE_EMAIL) ? true : false;\n    }\n    else\n    {\n      $isValid = true;\n      $atIndex = mb_strrpos($email, \"@\");\n      if (\\is_bool($atIndex) && !$atIndex)\n      {\n        $isValid = false;\n      }\n      else\n      {\n        $domain = mb_substr($email, $atIndex+1);\n        $local = mb_substr($email, 0, $atIndex);\n        $localLen = mb_strlen($local);\n        $domainLen = mb_strlen($domain);\n        \/\/  local part length exceeded\n        if ($localLen < 1 || $localLen > 64)\n          $isValid = false;\n        \/\/  domain part length exceeded\n        else if ($domainLen < 1 || $domainLen > 255)\n          $isValid = false;\n        \/\/ local part starts or ends with '.'\n        else if ($local[0] == '.' || $local[$localLen-1] == '.')\n          $isValid = false;\n        \/\/ local part has two consecutive dots\n        else if (mb_ereg_match('\\\\.\\\\.', $local))\n          $isValid = false;\n        \/\/ character not valid in domain part\n        else if (!mb_ereg_match('^[A-Za-z0-9\\\\-\\\\.]+$', $domain))\n          $isValid = false;\n        \/\/  domain part has two consecutive dots\n        else if (mb_ereg_match('\\\\.\\\\.', $domain))\n          $isValid = false;\n        \/\/  character not valid in local part unless\n        else if ( !mb_ereg_match('^(\\\\\\\\.|[A-Za-z0-9!#%&`_=\\\\\/$\\'*+?^{}|~.-])+$'\n          ,str_replace(\"\\\\\\\\\",\"\",$local)))\n        {\n          \/\/ local part is quoted\n          if ( !mb_ereg_match('^\"(\\\\\\\\\"|[^\"])+\"$',str_replace(\"\\\\\\\\\",\"\",$local)) )\n            $isValid = false;\n        }\n      }\n      return $isValid;\n    }\n  }",
            "startLine": 737,
            "endLine": 785,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "email",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "is_url": {
            "name": "is_url",
            "summary": "Checks if the argument is a valid URL string.",
            "description": "*\n```php\nx::dump(\\bbn\\Str::isUrl(\"http:\/\/bbn.so\"));\n\/\/ (string) \"https:\/\/bbn.so\"\n   *\nx::dump(\\bbn\\Str::isUrl(\"bbn.so\"));\n\/\/ (bool) false\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::isUrl(\"http:\/\/bbn.so\"));\n\/\/ (string) \"https:\/\/bbn.so\"\n   *\nx::dump(\\bbn\\Str::isUrl(\"bbn.so\"));\n\/\/ (bool) false"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n  }",
            "startLine": 801,
            "endLine": 803,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "is_domain": {
            "name": "is_domain",
            "summary": "Checks if the argument is a valid domain name.",
            "description": "*\n```php\nx::dump(\\bbn\\Str::isDomain(\"http:\/\/bbn.so\"));\n\/\/ (string) false\n   *\nx::dump(\\bbn\\Str::isDomain(\"bbn.so\"));\n\/\/ (bool) true\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::isDomain(\"http:\/\/bbn.so\"));\n\/\/ (string) false\n   *\nx::dump(\\bbn\\Str::isDomain(\"bbn.so\"));\n\/\/ (bool) true"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return (preg_match(\"\/^([a-z\\d](-*[a-z\\d])*)(\\.([a-z\\d](-*[a-z\\d])*))*$\/i\", $st) \/\/valid chars check\n      && preg_match(\"\/^.{1,253}$\/\", $st) \/\/overall length check\n      && preg_match(\"\/^[^\\.]{1,63}(\\.[^\\.]{1,63})*$\/\", $st)   ); \/\/length of each label\n  }",
            "startLine": 819,
            "endLine": 824,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "is_ip": {
            "name": "is_ip",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    $valid = filter_var($st, FILTER_VALIDATE_IP);\n    return $valid;\n  }",
            "startLine": 826,
            "endLine": 830,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "is_date_sql": {
            "name": "is_date_sql",
            "summary": "Checks if the argument is in a valid SQL date format.",
            "description": "*\n```php\nx::dump(\\bbn\\Str::isDateSql(\"1999-12-05 11:10:22\"));\n\/\/ (bool) true\nx::dump(\\bbn\\Str::isDateSql(\"1999-12-05\"));\n\/\/ (bool) true\nx::dump(\\bbn\\Str::isDateSql(\"19-12-1999\"));\n\/\/ (bool) false\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::isDateSql(\"1999-12-05 11:10:22\"));\n\/\/ (bool) true\nx::dump(\\bbn\\Str::isDateSql(\"1999-12-05\"));\n\/\/ (bool) true\nx::dump(\\bbn\\Str::isDateSql(\"19-12-1999\"));\n\/\/ (bool) false"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    foreach (func_get_args() as $a) {\n      if (!date::validateSQL($a)) {\n        return false;\n      }\n    }\n    return true;\n  }",
            "startLine": 847,
            "endLine": 855,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "correct_types": {
            "name": "correct_types",
            "summary": "If it looks like an int or float type, the string variable is converted into the correct type.",
            "description": "*\n```php\nx::dump(\\bbn\\Str::correctTypes(1230));\n\/\/ (int) 1230\nx::dump(\\bbn\\Str::correctTypes(12.30));\n\/\/ (float) 12.3\nx::dump(\\bbn\\Str::correctTypes(\"12.3\"));\n\/\/ (float) 12.3\nx::dump(\\bbn\\Str::correctTypes([1230]));\n\/\/ (int) [1230]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::correctTypes(1230));\n\/\/ (int) 1230\nx::dump(\\bbn\\Str::correctTypes(12.30));\n\/\/ (float) 12.3\nx::dump(\\bbn\\Str::correctTypes(\"12.3\"));\n\/\/ (float) 12.3\nx::dump(\\bbn\\Str::correctTypes([1230]));\n\/\/ (int) [1230]"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    if (\\is_string($st)) {\n      if (self::isBuid($st)) {\n        $st = bin2hex($st);\n      }\n      else{\n        if (self::isJson($st)) {\n          if (strpos($st, '\": ') && ($json = json_decode($st))) {\n            return json_encode($json);\n          }\n\n          return $st;\n        }\n\n        $st = trim(trim($st, \" \"), \"\\t\");\n        if (self::isInteger($st)\n            && ((substr((string)$st, 0, 1) !== '0') || ($st === '0'))\n        ) {\n          $tmp = (int)$st;\n          if (($tmp < PHP_INT_MAX) && ($tmp > -PHP_INT_MAX)) {\n            return $tmp;\n          }\n        }\n        \/\/ If it is a decimal, not starting or ending with a zero\n        elseif (self::isDecimal($st)) {\n          return (float)$st;\n        }\n      }\n    }\n    elseif (\\is_array($st)) {\n      foreach ($st as $k => $v) {\n        $st[$k] = self::correctTypes($v);\n      }\n    }\n    elseif (\\is_object($st)) {\n      $vs = get_object_vars($st);\n      foreach ($vs as $k => $v) {\n        $st->$k = self::correctTypes($v);\n      }\n    }\n\n    return $st;\n  }",
            "startLine": 874,
            "endLine": 917,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "parse_url": {
            "name": "parse_url",
            "summary": "Returns an array containing any of the various components of the URL that are present.",
            "description": "*\n```php\nx::hdump(\\bbn\\Str::parseUrl('http:\/\/localhost\/phpmyadmin\/?db=test&table=users&server=1&target=&token=e45a102c5672b2b4fe84ae75d9148981');\n\/* (array)\n[\n    'scheme' => 'http',\n    'host' => 'localhost',\n    'path' => '\/phpmyadmin\/',\n    'query' => 'db=test&table=users&server=1&target=&token=e45a102c5672b2b4fe84ae75d9148981',\n    'url' => 'http:\/\/localhost\/phpmyadmin\/',\n    'params' => [\n        'db' => 'test',\n        'table' => 'users',\n        'server' => '1',\n        'target' => '',\n        'token' => 'e45a102c5672b2b4fe84ae75d9148981',\n    ],\n]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::hdump(\\bbn\\Str::parseUrl('http:\/\/localhost\/phpmyadmin\/?db=test&table=users&server=1&target=&token=e45a102c5672b2b4fe84ae75d9148981');\n\/* (array)\n[\n    'scheme' => 'http',\n    'host' => 'localhost',\n    'path' => '\/phpmyadmin\/',\n    'query' => 'db=test&table=users&server=1&target=&token=e45a102c5672b2b4fe84ae75d9148981',\n    'url' => 'http:\/\/localhost\/phpmyadmin\/',\n    'params' => [\n        'db' => 'test',\n        'table' => 'users',\n        'server' => '1',\n        'target' => '',\n        'token' => 'e45a102c5672b2b4fe84ae75d9148981',\n    ],\n]"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($url)\n  {\n    $url = self::cast($url);\n    $r = X::mergeArrays(parse_url($url), ['url' => $url,'query' => '','params' => []]);\n    if ( strpos($url,'?') > 0 )\n    {\n      $p = explode('?',$url);\n      $r['url'] = $p[0];\n      $r['query'] = $p[1];\n      $ps = explode('&',$r['query']);\n      foreach ( $ps as $p ){\n        $px = explode('=',$p);\n        $r['params'][$px[0]] = $px[1];\n      }\n    }\n    return $r;\n  }",
            "startLine": 945,
            "endLine": 961,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "parse_path": {
            "name": "parse_path",
            "summary": "Replaces backslash with slash in a path string. Forbids the use of ..\/",
            "description": "*\n```php\nx::dump(\\bbn\\Str::parsePath('\\home\\user\\Desktop'));\n\/\/ (string) \"\/home\/user\/Desktop\"\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::parsePath('\\home\\user\\Desktop'));\n\/\/ (string) \"\/home\/user\/Desktop\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($path, $allow_parent = false)\n  {\n    $path = str_replace('\\\\', '\/', \\strval($path));\n    $path = str_replace('\/.\/', '\/', \\strval($path));\n    while ( strpos($path, '\/\/') !== false ){\n      $path = str_replace('\/\/', '\/', $path);\n    }\n    if ( strpos($path, '..\/') !== false ){\n      if ( !$allow_parent ){\n        return '';\n      }\n      $bits = array_reverse(explode('\/', $path));\n      $path = '';\n      $num_parent = 0;\n      foreach ( $bits as $i => $b ){\n        if ( $b === '..' ){\n          $num_parent++;\n        }\n        else if ( $b !== '.' ){\n          if ( $num_parent ){\n            $num_parent--;\n          }\n          else{\n            $path = empty($path) ? $b : $b.'\/'.$path;\n          }\n        }\n      }\n    }\n    return $path;\n  }",
            "startLine": 975,
            "endLine": 1004,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "parent If true ..\/ is allowed in the path (and will become normalized)."
                },
                {
                    "name": "allow_parent",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "remove_accents": {
            "name": "remove_accents",
            "summary": "Replaces accented characters with their character without the accent.",
            "description": "*\n```php\nx::dump(\\bbn\\Str::removeAccents(\"T\u00c3\u00a8st F\u00c3\u00acl\u00c3\u00a8 \u00c3\u00b2\u00c3\u00a8\u00c3\u00a0\u00c3\u00b9\u00e8\"));\n\/\/ (string) \"TA\u00a8st  FA\u00aclA\u00a8  A\u00b2A\u00a8A A\u00b9e\"\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::removeAccents(\"T\u00c3\u00a8st F\u00c3\u00acl\u00c3\u00a8 \u00c3\u00b2\u00c3\u00a8\u00c3\u00a0\u00c3\u00b9\u00e8\"));\n\/\/ (string) \"TA\u00a8st  FA\u00aclA\u00a8  A\u00b2A\u00a8A A\u00b9e\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    $st = trim(\\mb_ereg_replace('&(.)(tilde|circ|grave|acute|uml|ring|oelig);', '\\\\1', self::cast($st)));\n    $search = explode(\",\",\"\u00e7,\u00e6,\u0153,\u00e1,\u00e9,\u00ed,\u00f3,\u00fa,\u00e0,\u00e8,\u00ec,\u00f2,\u00f9,\u00e4,\u00eb,\u00ef,\u00f6,\u00fc,\u00ff,\u00e2,\u00ea,\u00ee,\u00f4,\u00fb,\u00e5,e,i,\u00f8,u,\u0105,\u0144,\u0142,\u017a,\u0119,\u00c0,\u00c1,\u00c2,\u00c3,\u00c4,\u00c7,\u00c8,\u00c9,\u00ca,\u00cb,\u00cc,\u00cd,\u00ce,\u00cf,\u00d1,\u00d2,\u00d3,\u00d4,\u00d5,\u00d6,\u00d9,\u00da,\u00db,\u00dc,\u00dd,\u0141,\u015a\");\n    $replace = explode(\",\",\"c,ae,oe,a,e,i,o,u,a,e,i,o,u,a,e,i,o,u,y,a,e,i,o,u,a,e,i,o,u,a,n,l,z,e,A,A,A,A,A,C,E,E,E,E,I,I,I,I,N,O,O,O,O,O,U,U,U,U,Y,L,S\");\n    foreach ( $search as $i => $s )\n      $st = \\mb_ereg_replace($s, $replace[$i], $st);\n    return $st;\n  }",
            "startLine": 1017,
            "endLine": 1025,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "check_name": {
            "name": "check_name",
            "summary": "Checks if a string complies with SQL naming convention.",
            "description": "*\n```php\nx::dump(\\bbn\\Str::checkName(\"Paul\"));\n\/\/ (bool) true\nx::dump(\\bbn\\Str::checkName(\"Pa\u00a0ul\"));\n\/\/ (bool) false\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::checkName(\"Paul\"));\n\/\/ (bool) true\nx::dump(\\bbn\\Str::checkName(\"Pa\u00a0ul\"));\n\/\/ (bool) false"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $args = \\func_get_args();\n    \/\/ Each argument must be a string starting with a letter, and having only one character made of letters, numbers and underscores\n    foreach ($args as $a) {\n      if (\\is_array($a)) {\n        foreach ($a as $b) {\n          if (!self::checkName($b)) {\n            return false;\n          }\n        }\n      }\n      if (!\\is_string($a)) {\n        return false;\n      }\n      return \\preg_match('\/^[A-z]{1}[A-z0-9_]*$\/', $a);\n    }\n    return true;\n  }",
            "startLine": 1039,
            "endLine": 1057,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "check_filename": {
            "name": "check_filename",
            "summary": "Checks if a string doesn't contain a filesystem path.",
            "description": "*\n```php\nx::dump(\\bbn\\Str::checkFilename(\"Paul\"));\n\/\/ (bool) true\nx::dump(\\bbn\\Str::checkFilename(\"Paul\/\"));\n\/\/ (bool) false\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::checkFilename(\"Paul\"));\n\/\/ (bool) true\nx::dump(\\bbn\\Str::checkFilename(\"Paul\/\"));\n\/\/ (bool) false"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $args = \\func_get_args();\n    \/\/ Each argument must be a string starting with a letter, and having than one character made of letters, numbers and underscores\n    foreach ( $args as $a ){\n      if (($a === '..') || !\\is_string($a) || (strpos($a, '\/') !== false) || (strpos($a, '\\\\') !== false) ){\n        return false;\n      }\n    }\n    return true;\n  }",
            "startLine": 1071,
            "endLine": 1081,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "check_path": {
            "name": "check_path",
            "summary": "Checks if a string doesn't contain a filesystem path.",
            "description": "*\n```php\nx::dump(\\bbn\\Str::checkFilename(\"Paul\"));\n\/\/ (bool) true\nx::dump(\\bbn\\Str::checkFilename(\"Paul\/\"));\n\/\/ (bool) false\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::checkFilename(\"Paul\"));\n\/\/ (bool) true\nx::dump(\\bbn\\Str::checkFilename(\"Paul\/\"));\n\/\/ (bool) false"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ( $args = \\func_get_args() ){\n      \/\/ Each argument must be a string starting with a letter, and having than one character made of letters, numbers and underscores\n      foreach ( $args as $a ){\n        $bits = X::split($a, DIRECTORY_SEPARATOR);\n        foreach ( $bits as $b ){\n          if ( !self::checkFilename($b) ){\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }",
            "startLine": 1095,
            "endLine": 1110,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "has_slash": {
            "name": "has_slash",
            "summary": "Checks if a string complies with SQL naming convention.",
            "description": "Returns \"true\" if slash or backslash are present.\n   *\n```php\nx::dump(\\bbn\\Str::hasSlash(\"Paul\"));\n\/\/ (bool) false\nx::dump(\\bbn\\Str::hasSlash(\"Paul\/\");\n\/\/ (bool) 1\nx::dump(\\bbn\\Str::hasSlash(\"Paul\\\\\");\n\/\/ (bool) 1\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Returns &quot;true&quot; if slash or backslash are present.\n*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::hasSlash(\"Paul\"));\n\/\/ (bool) false\nx::dump(\\bbn\\Str::hasSlash(\"Paul\/\");\n\/\/ (bool) 1\nx::dump(\\bbn\\Str::hasSlash(\"Paul\\\\\");\n\/\/ (bool) 1"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n    $args = \\func_get_args();\n    \/\/ Each argument must be a string starting with a letter, and having than one character made of letters, numbers and underscores\n    foreach ( $args as $a ){\n      if ( (strpos($a, '\/') !== false) || (strpos($a, '\\\\') !== false) ){\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "startLine": 1128,
            "endLine": 1140,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "get_numbers": {
            "name": "get_numbers",
            "summary": "Extracts all digits from a string.",
            "description": "*\n```php\nx::dump(\\bbn\\Str::getNumbers(\"test 13 example 24\"));\n\/\/ (string) 1324\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump(\\bbn\\Str::getNumbers(\"test 13 example 24\"));\n\/\/ (string) 1324"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return preg_replace(\"\/[^0-9]\/\", '', self::cast($st));\n  }",
            "startLine": 1153,
            "endLine": 1156,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "make_readable": {
            "name": "make_readable",
            "summary": "Returns the argumented value, replacing not standard objects (not stdClass) by their class name.",
            "description": "*\n```php\n$myObj = new stdClass();\n$myObj->myProp1 = 23;\n$myObj->myProp2 = \"world\";\n$myObj->myProp3 = [1, 5, 6];\n   *\n$user = \\bbn\\User::getInstance();\n   *\n$myArray = [\n 'user' => $user,\n 'obj' => $myObj,\n 'val' => 23,\n 'text' => \"Hello!\"\n];\n   *\nx::hdump(\\bbn\\Str::makeReadable($user));\n\/\/ (string) \"appui\/user\"\n   *\nx::hdump(\\bbn\\Str::makeReadable($myArray));\n\/* (array)\n[\n  \"user\" => \"appui\\\\user\",\n  \"obj\" => [\n            \"myProp1\" => 23,\n            \"myProp2\" => \"world\",\n            \"myProp3\" => [1, 5, 6,],\n      ],\n  \"val\" => 23,\n  \"text\" => \"Hello!\",\n]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "$myObj = new stdClass();\n$myObj->myProp1 = 23;\n$myObj->myProp2 = \"world\";\n$myObj->myProp3 = [1, 5, 6];\n   *\n$user = \\bbn\\User::getInstance();\n   *\n$myArray = [\n 'user' => $user,\n 'obj' => $myObj,\n 'val' => 23,\n 'text' => \"Hello!\"\n];\n   *\nx::hdump(\\bbn\\Str::makeReadable($user));\n\/\/ (string) \"appui\/user\"\n   *\nx::hdump(\\bbn\\Str::makeReadable($myArray));\n\/* (array)\n[\n  \"user\" => \"appui\\\\user\",\n  \"obj\" => [\n            \"myProp1\" => 23,\n            \"myProp2\" => \"world\",\n            \"myProp3\" => [1, 5, 6,],\n      ],\n  \"val\" => 23,\n  \"text\" => \"Hello!\",\n]"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($o)\n  {\n    $is_array = false;\n    if ( \\is_object($o) ){\n      $class = \\get_class($o);\n      if ( $class === 'stdClass' ){\n        $is_array = 1;\n      }\n      else{\n        return $class;\n      }\n    }\n    if ( \\is_array($o) || $is_array ){\n      $r = [];\n      foreach ( $o as $k => $v ){\n        $r[$k] = self::makeReadable($v);\n      }\n      return $r;\n    }\n    return $o;\n  }",
            "startLine": 1196,
            "endLine": 1216,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "o",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "export": {
            "name": "export",
            "summary": "Returns a variable in a mode that is directly usable by PHP.",
            "description": "*\n```php\n$myObj = new stdClass();\n$myObj->myProp1 = 23;\n$myObj->myProp2 = \"world\";\n$myObj->myProp3 = [1, 5, 6];\n$myObj->myProp4 =\"\";\n   *\nx::hdump(\\bbn\\Str::export($myObj,true));\n\/*(string)\n\"{\n     \"myProp1\"  =>  23,\n     \"myProp2\"  =>  \"world\",\n     \"myProp3\"  =>  [ 1, 5, 6, ],\n}\"\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "$myObj = new stdClass();\n$myObj->myProp1 = 23;\n$myObj->myProp2 = \"world\";\n$myObj->myProp3 = [1, 5, 6];\n$myObj->myProp4 =\"\";\n   *\nx::hdump(\\bbn\\Str::export($myObj,true));\n\/*(string)\n\"{\n     \"myProp1\"  =>  23,\n     \"myProp2\"  =>  \"world\",\n     \"myProp3\"  =>  [ 1, 5, 6, ],\n}\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($o, $remove_empty = false, $lev = 1)\n  {\n    $st = '';\n    $space = '    ';\n    if ( \\is_object($o) && ($cls = \\get_class($o)) && (strpos($cls, 'stdClass') === false) ){\n      $st .= \"Object \".$cls;\n      \/*\n      $o = array_filter((array)$o, function($k) use ($cls){\n        if ( strpos($k, '*') === 0 ){\n          return false;\n        }\n        if ( strpos($k, $cls) === 0 ){\n          return false;\n        }\n        return true;\n      }, ARRAY_FILTER_USE_KEY);\n      *\/\n    }\n    else if ( \\is_object($o) || \\is_array($o) ){\n      $is_object = \\is_object($o);\n      $is_array = !$is_object && \\is_array($o);\n      $is_assoc = $is_object || ($is_array && X::isAssoc($o));\n      $st .= $is_assoc ? '{' : '[';\n      $st .= PHP_EOL;\n      foreach ( $o as $k => $v ){\n        if ( $remove_empty && ( ( \\is_string($v) && empty($v) ) || ( \\is_array($v) && \\count($v) === 0 ) ) ){\n          continue;\n        }\n        $st .= str_repeat($space, $lev);\n        if ( $is_assoc ){\n          $st .= ( \\is_string($k) ? '\"'.self::escapeDquote($k).'\"' : $k ). ': ';\n        }\n        if ( \\is_array($v) ){\n          $st .= self::export($v, $remove_empty, $lev+1);\n        }\n        else if ( $v === 0 ){\n          $st .= '0';\n        }\n        else if ( null === $v ){\n          $st .= 'null';\n        }\n        else if ( \\is_bool($v) ){\n          $st .= $v === false ? 'false' : 'true';\n        }\n        else if ( \\is_int($v) || \\is_float($v) ){\n          $st .= $v;\n        }\n        else if ( is_string($v) ){\n          if ( !ctype_print($v) && (\\strlen($v) === 16) ){\n            $st .= '0x'.bin2hex($v);\n          }\n          else if ( !$remove_empty || !empty($v) ){\n            $st .= '\"'.self::escapeDquote($v).'\"';\n          }\n        }\n        else {\n          try{\n            $cls = get_class($v);\n          }\n          catch ( \\Exception $e ){\n            $st .= '\"Unknown\"';\n          }\n          if ( $cls ){\n            if ( $cls === 'stdClass' ){\n              $st .= self::export($v, $remove_empty, $lev+1);\n            }\n            else{\n              $st .= 'Object '.$cls;\n            }\n          }\n        }\n        $st .= ','.PHP_EOL;\n      }\n      $st .= str_repeat($space, $lev-1);\n      $st .= $is_assoc ? '}' : ']';\n      \/\/$st .= \\is_object($o) ? '}' : ']';\n    }\n    return $st;\n  }",
            "startLine": 1242,
            "endLine": 1320,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "o",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "empty Default: \"false\"."
                },
                {
                    "name": "remove_empty",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "Default: \"1\"."
                },
                {
                    "name": "lev",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": ""
                }
            ]
        },
        "replace_once": {
            "name": "replace_once",
            "summary": "Replaces part of a string. If the part is not found, the method returns the string without change.",
            "description": "*\n```php\nx::hdump(\\bbn\\Str::replaceOnce(\"cold\",\"hot\", \"Today there is cold\"));\n\/\/ (string)  \"Today there is hot\"\nx::hdump(\\bbn\\Str::replaceOnce(\"rain\",\"hot\", \"Today there is cold\"));\n\/\/ (string)  \"Today there is cold\"\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::hdump(\\bbn\\Str::replaceOnce(\"cold\",\"hot\", \"Today there is cold\"));\n\/\/ (string)  \"Today there is hot\"\nx::hdump(\\bbn\\Str::replaceOnce(\"rain\",\"hot\", \"Today there is cold\"));\n\/\/ (string)  \"Today there is cold\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($search, $replace, $subject)\n  {\n    $pos = strpos($subject, $search);\n    if ($pos !== false){\n      return substr_replace($subject, $replace, $pos, \\strlen($search));\n    }\n    return $subject;\n  }",
            "startLine": 1337,
            "endLine": 1344,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "search",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to replace"
                },
                {
                    "name": "replace",
                    "position": 1,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string into search"
                },
                {
                    "name": "subject",
                    "position": 2,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "remove_comments": {
            "name": "remove_comments",
            "summary": "Removes the comments.",
            "description": "*\n```php\n var_dump(\\bbn\\Str::removeComments(\"<!--this is a comment-->\"));\n \/\/ (string) \"\"\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "var_dump(\\bbn\\Str::removeComments(\"<!--this is a comment-->\"));\n \/\/ (string) \"\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    $pattern = '\/(?:(?:\\\/\\*(?:[^*]|(?:\\*+[^*\\\/]))*\\*+\\\/)|(?:(?<!\\:|\\\\\\|\\')\\\/\\\/.*))\/';\n    return preg_replace($pattern, '', $st);\n  }",
            "startLine": 1357,
            "endLine": 1361,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "say_size": {
            "name": "say_size",
            "summary": "Converts the bytes to another unit form.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($bytes, $unit = 'B', $stop = false)\n  {\n\/\/ pretty printer for byte values\n\/\/\n    $i = 0;\n    $units = ['', 'K', 'M', 'G', 'T'];\n    while ( $stop || ($bytes > 2000) ){\n      $i++;\n      $bytes \/= 1024;\n      if ( $stop === $units[$i] ){\n        break;\n      }\n    }\n    $st = $unit === 'B' ? \"%d %s\" : \"%5.2f %s\";\n    return sprintf($st.$unit, $bytes, $units[$i]);\n  }",
            "startLine": 1371,
            "endLine": 1386,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "bytes",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The unit you want to convert ('B', 'K', 'M', 'G', 'T')"
                },
                {
                    "name": "unit",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "B",
                    "default_name": ""
                },
                {
                    "name": "stop",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "convert_size": {
            "name": "convert_size",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($size, $unit_orig = 'B', $unit_dest = 'MB')\n  {\n    if ( strlen($unit_orig) <= 1 ){\n      $unit_orig .= 'B';\n    }\n    if ( strlen($unit_dest) <= 1 ){\n      $unit_dest .= 'B';\n    }\n    $base = log($size) \/ log(1024);\n    $suffix = array(\"\", \"KB\", \"MB\", \"GB\", \"TB\");\n    $f_base = floor($base);\n    return round(pow(1024, $base - floor($base)), 1) . $suffix[$f_base];\n  }",
            "startLine": 1394,
            "endLine": 1406,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "size",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "unit_orig",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "B",
                    "default_name": "",
                    "description": "orig"
                },
                {
                    "name": "unit_dest",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "MB",
                    "default_name": "",
                    "description": "dest"
                }
            ]
        },
        "check_json": {
            "name": "check_json",
            "summary": "Checks whether a JSON string is valid or not. If $return_error is set to true, the error will be returned.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($json, $return_error = false)\n  {\n    json_decode($json);\n    $error = json_last_error();\n    if ( $error === JSON_ERROR_NONE ){\n      return true;\n    }\n    if ( !$return_error ){\n      return false;\n    }\n    switch ( $error ) {\n      case JSON_ERROR_DEPTH:\n        return _('Maximum stack depth exceeded');\n      case JSON_ERROR_STATE_MISMATCH:\n        return _('State mismatch (invalid or malformed JSON)');\n      case JSON_ERROR_CTRL_CHAR:\n        return _('Unexpected control character found');\n      case JSON_ERROR_SYNTAX:\n        return _('Syntax error, malformed JSON');\n      case JSON_ERROR_UTF8:\n        return _('Malformed UTF-8 characters, possibly incorrectly encoded');\n      default:\n        return _('Unknown error');\n    }\n  }",
            "startLine": 1415,
            "endLine": 1439,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "json",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "error"
                },
                {
                    "name": "return_error",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "as_var": {
            "name": "as_var",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($var, $quote = '\"')\n  {\n    if (($quote !== \"'\") && ($quote !== '\"')) {\n      $quote = '\"';\n    }\n    $st = $quote === \"'\" ? self::escapeSquotes($var) : self::escapeDquotes($var);\n    return $quote.$st.$quote;\n  }",
            "startLine": 1441,
            "endLine": 1448,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "var",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "quote",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "\"",
                    "default_name": ""
                }
            ]
        },
        "markdown2html": {
            "name": "markdown2html",
            "summary": "Transforms a markdown string into HTML.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st, $single_line = false)\n  {\n    if (!self::$_markdownParser) {\n      self::$_markdownParser = new \\Parsedown();\n    }\n    return $single_line ? self::$_markdownParser->line($st) : self::$_markdownParser->text($st);\n  }",
            "startLine": 1457,
            "endLine": 1463,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "line If true the result will not contain paragraph or block element"
                },
                {
                    "name": "single_line",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": {
        "_markdownParser": {}
    },
    "constants": null,
    "numMethods": 48,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 1,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "_markdownParser": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn",
    "shortName": "str",
    "summary": "Class text",
    "description": "String manipulation class\n *\nThis class only uses static methods and has lots of alias for the escaping methods",
    "description_parts": [
        {
            "type": "text",
            "content": "<p>String manipulation class\n*\nThis class only uses static methods and has lots of alias for the escaping methods<\/p>"
        }
    ]
}