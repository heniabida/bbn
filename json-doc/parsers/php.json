{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\parsers\\php",
    "namespace": true,
    "traits": [],
    "interfaces": [],
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/parsers\/php.php",
    "startLine": 6,
    "endLine": 839,
    "contentConstructor": {
        "file": "bbn\\parsers\\php",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Construct function",
            "description": "",
            "description_parts": [],
            "file": "bbn\\parsers\\php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->docParser = \\phpDocumentor\\Reflection\\DocBlockFactory::createInstance();\n    $this->parser = new \\bbn\\parsers\\doc('', 'php');\n  }",
            "startLine": 11,
            "doc": {
                "description": "Construct function",
                "tags": []
            },
            "endLine": 15,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "analyzeMethod": {
            "name": "analyzeMethod",
            "summary": "Function to take all the information related to the method sought and if it also contains the method of its relative",
            "description": "",
            "description_parts": [],
            "file": "bbn\\parsers\\php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($meth, ReflectionClass $cls)\n  {\n    $arr = null;\n    if ( !empty($meth) &&\n      !empty($cls) &&\n      $cls->hasMethod($meth)\n    ){\n      $f  = &$this;\n\n      \/\/get method in current class\n      $arr = $this->_get_method_info($cls->getMethod($meth));\n\n      \/\/get method in parent class\n      $parent = $cls->getParentClass();\n\n      while( $parent ){\n        if ( $parent->hasMethod($meth) ){\n          $arr['parent'] = $this->_get_method_info($parent->getMethod($meth));\n        }\n        $parent = $parent->getParentClass();\n      }\n    }\n    return $arr ?: null;\n  }",
            "startLine": 24,
            "doc": {
                "description": "Function to take all the information related to the method sought and if it also contains the method of its relative",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$meth",
                        "description": "Name of the method to search for to take information"
                    },
                    {
                        "tag": "param",
                        "type": "\\ReflectionClass",
                        "name": "$cls"
                    }
                ],
                "return": ""
            },
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "meth",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Name of the method to search for to take information"
                },
                {
                    "name": "cls",
                    "position": 1,
                    "type": "ReflectionClass",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "analyzeProperty": {
            "name": "analyzeProperty",
            "summary": "Function to take all the information relating to the property sought and if it also contains that of his relative",
            "description": "",
            "description_parts": [],
            "file": "bbn\\parsers\\php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($prop, ReflectionClass $cls)\n  {\n    if ($arr = $this->_get_property_info($prop, $cls)) {\n      $parent = $cls->getParentClass();\n      while( $parent ){\n        if ($arr_parent = $this->_get_property_info($prop, $parent)) {\n          $arr['parent'] = $arr_parent;\n          break;\n        }\n        $parent = $parent->getParentClass();\n      }\n    }\n    return $arr ?: null;\n  }",
            "startLine": 56,
            "doc": {
                "description": "Function to take all the information relating to the property sought and if it also contains that of his relative",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$prop",
                        "description": "Name of the property to be searched"
                    },
                    {
                        "tag": "param",
                        "type": "\\ReflectionClass",
                        "name": "$cls"
                    }
                ],
                "return": ""
            },
            "endLine": 69,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "prop",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Name of the property to be searched"
                },
                {
                    "name": "cls",
                    "position": 1,
                    "type": "ReflectionClass",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "analyzeConstant": {
            "name": "analyzeConstant",
            "summary": "Function that analyzes the constant passed to him and even if it contains the relative parent of the class of belonging",
            "description": "",
            "description_parts": [],
            "file": "bbn\\parsers\\php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($const, ReflectionClass $cls)\n  {\n    if ( !empty($const) &&\n      !empty($cls) &&\n      $cls->hasConstant($const)\n    ){\n      $cst = $cls->getReflectionConstant($const);\n      $arr = [\n        'name' => $cst->name,\n        'value' => $cls->getConstant($const),\n        'class' => $cls->name,\n        'parent' => false,\n        'private' => $cst->isPrivate(),\n        'protected' => $cst->isProtected(),\n        'public' => $cst->isPublic(),\n        'doc' => $this->parsePropertyComments($cst->getDocComment()),\n      ];\n      $parent = $cls->getParentClass();\n      while( $parent ){\n        if ( $parent->hasConstant($const) ){\n          $cst = $cls->getReflectionConstant($const);\n          $arr['parent'] =  [\n            'name' => $cst->name,\n            'doc' =>  $this->parsePropertyComments($cst->getDocComment()),\n            'value' => $parent->getConstant($const),\n            'protected' => $cst->isProtected(),\n            'public' => $cst->isPublic(),\n            'class' => $parent->name,\n            'parent' => false\n          ];\n        }\n        $parent = $parent->getParentClass();\n      }\n    }\n\n    if ( isset($arr) ){\n      return $arr;\n    }\n    return null;\n  }",
            "startLine": 78,
            "doc": {
                "description": "Function that analyzes the constant passed to him and even if it contains the relative parent of the class of belonging",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$const",
                        "description": "Name of constant to search for information"
                    },
                    {
                        "tag": "param",
                        "type": "\\ReflectionClass",
                        "name": "$cls"
                    }
                ],
                "return": ""
            },
            "endLine": 117,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "const",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Name of constant to search for information"
                },
                {
                    "name": "cls",
                    "position": 1,
                    "type": "ReflectionClass",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "analyzeClass": {
            "name": "analyzeClass",
            "summary": "Function that analyzes the desired class by returning the information belonging to it",
            "description": "",
            "description_parts": [],
            "file": "bbn\\parsers\\php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($cls)\n  {\n    $rc = new \\ReflectionClass($cls);\n    \\bbn\\x::log([$cls], 'vito');\n    if ( !empty($cls) && is_object($rc) ){\n      $methods = $rc->getMethods(\\ReflectionMethod::IS_PUBLIC);\n      $props = $rc->getProperties(\\ReflectionMethod::IS_PUBLIC);\n      $statprops = $rc->getStaticProperties(\\ReflectionMethod::IS_PUBLIC);\n      $constants = $rc->getConstants(\\ReflectionMethod::IS_PUBLIC);\n      return [\n        'doc' =>  $this->parseClassComments($rc->getDocComment()),\n        'name' => $rc->getName(),\n        'namespace' => $rc->getNamespaceName(),\n        'traits' => $rc->getTraitNames(),\n        'interfaces' => $rc->getInterfaces(),\n        \/\/'isInstantiable' => $rc->isInstantiable(),\n        \/\/'cloneable' =>  $rc->isCloneable(),\n        'fileName' => $rc->getFileName(),\n        'startLine' => $rc->getStartLine(),\n        'endLine' => $rc->getEndLine(),\n        'contentConstructor' => !empty($rc->getConstructor()) ?\n          array_filter(\n            $this->analyzeMethod($rc->getConstructor()->name, $rc),\n            function($m, $i){\n              return in_array($i,['file', 'returns']);\n            }, ARRAY_FILTER_USE_BOTH)\n          : null,\n        'methods' => $methods ? $this->orderElement($methods, 'methods', $rc) : null,\n        'properties' => $props ? $this->orderElement($props, 'properties', $rc) : null,\n        'staticProperties' => $statprops,\n        'constants' =>  $constants ? $this->orderElement($constants, 'costants', $rc) : null,\n        'numMethods' => count($methods),\n        'numProperties' => count( $props),\n        'numConstants' => count($constants),\n        'numStaticProperties' => count($statprops),\n        'interfaces' =>  $rc->getInterfaces(),\n        'interfaceNames' =>  $rc->getInterfaceNames(),\n        'isInterface' =>  $rc->isInterface(),\n        'traitNames' => $rc->getTraitNames(),\n        'traitAliases' => $rc->getTraitAliases(),\n        'isTrait' => $rc->isTrait(),\n        'isAbstract' => $rc->isAbstract(),\n        'isFinal' => $rc->isFinal(),\n        'modifiers' => $rc->getModifiers(),\n        'parentClass' => $rc->getParentClass()->name,\n        'isSubclassOf' => $rc->isSubclassOf($cls),\n        'defaultProperties' => $rc->getDefaultProperties(),\n        'isIterable' => $rc->isIterable(),\n      \/\/'implementsInterface' => $rc->implementsInterface(),\n        'extensionName' => $rc->getExtensionName(),\n        'namespace' => $rc->inNamespace(),\n        'namespaceName' => $rc->getNamespaceName(),\n        'shortName' => $rc->getShortName()\n      ];\n    }\n  }",
            "startLine": 125,
            "doc": {
                "description": "Function that analyzes the desired class by returning the information belonging to it",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$cls"
                    }
                ],
                "return": ""
            },
            "endLine": 180,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cls",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "analyzeLibrary": {
            "name": "analyzeLibrary",
            "summary": "Function that analyzes the whole library with the same name space returning all the information of all the classes making part of it",
            "description": "",
            "description_parts": [],
            "file": "bbn\\parsers\\php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path, $namespace = '')\n  {\n    if ( !empty($path) &&\n      !empty($namespace)\n    ){\n      $fs = new \\bbn\\file\\system();\n      if ($fs->cd($path)) {\n        $files = $fs->scan('.', '.php', false);\n        $arr = [];\n        if ( is_array($files) && count($files) ){\n          foreach ( $files as $file ){\n            $bits = \\bbn\\x::split($file, '\/');\n            $name = basename(array_pop($bits), '.php');\n            $class = $namespace.'\\\\'.(empty($bits) ? '' : \\bbn\\x::join($bits, '\\\\').'\\\\').$name;\n            if (class_exists($class, true) || interface_exists($class, true) || trait_exists($class, true)) {\n              try {\n                $arr[$file] = $this->analyzeCLass($class);\n              }\n              catch (\\Exception $e) {\n                die(var_dump($file, $e));\n                if (isset($arr[$file])) {\n                  unset($arr[$file]);\n                }\n              }\n            }\n          }\n        }\n\n      }\n      return $arr;\n    }\n    return null;\n  }",
            "startLine": 189,
            "doc": {
                "description": "Function that analyzes the whole library with the same name space returning all the information of all the classes making part of it",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "of the library"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$namespace",
                        "description": "of the class"
                    }
                ],
                "return": ""
            },
            "endLine": 221,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "of the library"
                },
                {
                    "name": "namespace",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "of the class"
                }
            ]
        },
        "iparse": {
            "name": "iparse",
            "summary": "Generally analyzes a docBLock returning the information in a structured way",
            "description": "",
            "description_parts": [],
            "file": "bbn\\parsers\\php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($text)\n  {\n    if ( $text ){\n      $docblock = $this->docParser->create($text);\n      $res = [\n        'summary' => $docblock->getSummary(),\n        'tags' => [],\n        'description' => (string)$docblock->getDescription()\n      ];\n      $tags = $docblock->getTags();\n      \/\/ Contains \\phpDocumentor\\Reflection\\DocBlock\\Description object\n      $res['description_obj'] = $docblock->getDescription();\n      foreach ( $tags as $i => $t ){\n        $desc = $t->getDescription() ?: false;\n        $res['tags'][] = [\n          'index' => $i,\n          'type' => method_exists($t, 'getType') ? $t->getType() :null,\n          'varname' => method_exists($t, 'getVariableName') ? $t->getVariableName() :null,\n          'isVariadic' => method_exists($t, 'isVariadic') ? $t->isVariadic() :null,\n          'name' => $t->getName(),\n          'desc0' => (string)$desc,\n          'desc1' => $desc ? $t->getDescription()->getTags() : '',\n          'desc2' => $desc ? $t->getDescription()->render() : ''\n        ];\n      }\n      return $res;\n    }\n    return false;\n  }",
            "startLine": 229,
            "doc": {
                "description": "Generally analyzes a docBLock returning the information in a structured way",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$text"
                    }
                ],
                "return": ""
            },
            "endLine": 257,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "text",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "parse": {
            "name": "parse",
            "summary": "Function that analyzes the class by returning the information in detail",
            "description": "",
            "description_parts": [],
            "file": "bbn\\parsers\\php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($class_name)\n  {\n    $rc = new \\ReflectionClass($class_name);\n    \/\/die(var_dump($rc->hasConstant('PARAM_BOOL')));\n    $constants = $rc->getConstants();\n    $parent = $rc->getParentClass();\n    $parent_constants = [];\n    if ( $parent ){\n      $parent_constants = $parent->getConstants();\n    }\n    $cparser =& $this;\n    $cls = [\n      'doc' => [\n        'title' => $this->iparse($rc->getDocComment()),\n      ],\n      'name' => $rc->getName(),\n      'constants' => array_map(function($a)use($constants, $parent_constants){\n        return [\n          'name' => $a->name,\n          'value' => $constants[$a->name]\n        ];\n      }, array_filter($rc->getReflectionConstants(), function($a) use ($parent_constants, $constants){\n        return !array_key_exists($a->name, $parent_constants) || ($parent_constants[$a->name] !== $constants[$a->name]);\n      })),\n      'namespace' => $rc->getNamespaceName(),\n      'traits' => $rc->getTraits(),\n      'interfaces' => $rc->getInterfaces(),\n      'parent' => $parent ? $parent->getName() : null,\n      'properties' => array_map(function($m) use ($cparser){\n        \/\/$m->setAccessible(true);\n        return [\n          'name' => $m->getName(),\n          \/\/'value' => $m->getValue(),\n          'static' => $m->isStatic(),\n          'private' => $m->isPrivate(),\n          'protected' => $m->isProtected(),\n          'public' => $m->isPublic(),\n          'doc' => $cparser->iparse($m->getDocComment())\n        ];\n      }, $rc->getProperties()),\n      'methods' => array_map(function($m) use ($cparser){\n        $ret = null;\n        if ($m->hasReturnType()) {\n          $type = $m->getReturnType();\n          $ret = [(string)$type];\n          if ($type->allowsNull()) {\n            $ret[] = null;\n          }\n        }\n        return [\n          'name' => $m->getName(),\n          'static' => $m->isStatic(),\n          'private' => $m->isPrivate(),\n          'protected' => $m->isProtected(),\n          'public' => $m->isPublic(),\n          'final' => $m->isFinal(),\n          'code' => $this->_closureSource($m),\n          'doc' => $cparser->iparse($m->getDocComment()),\n          'returns' => $ret,\n          'arguments' => array_map(function($p)use($m){\n            return [\n              'name' => $p->getName(),\n              'position' => $p->getPosition(),\n              'type' => $p->getType(),\n              'required' => !$p->isOptional(),\n              'has_default' => $p->isDefaultValueAvailable(),\n              'default' => $p->isDefaultValueAvailable() ? $p->getDefaultValue() : '',\n              'default_name' => $p->isDefaultValueAvailable() && $p->isDefaultValueConstant() ?\n                $p->getDefaultValueConstantName() : ''\n            ];\n          }, $m->getParameters())\n        ];\n      }, $rc->getMethods())\n    ];\n\n    \/*\n    try {\n      $obj = $parser->parse($code);\n      $arr = json_decode(json_encode($obj), true);\n      foreach ( $arr[0]['stmts'] as $node ){\n        if ( $node['nodeType'] === 'Stmt_Class' ){\n          $res['class'] = $node['name']['name'];\n          $res['elements'] = [];\n          foreach ( $node['stmts'] as $stmts ){\n            if ( isset($stmts['attributes'], $stmts['attributes']['comments']) ){\n              foreach ( $stmts['attributes']['comments'] as $c ){\n                $docblock = $doc_parser->create($c['text']);\n\n                \/\/ Contains the summary for this DocBlock\n                $res['summary'] = $docblock->getSummary();\n\n                $tags = $docblock->getTags();\n                \/\/ Contains \\phpDocumentor\\Reflection\\DocBlock\\Description object\n                $res['description_obj'] = $docblock->getDescription();\n                foreach ( $tags as $i => $t ){\n                  \\bbn\\x::hdump($i, (string)$t->getType(), $t->getName);\n                  $desc = $t->getDescription()->render();\n                  var_dump($desc);\n                }\n                echo '<pre>';\n                var_dump($summary, $description, $tags);\n                echo '<\/pre>';\n              }\n            }\n          }\n          \\bbn\\x::hdump(\"HEY??\", count($node['stmts']));\n        }\n      }\n      \\bbn\\x::hdump(count($arr[0]['stmts']));\n      \\bbn\\x::hdump($arr[0]['stmts']);\n    }\n    catch (PhpParser\\Error $e) {\n        echo 'Parse Error: ', $e->getMessage();\n    }\n    *\/\n    return $cls;\n  }",
            "startLine": 265,
            "doc": {
                "description": "Function that analyzes the class by returning the information in detail",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$class",
                        "description": "name"
                    }
                ],
                "return": ""
            },
            "endLine": 381,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "class_name",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "name"
                }
            ]
        },
        "analyze": {
            "name": "analyze",
            "summary": "Function that analyzes the class by returning the non-detailed information",
            "description": "",
            "description_parts": [],
            "file": "bbn\\parsers\\php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($class, $type = false)\n  {\n    $ok = true;\n    try {\n      $ref = new \\ReflectionClass($class);\n    }\n    catch ( \\Exception $e ){\n      $this->log($e->getMessage());\n      $ok = false;\n    }\n\n    if ( $ok ){\n      $fs = new bbn\\file\\system();\n      $tmp = $ref->getFileName();\n      $file = $tmp && $fs->is_file($tmp) ? $tmp : null;\n      $arr = [\n        'name' => $class,\n        'file' => $file,\n        'parents' => [],\n        'isAnonymous' => $ref->isAnonymous(),\n        'isCloneable' => $ref->isCloneable(),\n        'isFinal' => $ref->isFinal(),\n        'isInstantiable' => $ref->isInstantiable(),\n        'isInternal' => $ref->isInternal(),\n        'isIterateable' => $ref->isIterateable(),\n        'isUserDefined' => $ref->isUserDefined(),\n        'methods' => $this->addMethods($ref, $type, $file),\n        'properties' => [],\n        'traits' => [],\n        'unused' => []\n      ];\n\n      $props = $ref->getProperties();\n      if ( !empty($props) ){\n        foreach($props as $prop){\n          $type_prop = false;\n          if ( $prop->isPublic() ){\n            $type_prop = 'public';\n          }\n          else if ( $prop->isPrivate() ){\n            $type_prop = 'private';\n          }\n          else if ($prop->isProtected() ){\n            $type_prop = 'protected';\n          }\n          else if( $prop->isStatic() ){\n            $type_prop = 'static';\n          }\n\n          if ( !empty($type_prop) ){\n            $arr['properties'][$type_prop][]= $prop->getName();\n          }\n        }\n      }\n      \/\/for parents\n      $parents = $ref->getParentClass();\n      if ( !empty($parents) ){\n        foreach ($parents as $parent){\n          $arr['parents'][$parent] = $this->analyze($parent, 'parent');\n\n          foreach ( $arr['parents'][$parent]['methods'] as $i => $m ){\n            if ( count($m) ){\n              $arr['methods'][$i] = array_merge($m, $arr['methods'][$i]);\n            }\n          }\n        }\n      }\n\n      \/\/for traits\n      $traits = $ref->getTraitNames();\n      if ( !empty($traits) ){\n        foreach ($traits as $trait){\n          $arr['traits'][$trait] = $this->analyze($trait, 'trait');\n\n          foreach ( $arr['traits'][$trait]['methods'] as $i => $m ){\n            if ( count($m) ){\n              $arr['methods'][$i] = array_merge($arr['methods'][$i], $m);\n            }\n          }\n        }\n      }\n\n      if ( !empty($arr['methods']['private']) ){\n        foreach ( $arr['methods']['private'] as $name => $priv ){\n          $str = ($priv['static'] ? '::' : '->').$name;\n          if ( \\bbn\\x::indexOf($fs->get_contents($arr['file']), $str) === -1 ){\n            $arr['unused'][] = $arr['name'].'::'.$priv['name'];\n          }\n        }\n      }\n      return $arr;\n    }\n    return null;\n  }",
            "startLine": 390,
            "doc": {
                "description": "Function that analyzes the class by returning the non-detailed information",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$class"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$type"
                    }
                ],
                "return": ""
            },
            "endLine": 483,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "class",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "addMethods": {
            "name": "addMethods",
            "summary": "This function returns all the information of the methods cataloged by type",
            "description": "",
            "description_parts": [],
            "file": "bbn\\parsers\\php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($class_object, $origin = false, $file = NULL)\n  {\n\n    $methods = [\n      'private' => [],\n      'protected' => [],\n      'public' => []\n    ];\n\n    foreach ( $class_object->getMethods() as $m ){\n      $idx = 'public';\n      if ( $m->isPrivate() ){\n        $idx = 'private';\n      }\n      else if ( $m->isProtected() ){\n        $idx = 'protected';\n      }\n\n      if ( $m->getDeclaringClass()->getName() === $class_object->getName() ){\n        $doc = is_null($file) ? false :  $m->getDocComment();\n        $ret = null;\n        if ($m->hasReTurnType()) {\n          $type = $m->getReturnType();\n          $ret = [(string)$type];\n          if ($type->allowsNull()) {\n            $ret[] = null;\n          }\n        }\n\n        $methods[$idx][$m->getName()] = [\n          'static' => $m->isStatic(),\/\/ ? 'static' : 'non-static',\n          'returns' => $ret,\n          'doc' =>  is_null($file) ? false : $doc,\n          'parsed' => is_null($file) ? false : $this->parser->parse_docblock($doc),\n          'line' => is_null($file) ? false : $m->getStartLine(),\n          'type' => $origin !== false ? $origin : 'origin',\n          'file' => $m->getDeclaringClass()->getName()\n        ];\n\n      }\n    }\n\n    if ( $origin === 'parent' ){\n      unset($methods['private']);\n    }\n    return $methods;\n  }",
            "startLine": 493,
            "doc": {
                "description": "This function returns all the information of the methods cataloged by type",
                "params": [
                    {
                        "tag": "param",
                        "type": "object",
                        "name": "$class",
                        "description": "object"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$origin"
                    },
                    {
                        "tag": "param",
                        "type": "$file"
                    }
                ],
                "return": ""
            },
            "endLine": 539,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "class_object",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "object"
                },
                {
                    "name": "origin",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "file",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
            "startLine": 45,
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).",
                "params": [],
                "return": ""
            },
            "endLine": 50,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                "startLine": 45,
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).",
                    "params": [],
                    "return": ""
                },
                "endLine": 50,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
            "startLine": 56,
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).",
                "params": [],
                "return": ""
            },
            "endLine": 61,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                "startLine": 56,
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).",
                    "params": [],
                    "return": ""
                },
                "endLine": 61,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "get_error": {
            "name": "get_error",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 72,
            "doc": null,
            "endLine": 74,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "get_error",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n  }",
                "startLine": 72,
                "doc": null,
                "endLine": 74,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "get_errors": {
            "name": "get_errors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 76,
            "doc": null,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "get_errors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n  }",
                "startLine": 76,
                "doc": null,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\t\t\t$ar = \\func_get_args();\n\t\t\t$cn = bbn\\str::encode_filename(str_replace('\\\\', '_', \\get_class($this)));\n\t\t\tforeach ( $ar as $a ){\n\t\t\t\tbbn\\x::log($a, $cn);\n\t\t\t}\n\t\t}\n  }",
            "startLine": 80,
            "doc": null,
            "endLine": 88,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\t\t\t$ar = \\func_get_args();\n\t\t\t$cn = bbn\\str::encode_filename(str_replace('\\\\', '_', \\get_class($this)));\n\t\t\tforeach ( $ar as $a ){\n\t\t\t\tbbn\\x::log($a, $cn);\n\t\t\t}\n\t\t}\n  }",
                "startLine": 80,
                "doc": null,
                "endLine": 88,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $this->log([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]);\n    die(var_dump([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]));\n  }",
            "startLine": 95,
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$arguments"
                    }
                ],
                "return": ""
            },
            "endLine": 99,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $this->log([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]);\n    die(var_dump([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]));\n  }",
                "startLine": 95,
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$name"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$arguments"
                        }
                    ],
                    "return": ""
                },
                "endLine": 99,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "is_debug": {
            "name": "is_debug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 104,
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "is_debug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n  }",
                "startLine": 104,
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "endLine": 106,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "set_debug": {
            "name": "set_debug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($debug)\n  {\n  }",
            "startLine": 112,
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "endLine": 114,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "set_debug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($debug)\n  {\n  }",
                "startLine": 112,
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "endLine": 114,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": null,
    "constants": null,
    "numMethods": 18,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 0,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\models\\cls\\basic",
    "isSubclassOf": false,
    "defaultProperties": {
        "errors": [],
        "error": false,
        "debug": false,
        "log": []
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\parsers",
    "shortName": "php"
}