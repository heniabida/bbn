{
    "doc": {
        "description": "Half ORM half DB management, the simplest class for data queries.\n\nHello world!",
        "tags": {
            "author": "Thomas Nabet <thomas.nabet@gmail.com>",
            "copyright": "BBN Solutions",
            "since": "Apr 4, 2011, 23:23:55 +0000",
            "category": "Database",
            "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT",
            "version": "3.1",
            "todo": "Check for the tables and column names legality in _treat_arguments"
        }
    },
    "name": "bbn\\db",
    "namespace": true,
    "traits": [
        "bbn\\models\\tts\\cache",
        "bbn\\models\\tts\\retriever"
    ],
    "interfaces": {
        "bbn\\db\\actions": {
            "name": "bbn\\db\\actions"
        },
        "bbn\\db\\api": {
            "name": "bbn\\db\\api"
        },
        "bbn\\db\\engines": {
            "name": "bbn\\db\\engines"
        }
    },
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/db.php",
    "startLine": 21,
    "endLine": 4915,
    "contentConstructor": {
        "file": "bbn\\db",
        "returns": null
    },
    "methods": {
        "is_aggregate_function": {
            "name": "is_aggregate_function",
            "summary": "Returns true if the column name is an aggregate function",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($f)\n  {\n    $cls = '\\\\bbn\\\\db\\\\languages\\\\'.$this->engine;\n    return $cls::is_aggregate_function($f);\n  }",
            "startLine": 237,
            "doc": {
                "description": "Returns true if the column name is an aggregate function",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$f",
                        "description": "The string to check"
                    }
                ],
                "return": ""
            },
            "endLine": 241,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "f",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to check"
                }
            ]
        },
        "__toString": {
            "name": "__toString",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return \"Connection {$this->engine} to {$this->host}\";\n  }",
            "startLine": 243,
            "doc": null,
            "endLine": 246,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "get_log_line": {
            "name": "get_log_line",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($text = '')\n  {\n      $text = ' '.$text.' ';\n    }\n    $tot = \\strlen(self::$line) - \\strlen($text);\n    $char = \\substr(self::$line, 0, 1);\n    return \\str_repeat($char, floor($tot\/2)).$text.\\str_repeat($char, ceil($tot\/2));\n  }",
            "startLine": 248,
            "doc": null,
            "endLine": 255,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "text",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_query_values": {
            "name": "get_query_values",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $res = [];\n    if ( !empty($cfg['values']) ) {\n      foreach ( $cfg['values'] as $i => $v ) {\n        \/\/ Transforming the values if needed\n        if (\n          ($cfg['values_desc'][$i]['type'] === 'binary') &&\n          ($cfg['values_desc'][$i]['maxlength'] === 16) &&\n          str::is_uid($v)\n        ){\n          $res[] = hex2bin($v);\n        }\n        else if (\n          \\is_string($v) && (\n            (\n              ($cfg['values_desc'][$i]['type'] === 'date') &&\n              (\\strlen($v) < 10)\n            ) || (\n              ($cfg['values_desc'][$i]['type'] === 'time') &&\n              (\\strlen($v) < 8)\n            ) || (\n              ($cfg['values_desc'][$i]['type'] === 'datetime') &&\n              (\\strlen($v) < 19)\n            )\n          )\n        ){\n          $res[] = $v.'%';\n        }\n        else if ( !empty($cfg['values_desc'][$i]['operator']) ){\n          switch ( $cfg['values_desc'][$i]['operator'] ){\n            case 'contains':\n            case 'doesnotcontain':\n              $res[] = '%'.$v.'%';\n              break;\n            case 'startswith':\n              $res[] = $v.'%';\n              break;\n            case 'endswith':\n              $res[] = '%'.$v;\n              break;\n            default:\n              $res[] = $v;\n          }\n        }\n        else{\n          $res[] = $v;\n        }\n      }\n    }\n    return $res;\n  }",
            "startLine": 523,
            "doc": null,
            "endLine": 574,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "__construct": {
            "name": "__construct",
            "summary": "Constructor",
            "description": "```php\n$dbtest = new bbn\\db(['db_user' => 'test','db_engine' => 'mysql','db_host' => 'host','db_pass' => 't6pZDwRdfp4IM']);\n \/\/ (void)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$dbtest = new bbn\\db(['db_user' => 'test','db_engine' => 'mysql','db_host' => 'host','db_pass' => 't6pZDwRdfp4IM']);\n \/\/ (void)"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg = [])\n  {\n    if ( \\defined('BBN_DB_ENGINE') && !isset($cfg['engine']) ){\n      $cfg['engine'] = BBN_DB_ENGINE;\n    }\n    if ( isset($cfg['engine']) ){\n      $cls = '\\\\bbn\\\\db\\\\languages\\\\'.$cfg['engine'];\n      if ( !class_exists($cls) ){\n        die(\"Sorry the engine class $cfg[engine] does not exist\");\n      }\n      self::retriever_init($this);\n      $this->cache_init();\n      $this->language = new $cls($this);\n      if ( isset($cfg['on_error']) ){\n        $this->on_error = $cfg['on_error'];\n      }\n      if ($cfg = $this->get_connection($cfg)) {\n        $this->qte = $this->language->qte;\n        try{\n          parent::__construct(...($cfg['args'] ?: []));\n          $this->language->post_creation();\n          $this->current = $cfg['db'] ?? null;\n          $this->engine = $cfg['engine'];\n          $this->host = $cfg['host'] ?? '127.0.0.1';\n          $this->username = $cfg['user'] ?? null;\n          $this->hash = $this->_make_hash($cfg['args']);\n          $this->setAttribute(\\PDO::ATTR_ERRMODE, \\PDO::ERRMODE_EXCEPTION);\n          if ( !empty($cfg['cache_length']) ){\n            $this->cache_renewal = (int)$cfg['cache_length'];\n          }\n          $this->start_fancy_stuff();\n        }\n        catch ( \\PDOException $e ){\n          $this->log([\"Impossible to create the connection for $cfg[engine]\/$cfg[db]\", $e]);\n          die(\\defined('BBN_IS_DEV') && BBN_IS_DEV ? x::get_dump($e) : 'Impossible to create the database connection');\n        }\n      }\n    }\n    if ( !$this->engine ){\n      $this->log(\"Impossible to create the connection for $cfg[engine]\/$cfg[db]\");\n      die('Impossible to create the database connection');\n    }\n  }",
            "startLine": 1013,
            "doc": {
                "description": "Constructor\n\n```php\n$dbtest = new bbn\\db(['db_user' => 'test','db_engine' => 'mysql','db_host' => 'host','db_pass' => 't6pZDwRdfp4IM']);\n \/\/ (void)\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "null|array",
                        "name": "$cfg",
                        "description": "Mandatory db_user db_engine db_host db_pass"
                    }
                ],
                "return": ""
            },
            "endLine": 1055,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "__construct",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "doc": null,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "dsn",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "username",
                        "position": 1,
                        "type": "",
                        "required": false,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "passwd",
                        "position": 2,
                        "type": "",
                        "required": false,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "options",
                        "position": 3,
                        "type": "",
                        "required": false,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Mandatory db_user db_engine db_host db_pass"
                }
            ]
        },
        "get_hash": {
            "name": "get_hash",
            "summary": "Gets the last hash created.",
            "description": "```php\n\\bbn\\x::dump($db->get_hash());\n\/\/ (string) 3819056v431b210daf45f9b5dc2\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->get_hash());\n\/\/ (string) 3819056v431b210daf45f9b5dc2"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->hash;\n  }",
            "startLine": 1076,
            "doc": {
                "description": "Gets the last hash created.\n\n```php\n\\bbn\\x::dump($db->get_hash());\n\/\/ (string) 3819056v431b210daf45f9b5dc2\n```",
                "params": [],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "chiedere e thomas se deve diventare private e se va bene la descrizione"
                }
            },
            "endLine": 1079,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "replace_table_in_conditions": {
            "name": "replace_table_in_conditions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $conditions, $old_name, $new_name)\n  {\n    return \\bbn\\x::map(function($a)use($old_name, $new_name){\n      if ( !empty($a['field']) ){\n        $a['field'] = preg_replace(\"\/(\\\\W|^)$old_name([\\\\`\\\\']*\\\\s*)\\\\.\/\", '$1'.$new_name.'$2.', $a['field']);\n      }\n      if ( !empty($a['exp']) ){\n        $a['exp'] = preg_replace(\"\/(\\\\W|^)$old_name([\\\\`\\\\']*\\\\s*)\\\\.\/\", '$1'.$new_name.'$2.', $a['exp']);\n      }\n      return $a;\n    }, $conditions, 'conditions');\n  }",
            "startLine": 1081,
            "doc": null,
            "endLine": 1092,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "conditions",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "old_name",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "new_name",
                    "position": 2,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "retrieve_query": {
            "name": "retrieve_query",
            "summary": "Retrieves a query array based on its hash.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($hash)\n  {\n    if ( isset($this->queries[$hash]) ){\n      if ( \\is_string($this->queries[$hash]) ){\n        $hash = $this->queries[$hash];\n      }\n      return $this->queries[$hash];\n    }\n    return null;\n  }",
            "startLine": 1099,
            "doc": {
                "description": "Retrieves a query array based on its hash.",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$hash"
                    }
                ],
                "return": ""
            },
            "endLine": 1108,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "hash",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "retrieve_cfg": {
            "name": "retrieve_cfg",
            "summary": "Retrieves a configuration array based on its hash.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($hash)\n  {\n    return $this->cfgs[$hash] ?? null;\n  }",
            "startLine": 1115,
            "doc": {
                "description": "Retrieves a configuration array based on its hash.",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$hash"
                    }
                ],
                "return": ""
            },
            "endLine": 1118,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "hash",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "treat_conditions": {
            "name": "treat_conditions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $where, $full = true)\n  {\n      $where['conditions'] = $where;\n    }\n    if ( isset($where['conditions']) && \\is_array($where['conditions']) ){\n      if ( !isset($where['logic']) || (strtoupper($where['logic']) !== 'OR') ){\n        $where['logic'] = 'AND';\n      }\n      $res = [\n        'conditions' => [],\n        'logic' => $where['logic']\n      ];\n      foreach ( $where['conditions'] as $key => $f ){\n        $is_array = \\is_array($f);\n        if (\n          $is_array &&\n          array_key_exists('conditions', $f) &&\n          \\is_array($f['conditions'])\n        ){\n          $res['conditions'][] = $this->treat_conditions($f, false);\n        }\n        else {\n          if ( \\is_string($key) ){\n            \/\/ 'id_user' => [1, 2] Will do OR\n            if ( !$is_array ) {\n              if ( null === $f ){\n                $f = [\n                  'field' => $key,\n                  'operator' => 'isnull'\n                ];\n              }\n              else{\n                $f = [\n                  'field' => $key,\n                  'operator' => !str::is_uid($f) && is_string($f) ? 'LIKE' : '=',\n                  'value' => $f\n                ];\n              }\n            }\n            else if ( isset($f[0]) ){\n              $tmp = [\n                'conditions' => [],\n                'logic' => 'OR'\n              ];\n              foreach ( $f as $v ){\n                if ( null === $v ){\n                  $tmp['conditions'][] = [\n                    'field' => $key,\n                    'operator' => 'isnull'\n                  ];\n                }\n                else{\n                  $tmp['conditions'][] = [\n                    'field' => $key,\n                    'operator' => !str::is_uid($f) && is_string($f) ? 'LIKE' : '=',\n                    'value' => $v\n                  ];\n                }\n              }\n              $res['conditions'][] = $tmp;\n            }\n          }\n          else if ( $is_array && !x::is_assoc($f) && count($f) >= 2 ){\n            $tmp = [\n              'field' => $f[0],\n              'operator' => $f[1]\n            ];\n            if ( isset($f[3]) ){\n              $tmp['exp'] = $f[3];\n            }\n            elseif ( array_key_exists(2, $f) ){\n              if ( is_array($f[2]) ){\n                $tmp = [\n                  'conditions' => [],\n                  'logic' => 'AND'\n                ];\n                foreach ( $f[2] as $v ){\n                  if ( null === $v ){\n                    $tmp['conditions'][] = [\n                      'field' => $f[0],\n                      'operator' => 'isnotnull'\n                    ];\n                  }\n                  else{\n                    $tmp['conditions'][] = [\n                      'field' => $f[0],\n                      'operator' => $f[1],\n                      'value' => $v\n                    ];\n                  }\n                }\n                $res['conditions'][] = $tmp;\n              }\n              elseif ( $f[2] === null ){\n                $tmp['operator'] = $f[2] === '!=' ? 'isnotnull' : 'isnull';\n              }\n              else{\n                $tmp['value'] = $f[2];\n              }\n            }\n            $f = $tmp;\n          }\n          if ( isset($f['field']) ){\n            if ( !isset($f['operator']) ){\n              $f['operator'] = 'eq';\n            }\n            $res['conditions'][] = $f;\n          }\n        }\n      }\n      if ( $full ){\n        $tmp = $this->_remove_conditions_value($res);\n        $res = [\n          'hashed' => $tmp['hashed'],\n          'values' => $tmp['values'],\n          'where' => $res\n        ];\n      }\n      return $res;\n    }\n    return false;\n  }",
            "startLine": 1125,
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$full"
                    }
                ],
                "return": ""
            },
            "endLine": 1246,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "where",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "extract_fields": {
            "name": "extract_fields",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg, array $conditions, array &$res = NULL)\n  {\n      $res = [];\n    }\n    if (isset($conditions['conditions'])) {\n      $conditions = $conditions['conditions'];\n    }\n    foreach ($conditions as $c) {\n      if ( isset($c['conditions'])) {\n        $this->extract_fields($cfg, $c['conditions'], $res);\n      }\n      else {\n        if (isset($c['field'], $cfg['available_fields'][$c['field']])) {\n          $res[] = $cfg['available_fields'][$c['field']] ?\n            $this->cfn($c['field'], $cfg['available_fields'][$c['field']])\n            : $c['field'];\n        }\n        if (isset($c['exp'])) {\n          $res[] = $cfg['available_fields'][$c['exp']] ?\n            $this->cfn($c['exp'], $cfg['available_fields'][$c['exp']]) \n            : $c['exp'];\n        }\n      }\n    }\n    return $res;\n  }",
            "startLine": 1248,
            "doc": null,
            "endLine": 1273,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "conditions",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "res",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "filter_filters": {
            "name": "filter_filters",
            "summary": "Retrieve an array of specific filters among the existing ones.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg, $field, $operator = NULL)\n  {\n    if ( isset($cfg['filters']) ){\n      $f = function($cond, &$res = []) use (&$f, $field, $operator){\n        foreach ( $cond as $c ){\n          if ( isset($c['conditions']) ){\n            $f($c['conditions'], $res);\n          }\n          else if ( ($c['field'] === $field) && (!$operator || ($operator === $c['operator'])) ){\n            $res[] = $c;\n          }\n        }\n        return $res;\n      };\n      return isset($cfg['filters']['conditions']) ? $f($cfg['filters']['conditions']) : [];\n    }\n    return null;\n  }",
            "startLine": 1283,
            "doc": {
                "description": "Retrieve an array of specific filters among the existing ones.",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    },
                    {
                        "tag": "param",
                        "type": "$field"
                    },
                    {
                        "tag": "param",
                        "type": "null",
                        "name": "$operator"
                    }
                ],
                "return": ""
            },
            "endLine": 1300,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "operator",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "get_values_desc": {
            "name": "get_values_desc",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $where, array $cfg, &$others = [])\n  {\n    if ( !empty($where['conditions']) ){\n      foreach ( $where['conditions'] as &$f ){\n        if ( isset($f['logic'], $f['conditions']) && \\is_array($f['conditions']) ){\n          $this->get_values_desc($f, $cfg, $others);\n        }\n        else if ( array_key_exists('value', $f) ){\n          $desc = [\n            'primary' => false,\n            'type' => null,\n            'maxlength' => null,\n            'operator' => $f['operator'] ?? null\n          ];\n          if ( isset($cfg['models'], $f['field'], $cfg['available_fields'][$f['field']]) ){\n            $t = $cfg['available_fields'][$f['field']];\n            if (\n              isset($cfg['models'], $f['field'], $cfg['tables_full'][$t], $cfg['models'][$cfg['tables_full'][$t]]) &&\n              ($model = $cfg['models'][$cfg['tables_full'][$t]]) &&\n              ($fname = $this->csn($f['field']))\n            ){\n              if ( !empty($model['fields'][$fname]['type']) ){\n                $desc = [\n                  'type' => $model['fields'][$fname]['type'],\n                  'maxlength' => $model['fields'][$fname]['maxlength'] ?? null,\n                  'operator' => $f['operator'] ?? null\n                ];\n              }\n              \/\/ Fixing filters using alias\n              else if (\n                isset($cfg['fields'][$f['field']]) &&\n                ($fname = $this->csn($cfg['fields'][$f['field']])) &&\n                !empty($model['fields'][$fname]['type'])\n              ){\n                $desc = [\n                  'type' => $model[$fname]['type'],\n                  'maxlength' => $model[$fname]['maxlength'] ?? null,\n                  'operator' => $f['operator'] ?? null\n                ];\n              }\n              if (\n                !empty($desc['type']) &&\n                isset($model['keys']['PRIMARY']) &&\n                (count($model['keys']['PRIMARY']['columns']) === 1) &&\n                ($model['keys']['PRIMARY']['columns'][0] === $fname)\n              ){\n                $desc['primary'] = true;\n              }\n            }\n          }\n          $others[] = $desc;\n        }\n      }\n    }\n    return $others;\n  }",
            "startLine": 1307,
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "endLine": 1362,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "where",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "others",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "arrange_conditions": {
            "name": "arrange_conditions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array &$conditions, array $cfg)\n  {\n    if ( !empty($cfg['available_fields']) && isset($conditions['conditions']) ){\n      foreach ( $conditions['conditions'] as &$c ){\n        if ( array_key_exists('conditions', $c) && \\is_array($c['conditions']) ){\n          $this->arrange_conditions($c, $cfg);\n        }\n        else if ( isset($c['field']) && empty($cfg['available_fields'][$c['field']]) && !$this->is_col_full_name($c['field']) ){\n          foreach ( $cfg['tables'] as $t => $o ){\n            if ( isset($cfg['available_fields'][$this->col_full_name($c['field'], $t)]) ){\n              $c['field'] = $this->col_full_name($c['field'], $t);\n              break;\n            }\n          }\n        }\n      }\n    }\n  }",
            "startLine": 1364,
            "doc": null,
            "endLine": 1381,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "conditions",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "reprocess_cfg": {
            "name": "reprocess_cfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    unset($cfg['bbn_db_processed']);\n    unset($cfg['bbn_db_treated']);\n    unset($this->cfgs[$cfg['hash']]);\n    $tmp = $this->process_cfg($cfg, true);\n    if ( !empty($cfg['values']) && (count($cfg['values']) === count($tmp['values'])) ){\n      $tmp = array_merge($tmp, ['values' => $cfg['values']]);\n    }\n    return $tmp;\n  }",
            "startLine": 1387,
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "endLine": 1397,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "process_cfg": {
            "name": "process_cfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $args, $force = false)\n  {\n    \/\/ Avoid confusion when\n    while ( \\is_array($args) && isset($args[0]) && \\is_array($args[0]) ){\n      $args = $args[0];\n    }\n    if ( \\is_array($args) && !empty($args['bbn_db_processed']) ){\n      return $args;\n    }\n    if ( empty($args['bbn_db_treated']) ){\n      $args = $this->_treat_arguments($args);\n    }\n    \/\/var_dump(\"UPD0\", $args);\n    if ( isset($args['hash']) ){\n      if ( isset($this->cfgs[$args['hash']]) ){\n        return array_merge($this->cfgs[$args['hash']], [\n          'values' => $args['values'] ?: [],\n          'where' => $args['where'] ?: [],\n          'filters' => $args['filters'] ?: []\n        ]);\n      }\n      \/** @var array $tables_full  Each of the tables' full name. *\/\n      $tables_full = [];\n      $res = array_merge($args, [\n        'tables' => [],\n        'values_desc' => [],\n        'bbn_db_processed' => true,\n        'available_fields' => [],\n        'generate_id' => false\n      ]);\n      $models = [];\n\n      foreach ( $args['tables'] as $key => $tab ){\n        $tfn = $this->tfn($tab);\n\n        \/\/ 2 tables in the same statement can't have the same idx\n        $idx = \\is_string($key) ? $key : $tfn;\n        \/\/ Error if they do\n        if ( isset($tables_full[$idx]) ){\n          $this->error('You cannot use twice the same table with the same alias'.PHP_EOL.x::get_dump($args['tables']));\n          return null;\n        }\n        $tables_full[$idx] = $tfn;\n        $res['tables'][$idx] = $tfn;\n        if ( !isset($models[$tfn]) && ($model = $this->modelize($tfn)) ){\n          $models[$tfn] = $model;\n        }\n      }\n      if (\n        (\\count($res['tables']) === 1) &&\n        ($tfn = array_values($res['tables'])[0]) &&\n        isset($models[$tfn]['keys']['PRIMARY']) &&\n        (\\count($models[$tfn]['keys']['PRIMARY']['columns']) === 1) &&\n        ($res['primary'] = $models[$tfn]['keys']['PRIMARY']['columns'][0])\n      ){\n        $p = $models[$tfn]['fields'][$res['primary']];\n        $res['auto_increment'] = isset($p['extra']) && ($p['extra'] === 'auto_increment');\n        $res['primary_length'] = $p['maxlength'];\n        $res['primary_type'] = $p['type'];\n        if (\n          ($res['kind'] === 'INSERT') &&\n          !$res['auto_increment'] &&\n          !\\in_array($this->csn($res['primary']), $res['fields'], true)\n        ){\n          $res['generate_id'] = true;\n          $res['fields'][] = $res['primary'];\n        }\n      }\n      foreach ( $args['join'] as $key => $join ){\n        if ( !empty($join['table']) && !empty($join['on']) ){\n          $tfn = $this->tfn($join['table']);\n          if ( !isset($models[$tfn]) && ($model = $this->modelize($tfn)) ){\n            $models[$tfn] = $model;\n          }\n          $idx = $join['alias'] ?? $tfn;\n          $tables_full[$idx] = $tfn;\n        }\n        else{\n          $this->error('Error! The join array must have on and table defined'.PHP_EOL.x::get_dump($join));\n        }\n      }\n      foreach ( $tables_full as $idx => $tfn ){\n        foreach ( $models[$tfn]['fields'] as $col => $cfg ){\n          $res['available_fields'][$this->cfn($col, $idx)] = $idx;\n          $csn = $this->csn($col);\n          if ( !isset($res['available_fields'][$csn]) ){\n            \/*\n            $res['available_fields'][$csn] = false;\n          }\n          else{\n            *\/\n            $res['available_fields'][$csn] = $idx;\n          }\n        }\n      }\n      foreach ( $res['fields'] as $idx => &$col ){\n        if (\n          strpos($col, '(') ||\n          strpos($col, '-')  ||\n          strpos($col, \"+\") ||\n          strpos($col, '*')  ||\n          strpos($col, \"\/\") ||\n          \/*\n          strpos($col, '->\"$.')  ||\n          strpos($col, \"->'$.\") ||\n          strpos($col, '->>\"$.')  ||\n          strpos($col, \"->>'$.\") ||\n          *\/\n          \/\/ String as value\n          preg_match('\/^[\\\\\\'\\\"]{1}[^\\\\\\'\\\"]*[\\\\\\'\\\"]{1}$\/', $col)\n        ){\n          $res['available_fields'][$col] = false;\n        }\n        if ( \\is_string($idx) ){\n          if ( !isset($res['available_fields'][$col]) ){\n            \/\/$this->log($res);\n            $this->error(\"Impossible to find the column $col\");\n            $this->error(json_encode($res['available_fields'], JSON_PRETTY_PRINT));\n            return null;\n          }\n          $res['available_fields'][$idx] = $res['available_fields'][$col];\n        }\n      }\n      \/\/ From here the available fields are defined\n      if ( !empty($res['filters']) ){\n        $this->arrange_conditions($res['filters'], $res);\n      }\n      unset($col);\n      $res['models'] = $models;\n      $res['tables_full'] = $tables_full;\n      switch ( $res['kind'] ){\n        case 'SELECT':\n          if ( empty($res['fields']) ){\n            foreach ( array_keys($res['available_fields']) as $f ){\n              if ( $this->is_col_full_name($f) ){\n                $res['fields'][] = $f;\n              }\n            }\n          }\n          \/\/\\bbn\\x::log($res, 'sql');\n          if ( $res['select_st'] = $this->language->get_select($res) ){\n            $res['sql'] = $res['select_st'];\n          }\n          break;\n        case 'INSERT':\n          $res = $this->remove_virtual($res);\n          if ( $res['insert_st'] = $this->language->get_insert($res) ){\n            $res['sql'] = $res['insert_st'];\n          }\n          \/\/var_dump($res);\n          break;\n        case 'UPDATE':\n          $res = $this->remove_virtual($res);\n          if ( $res['update_st'] = $this->get_update($res) ){\n            $res['sql'] = $res['update_st'];\n          }\n          break;\n        case 'DELETE':\n          if ( $res['delete_st'] = $this->get_delete($res) ){\n            $res['sql'] = $res['delete_st'];\n          }\n          break;\n      }\n      $res['join_st'] = $this->language->get_join($res);\n      $res['where_st'] = $this->language->get_where($res);\n      $res['group_st'] = $this->language->get_group_by($res);\n      $res['having_st'] = $this->language->get_having($res);\n      $cls = '\\\\bbn\\\\db\\\\languages\\\\'.$this->engine;\n      if (\n        empty($res['count'])\n        && (count($res['fields']) === 1)\n        && ($cls::is_aggregate_function(reset($res['fields'])))\n      ) {\n        $res['order_st'] = '';\n        $res['limit_st'] = '';\n      }\n      else {\n        $res['order_st'] = $res['count'] ? '' : $this->language->get_order($res);\n        $res['limit_st'] = $res['count'] ? '' : $this->language->get_limit($res);\n      }\n\n      if (!empty($res['sql'])) {\n        $res['sql'] .= $res['join_st'].$res['where_st'].$res['group_st'];\n        if ($res['count'] && $res['group_by']) {\n          $res['sql'] .= ') AS t '.PHP_EOL;\n        }\n        $res['sql'] .= $res['having_st'].$res['order_st'].$res['limit_st'];\n        $res['statement_hash'] = $this->_make_hash($res['sql']);\n\n        foreach ( $res['join'] as $r ){\n          $this->get_values_desc($r['on'], $res, $res['values_desc']);\n        }\n        if ( ($res['kind'] === 'INSERT') || ($res['kind'] === 'UPDATE') ){\n          foreach ( $res['fields'] as $name ){\n            $desc = [];\n            if ( isset($res['models'], $res['available_fields'][$name]) ){\n              $t = $res['available_fields'][$name];\n              if (\n                isset($tables_full[$t]) &&\n                ($model = $res['models'][$tables_full[$t]]['fields']) &&\n                ($fname = $this->csn($name)) &&\n                !empty($model[$fname]['type'])\n              ){\n                $desc['type'] = $model[$fname]['type'];\n                $desc['maxlength'] = $model[$fname]['maxlength'] ?? null;\n              }\n            }\n            $res['values_desc'][] = $desc;\n          }\n        }\n        $this->get_values_desc($res['filters'], $res, $res['values_desc']);\n        $this->get_values_desc($res['having'], $res, $res['values_desc']);\n        $this->cfgs[$res['hash']] = $res;\n      }\n      return $res;\n    }\n    $this->error('Impossible to process the config (no hash)'.PHP_EOL.print_r($args, true));\n    return null;\n  }",
            "startLine": 1404,
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$args"
                    }
                ],
                "return": ""
            },
            "endLine": 1622,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "args",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "remove_virtual": {
            "name": "remove_virtual",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $res)\n  {\n    if ( isset($res['fields']) ){\n      $to_remove = [];\n      foreach ( $res['fields'] as $i => $f ){\n        if (\n          !empty($res['available_fields'][$f]) &&\n          isset($res['models'][$res['available_fields'][$f]]['fields'][$this->csn($f)]) &&\n          $res['models'][$res['available_fields'][$f]]['fields'][$this->csn($f)]['virtual']\n        ){\n          array_unshift($to_remove, $i);\n        }\n      }\n      foreach ($to_remove as $i) {\n        array_splice($res['fields'], $i, 1);\n        array_splice($res['values'], $i, 1);\n      }\n    }\n    return $res;\n  }",
            "startLine": 1624,
            "doc": null,
            "endLine": 1643,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "res",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "error": {
            "name": "error",
            "summary": "Set an error and acts appropriately based oon the error mode",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($e)\n  {\n    $this->has_error = true;\n    self::has_error();\n    $msg = [\n      self::$line,\n      self::get_log_line('ERROR DB!'),\n      self::$line\n    ];\n    if ( \\is_string($e) ){\n      $msg[] = self::get_log_line('USER MESSAGE');\n      $msg[] = $e;\n    }\n    else if ( method_exists($e, 'getMessage') ){\n      $msg[] = self::get_log_line('DB MESSAGE');\n      $msg[] = $e->getMessage();\n    }\n    $this->last_error = end($msg);\n    $msg[] = self::get_log_line('QUERY');\n    $msg[] = $this->last();\n    if ( $this->last_real_params['values'] ){\n      $msg[] =  self::get_log_line('VALUES');\n      foreach ( $this->last_real_params['values'] as $v ){\n        if ( $v === null ){\n          $msg[] = 'NULL';\n        }\n        else if ( \\is_bool($v) ){\n          $msg[] = $v ? 'TRUE' : 'FALSE';\n        }\n        else if ( \\is_string($v) ){\n          $msg[] = str::is_buid($v) ? bin2hex($v) : str::cut($v, 30);\n        }\n        else{\n          $msg[] = $v;\n        }\n      }\n    }\n    $msg[] =  self::get_log_line('BACKTRACE');\n    $dbt = array_reverse(debug_backtrace());\n    array_walk($dbt, function($a, $i) use(&$msg){\n      $msg[] = str_repeat(' ', $i).($i ? '->' : '').\"{$a['function']}  (\".basename(dirname($a['file'])).'\/'.basename($a['file']).\":{$a['line']})\";\n    });\n    $this->log(implode(PHP_EOL, $msg));\n    if ( $this->on_error === self::E_DIE ){\n      die(\\defined('BBN_IS_DEV') && BBN_IS_DEV ? '<pre>'.PHP_EOL.implode(PHP_EOL, $msg).PHP_EOL.'<\/pre>' : 'Database error');\n    }\n  }",
            "startLine": 1651,
            "doc": {
                "description": "Set an error and acts appropriately based oon the error mode",
                "params": [
                    {
                        "tag": "param",
                        "type": "$e"
                    }
                ],
                "return": ""
            },
            "endLine": 1697,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "e",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "check": {
            "name": "check",
            "summary": "Checks if the database is ready to process a query.",
            "description": "```php\nbbn\\x::dump($db->check());\n\/\/ (bool)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "bbn\\x::dump($db->check());\n\/\/ (bool)"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ( $this->current !== null ){\n      \/\/ if $on_error is set to E_CONTINUE returns true\n      if ( $this->on_error === self::E_CONTINUE ){\n        return true;\n      }\n      \/\/ If any connection has an error with mode E_STOP_ALL\n      if ( self::$has_error_all && ($this->on_error !== self::E_STOP_ALL) ){\n        return false;\n      }\n      \/\/ If this connection has an error with mode E_STOP\n      if ( $this->has_error && ($this->on_error !== self::E_STOP) ){\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }",
            "startLine": 1708,
            "doc": {
                "description": "Checks if the database is ready to process a query.\n\n```php\nbbn\\x::dump($db->check());\n\/\/ (bool)\n```",
                "params": [],
                "return": ""
            },
            "endLine": 1726,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "Writes in data\/logs\/db.log.",
            "description": "```php\n$db->$db->log('test');\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db->$db->log('test');"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    $args = \\func_get_args();\n    foreach ( $args as $a ){\n      x::log($a, 'db');\n    }\n    return $this;\n  }",
            "startLine": 1737,
            "doc": {
                "description": "Writes in data\/logs\/db.log.\n\n```php\n$db->$db->log('test');\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$st"
                    }
                ],
                "return": ""
            },
            "endLine": 1744,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "set_error_mode": {
            "name": "set_error_mode",
            "summary": "Sets the error mode.",
            "description": "```php\n$db->set_error_mode('continue'|'die'|'stop_all|'stop');\n\/\/ (void)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db->set_error_mode('continue'|'die'|'stop_all|'stop');\n\/\/ (void)"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($mode)\n  {\n    $this->on_error = $mode;\n    return $this;\n  }",
            "startLine": 1757,
            "doc": {
                "description": "Sets the error mode.\n\n```php\n$db->set_error_mode('continue'|'die'|'stop_all|'stop');\n\/\/ (void)\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode",
                        "description": "The error mode: \"continue\", \"die\", \"stop\", \"stop_all\"."
                    }
                ],
                "return": ""
            },
            "endLine": 1761,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "mode",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The error mode: \"continue\", \"die\", \"stop\", \"stop_all\"."
                }
            ]
        },
        "get_error_mode": {
            "name": "get_error_mode",
            "summary": "Gets the error mode.",
            "description": "```php\nbbn\\x::dump($db->get_error_mode());\n\/\/ (string) stop_all\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "bbn\\x::dump($db->get_error_mode());\n\/\/ (string) stop_all"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->on_error;\n  }",
            "startLine": 1772,
            "doc": {
                "description": "Gets the error mode.\n\n```php\nbbn\\x::dump($db->get_error_mode());\n\/\/ (string) stop_all\n```",
                "params": [],
                "return": ""
            },
            "endLine": 1775,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "clear_cache": {
            "name": "clear_cache",
            "summary": "Deletes a specific item from the cache.",
            "description": "```php\nbbn\\x::dump($db->clear_cache('db_example','tables'));\n\/\/ (db)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "bbn\\x::dump($db->clear_cache('db_example','tables'));\n\/\/ (db)"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($item, $mode)\n  {\n    $cache_name = $this->_cache_name($item, $mode);\n    if ( $this->cache_has($cache_name) ){\n      $this->cache_delete($cache_name);\n    }\n    return $this;\n  }",
            "startLine": 1789,
            "doc": {
                "description": "Deletes a specific item from the cache.\n\n```php\nbbn\\x::dump($db->clear_cache('db_example','tables'));\n\/\/ (db)\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$item",
                        "description": "'db_name' or 'table_name'"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode",
                        "description": "'columns','tables' or'databases'"
                    }
                ],
                "return": ""
            },
            "endLine": 1796,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "'db_name' or 'table_name'"
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "'columns','tables' or'databases'"
                }
            ]
        },
        "clear_all_cache": {
            "name": "clear_all_cache",
            "summary": "Clears the cache.",
            "description": "```php\nbbn\\x::dump($db->clear_all_cache());\n\/\/ (db)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "bbn\\x::dump($db->clear_all_cache());\n\/\/ (db)"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->cache_delete_all();\n    return $this;\n  }",
            "startLine": 1808,
            "doc": {
                "description": "Clears the cache.\n\n```php\nbbn\\x::dump($db->clear_all_cache());\n\/\/ (db)\n```",
                "params": [],
                "return": ""
            },
            "endLine": 1812,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "stop_fancy_stuff": {
            "name": "stop_fancy_stuff",
            "summary": "Stops fancy stuff.",
            "description": "```php\n $db->stop_fancy_stuff();\n\/\/ (void)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db->stop_fancy_stuff();\n\/\/ (void)"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->setAttribute(\\PDO::ATTR_STATEMENT_CLASS, [\\PDOStatement::class]);\n    $this->fancy = false;\n    return $this;\n  }",
            "startLine": 1824,
            "doc": {
                "description": "Stops fancy stuff.\n\n```php\n $db->stop_fancy_stuff();\n\/\/ (void)\n```",
                "params": [],
                "return": ""
            },
            "endLine": 1829,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "start_fancy_stuff": {
            "name": "start_fancy_stuff",
            "summary": "Starts fancy stuff.",
            "description": "```php\n$db->start_fancy_stuff();\n\/\/ (void)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db->start_fancy_stuff();\n\/\/ (void)"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->setAttribute(\\PDO::ATTR_STATEMENT_CLASS, [db\\query::class, [$this]]);\n    $this->fancy = 1;\n    return $this;\n  }",
            "startLine": 1840,
            "doc": {
                "description": "Starts fancy stuff.\n\n```php\n$db->start_fancy_stuff();\n\/\/ (void)\n```",
                "params": [],
                "return": ""
            },
            "endLine": 1845,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "clear": {
            "name": "clear",
            "summary": "Clear.",
            "description": "```php\n$db->clear()\n\/\/ (void)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db->clear()\n\/\/ (void)"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->queries = [];\n    return $this;\n  }",
            "startLine": 1857,
            "doc": {
                "description": "Clear.\n\n```php\n$db->clear()\n\/\/ (void)\n```",
                "params": [],
                "return": ""
            },
            "endLine": 1861,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "add_statement": {
            "name": "add_statement",
            "summary": "Return an object with all the properties of the statement and where it is carried out.",
            "description": "```php\n\\bbn\\x::dump($db->add_statement('SELECT name FROM table_users'));\n\/\/ (db)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->add_statement('SELECT name FROM table_users'));\n\/\/ (db)"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($statement, $params)\n  {\n    $this->last_real_query = $statement;\n    $this->last_real_params = $params;\n    if ( $this->last_enabled ){\n      $this->last_query = $statement;\n      $this->last_params = $params;\n      \/\/$this->log($statement);\n      if ( $this->debug ){\n        \/\/$this->debug_queries[] = $statement;\n      }\n    }\n    return $this;\n  }",
            "startLine": 1874,
            "doc": {
                "description": "Return an object with all the properties of the statement and where it is carried out.\n\n```php\n\\bbn\\x::dump($db->add_statement('SELECT name FROM table_users'));\n\/\/ (db)\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$statement"
                    }
                ],
                "return": ""
            },
            "endLine": 1887,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "statement",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "params",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "enable_trigger": {
            "name": "enable_trigger",
            "summary": "Enable the triggers' functions",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->triggers_disabled = false;\n    return $this;\n  }",
            "startLine": 1902,
            "doc": {
                "description": "Enable the triggers' functions",
                "params": [],
                "return": ""
            },
            "endLine": 1906,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "disable_trigger": {
            "name": "disable_trigger",
            "summary": "Disable the triggers' functions",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->triggers_disabled = true;\n    return $this;\n  }",
            "startLine": 1913,
            "doc": {
                "description": "Disable the triggers' functions",
                "params": [],
                "return": ""
            },
            "endLine": 1917,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "is_trigger_enabled": {
            "name": "is_trigger_enabled",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return !$this->triggers_disabled;\n  }",
            "startLine": 1919,
            "doc": null,
            "endLine": 1922,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "is_trigger_disabled": {
            "name": "is_trigger_disabled",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->triggers_disabled;\n  }",
            "startLine": 1924,
            "doc": null,
            "endLine": 1927,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "set_trigger": {
            "name": "set_trigger",
            "summary": "Apply a function each time the methods $kind are used",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($function, $kind = NULL, $moment = NULL, $tables = '*')\n  {\n    $kinds = ['SELECT', 'INSERT', 'UPDATE', 'DELETE'];\n    $moments = ['before', 'after'];\n    if ( empty($kind) ){\n      $kind = $kinds;\n    }\n    else if ( !\\is_array($kind) ){\n      $kind = (array)strtoupper($kind);\n    }\n    else{\n      $kind = array_map('strtoupper', $kind);\n    }\n    if ( empty($moment) ){\n      $moment = $moments;\n    }\n    else {\n      $moment = !\\is_array($moment) ? (array)strtolower($moment) : array_map('strtolower', $moment);\n    }\n    foreach ( $kind as $k ){\n      if ( \\in_array($k, $kinds, true) ){\n        foreach ( $moment as $m ){\n          if ( array_key_exists($m, $this->triggers[$k]) && \\in_array($m, $moments, true) ){\n            if ( $tables === '*' ){\n              $tables = $this->get_tables();\n            }\n            else if ( str::check_name($tables) ){\n              $tables = [$tables];\n            }\n            if ( \\is_array($tables) ){\n              foreach ( $tables as $table ){\n                $t = $this->tfn($table);\n                if ( !isset($this->triggers[$k][$m][$t]) ){\n                  $this->triggers[$k][$m][$t] = [];\n                }\n                $this->triggers[$k][$m][$t][] = $function;\n              }\n            }\n          }\n        }\n      }\n    }\n    return $this;\n  }",
            "startLine": 1938,
            "doc": {
                "description": "Apply a function each time the methods $kind are used",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$function"
                    },
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$kind",
                        "description": "select|insert|update|delete"
                    },
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$moment",
                        "description": "before|after"
                    },
                    {
                        "tag": "param",
                        "type": "null|string|array",
                        "name": "$tables",
                        "description": "database's table(s) name(s)"
                    }
                ],
                "return": ""
            },
            "endLine": 1981,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "function",
                    "position": 0,
                    "type": "callable",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "kind",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "select|insert|update|delete"
                },
                {
                    "name": "moment",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "before|after"
                },
                {
                    "name": "tables",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "*",
                    "default_name": "",
                    "description": "database's table(s) name(s)"
                }
            ]
        },
        "get_triggers": {
            "name": "get_triggers",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->triggers;\n  }",
            "startLine": 1986,
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "endLine": 1989,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "get_fields_list": {
            "name": "get_fields_list",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($tables)\n  {\n    $res = [];\n    if ( !\\is_array($tables) ){\n      $tables = [$tables];\n    }\n    foreach ( $tables as $t ){\n      if ( !($model = $this->get_columns($t)) ){\n        $this->error('Impossible to find the table '.$t);\n        die('Impossible to find the table '.$t);\n      }\n      foreach ( array_keys($model) as $f ){\n        $res[] = $this->cfn($f, $t);\n      }\n    }\n    return $res;\n  }",
            "startLine": 2003,
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$tables"
                    }
                ],
                "return": ""
            },
            "endLine": 2019,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "tables",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_foreign_keys": {
            "name": "get_foreign_keys",
            "summary": "Return an array with tables and fields related to the searched foreign key.",
            "description": "```php\nbbn\\x::dump($db->get_foreign_keys('id', 'table_users', 'db_example'));\n\/\/ (Array)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "bbn\\x::dump($db->get_foreign_keys('id', 'table_users', 'db_example'));\n\/\/ (Array)"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($col, $table, $db = NULL)\n  {\n    if ( !$db ){\n      $db = $this->current;\n    }\n    $res = [];\n    $model = $this->modelize();\n    foreach ( $model as $tn => $m ){\n      foreach ( $m['keys'] as $k => $t ){\n        if ( ($t['ref_table'] === $table) &&\n          ($t['ref_column'] === $col) &&\n          ($t['ref_db'] === $db) &&\n          (\\count($t['columns']) === 1)\n        ){\n          if ( !isset($res[$tn]) ){\n            $res[$tn] = [$t['columns'][0]];\n          }\n          else{\n            $res[$tn][] = $t['columns'][0];\n          }\n        }\n      }\n    }\n    return $res;\n  }",
            "startLine": 2034,
            "doc": {
                "description": "Return an array with tables and fields related to the searched foreign key.\n\n```php\nbbn\\x::dump($db->get_foreign_keys('id', 'table_users', 'db_example'));\n\/\/ (Array)\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$col",
                        "description": "The column's name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db",
                        "description": "The database name if different from the current one"
                    }
                ],
                "return": "with tables and fields related to the searched foreign key"
            },
            "endLine": 2058,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's name"
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "db",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The database name if different from the current one"
                }
            ]
        },
        "has_id_increment": {
            "name": "has_id_increment",
            "summary": "Return true if in the table there are fields with auto-increment.",
            "description": "Working only on mysql.\n\n```php\n\\bbn\\x::dump($db->has_id_increment('table_users'));\n\/\/ (bool) 1\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "Working only on mysql."
                },
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->has_id_increment('table_users'));\n\/\/ (bool) 1"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    return ($model = $this->modelize($table)) &&\n      isset($model['keys']['PRIMARY']) &&\n      (\\count($model['keys']['PRIMARY']['columns']) === 1) &&\n      ($model['fields'][$model['keys']['PRIMARY']['columns'][0]]['extra'] === 'auto_increment');\n  }",
            "startLine": 2072,
            "doc": {
                "description": "Return true if in the table there are fields with auto-increment.\nWorking only on mysql.\n\n```php\n\\bbn\\x::dump($db->has_id_increment('table_users'));\n\/\/ (bool) 1\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": ""
            },
            "endLine": 2078,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "modelize": {
            "name": "modelize",
            "summary": "Return the table's structure as an indexed array.",
            "description": "```php\n\\bbn\\x::dump($db->modelize(\"table_users\"));\n\/\/ (array) [keys] => Array ( [PRIMARY] => Array ( [columns] => Array ( [0] => userid [1] => userdataid ) [ref_db] => [ref_table] => [ref_column] => [unique] => 1 ) [table_users_userId_userdataId_info] => Array ( [columns] => Array ( [0] => userid [1] => userdataid [2] => info ) [ref_db] => [ref_table] => [ref_column] => [unique] => 0 ) ) [cols] => Array ( [userid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [userdataid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [info] => Array ( [0] => table_users_userId_userdataId_info ) ) [fields] => Array ( [userid] => Array ( [position] => 1 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [userdataid] => Array ( [position] => 2 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [info] => Array ( [position] => 3 [null] => 1 [key] => [default] => NULL [extra] => [signed] => 0 [maxlength] => 200 [type] => varchar ) )\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->modelize(\"table_users\"));\n\/\/ (array) [keys] => Array ( [PRIMARY] => Array ( [columns] => Array ( [0] => userid [1] => userdataid ) [ref_db] => [ref_table] => [ref_column] => [unique] => 1 ) [table_users_userId_userdataId_info] => Array ( [columns] => Array ( [0] => userid [1] => userdataid [2] => info ) [ref_db] => [ref_table] => [ref_column] => [unique] => 0 ) ) [cols] => Array ( [userid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [userdataid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [info] => Array ( [0] => table_users_userId_userdataId_info ) ) [fields] => Array ( [userid] => Array ( [position] => 1 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [userdataid] => Array ( [position] => 2 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [info] => Array ( [position] => 3 [null] => 1 [key] => [default] => NULL [extra] => [signed] => 0 [maxlength] => 200 [type] => varchar ) )"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table = NULL, $force = false)\n  {\n    $r = [];\n    $tables = false;\n    if ( empty($table) || ($table === '*') ){\n      $tables = $this->get_tables($this->current);\n    }\n    else if ( \\is_string($table) ){\n      $tables = [$table];\n    }\n    else if ( \\is_array($table) ){\n      $tables = $table;\n    }\n    if ( \\is_array($tables) ){\n      foreach ( $tables as $t ){\n        if ( $full = $this->tfn($t) ){\n          $r[$full] = $this->_get_cache($full, 'columns', $force);\n        }\n      }\n      if ( \\count($r) === 1 ){\n        return end($r);\n      }\n      return $r;\n    }\n    return null;\n  }",
            "startLine": 2092,
            "doc": {
                "description": "Return the table's structure as an indexed array.\n\n```php\n\\bbn\\x::dump($db->modelize(\"table_users\"));\n\/\/ (array) [keys] => Array ( [PRIMARY] => Array ( [columns] => Array ( [0] => userid [1] => userdataid ) [ref_db] => [ref_table] => [ref_column] => [unique] => 1 ) [table_users_userId_userdataId_info] => Array ( [columns] => Array ( [0] => userid [1] => userdataid [2] => info ) [ref_db] => [ref_table] => [ref_column] => [unique] => 0 ) ) [cols] => Array ( [userid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [userdataid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [info] => Array ( [0] => table_users_userId_userdataId_info ) ) [fields] => Array ( [userid] => Array ( [position] => 1 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [userdataid] => Array ( [position] => 2 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [info] => Array ( [position] => 3 [null] => 1 [key] => [default] => NULL [extra] => [signed] => 0 [maxlength] => 200 [type] => varchar ) )\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "null|array|string",
                        "name": "$table",
                        "description": "The table's name"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$force",
                        "description": "If set to true will force the modelization to reperform even if the cache exists"
                    }
                ],
                "return": ""
            },
            "endLine": 2117,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true will force the modelization to reperform even if the cache exists"
                }
            ]
        },
        "fmodelize": {
            "name": "fmodelize",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table = '', $force = false)\n  {\n    if ( $res = $this->modelize(...\\func_get_args()) ){\n      foreach ( $res['fields'] as $n => $f ){\n        $res['fields'][$n]['name'] = $n;\n        $res['fields'][$n]['keys'] = [];\n        if ( isset($res['cols'][$n]) ){\n          foreach ( $res['cols'][$n] as $key ){\n            $res['fields'][$n]['keys'][$key] = $res['keys'][$key];\n          }\n        }\n      }\n      return $res['fields'];\n    }\n    return null;\n  }",
            "startLine": 2124,
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$force"
                    }
                ],
                "return": ""
            },
            "endLine": 2139,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "find_references": {
            "name": "find_references",
            "summary": "find_references",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($column, $db = '')\n  {\n    $changed = false;\n    if ( $db && ($db !== $this->current) ){\n      $changed = $this->current;\n      $this->change($db);\n    }\n    $column = $this->cfn($column);\n    $bits = explode('.', $column);\n    if ( \\count($bits) === 2 ){\n      array_unshift($bits, $this->current);\n    }\n    if ( \\count($bits) !== 3 ){\n\n      return false;\n    }\n    $refs = [];\n    $schema = $this->modelize();\n    $test = function($key) use($bits){\n      return ($key['ref_db'] === $bits[0]) && ($key['ref_table'] === $bits[1]) && ($key['ref_column'] === $bits[2]);\n    };\n    foreach ( $schema as $table => $cfg ){\n      foreach ( $cfg['keys'] as $k ){\n        if ( $test($k) ){\n          $refs[] = $table.'.'.$k['columns'][0];\n        }\n      }\n    }\n    if ( $changed ){\n      $this->change($changed);\n    }\n    return $refs;\n  }",
            "startLine": 2149,
            "doc": {
                "description": "find_references",
                "params": [
                    {
                        "tag": "param",
                        "type": "$column"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db"
                    }
                ],
                "return": ""
            },
            "endLine": 2181,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "find_relations": {
            "name": "find_relations",
            "summary": "find_relations",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($column, $db = '')\n  {\n    $changed = false;\n    if ( $db && ($db !== $this->current) ){\n      $changed = $this->current;\n      $this->change($db);\n    }\n    $column = $this->cfn($column);\n    $bits = explode('.', $column);\n    if ( \\count($bits) === 2 ){\n      array_unshift($bits, $db ?: $this->current);\n    }\n    if ( \\count($bits) !== 3 ){\n      return null;\n    }\n    $table = $bits[1];\n    $refs = [];\n    $schema = $this->modelize();\n    $test = function($key) use($bits){\n      return ($key['ref_db'] === $bits[0]) && ($key['ref_table'] === $bits[1]) && ($key['ref_column'] === $bits[2]);\n    };\n    foreach ( $schema as $tf => $cfg ){\n      $t = $this->tsn($tf);\n      if ( $t !== $table ){\n        foreach ( $cfg['keys'] as $k ){\n          if ( $test($k) ){\n            foreach ( $cfg['keys'] as $k2 ){\n              \/\/ Is not the same table\n              if ( !$test($k2) &&\n                \/\/ Has a reference\n                !empty($k2['ref_column']) &&\n                \/\/ and refers to a single column\n                (\\count($k['columns']) === 1) &&\n                \/\/ A unique reference\n                (\\count($k2['columns']) === 1) &&\n                \/\/ To a table with a primary\n                isset($schema[$this->tfn($k2['ref_table'])]['cols'][$k2['ref_column']]) &&\n                \/\/ which is a sole column\n                (\\count($schema[$this->tfn($k2['ref_table'])]['cols'][$k2['ref_column']]) === 1) &&\n                \/\/ We retrieve the key name\n                ($key_name = $schema[$this->tfn($k2['ref_table'])]['cols'][$k2['ref_column']][0]) &&\n                \/\/ which is unique\n                !empty($schema[$this->tfn($k2['ref_table'])]['keys'][$key_name]['unique'])\n              ){\n                if ( !isset($refs[$t]) ){\n                  $refs[$t] = ['column' => $k['columns'][0], 'refs' => []];\n                }\n                $refs[$t]['refs'][$k2['columns'][0]] = $k2['ref_table'].'.'.$k2['ref_column'];\n              }\n            }\n          }\n        }\n      }\n    }\n    if ( $changed ){\n      $this->change($changed);\n    }\n    return $refs;\n  }",
            "startLine": 2190,
            "doc": {
                "description": "find_relations",
                "params": [
                    {
                        "tag": "param",
                        "type": "$column"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db"
                    }
                ],
                "return": ""
            },
            "endLine": 2248,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_primary": {
            "name": "get_primary",
            "summary": "Return primary keys of a table as a numeric array.",
            "description": "```php\n\\bbn\\x::dump($db-> get_primary('table_users'));\n\/\/ (array) [\"id\"]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db-> get_primary('table_users'));\n\/\/ (array) [\"id\"]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    if ( ($keys = $this->get_keys($table)) && isset($keys['keys']['PRIMARY']) ){\n      return $keys['keys']['PRIMARY']['columns'];\n    }\n    return [];\n  }",
            "startLine": 2261,
            "doc": {
                "description": "Return primary keys of a table as a numeric array.\n\n```php\n\\bbn\\x::dump($db-> get_primary('table_users'));\n\/\/ (array) [\"id\"]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": ""
            },
            "endLine": 2267,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "get_unique_primary": {
            "name": "get_unique_primary",
            "summary": "Return the unique primary key of the given table.",
            "description": "```php\n\\bbn\\x::dump($db->get_unique_primary('table_users'));\n\/\/ (string) id\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->get_unique_primary('table_users'));\n\/\/ (string) id"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    if ( ($keys = $this->get_keys($table)) &&\n      isset($keys['keys']['PRIMARY']) &&\n      (\\count($keys['keys']['PRIMARY']['columns']) === 1) ){\n      return $keys['keys']['PRIMARY']['columns'][0];\n    }\n    return null;\n  }",
            "startLine": 2280,
            "doc": {
                "description": "Return the unique primary key of the given table.\n\n```php\n\\bbn\\x::dump($db->get_unique_primary('table_users'));\n\/\/ (string) id\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": ""
            },
            "endLine": 2288,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "get_unique_keys": {
            "name": "get_unique_keys",
            "summary": "Return the unique keys of a table as a numeric array.",
            "description": "```php\n\\bbn\\x::dump($db->get_unique_keys('table_users'));\n\/\/ (array) [\"userid\", \"userdataid\"]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->get_unique_keys('table_users'));\n\/\/ (array) [\"userid\", \"userdataid\"]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    $fields = [[]];\n    if ( $ks = $this->get_keys($table) ){\n      foreach ( $ks['keys'] as $k ){\n        if ( $k['unique'] ){\n          return $k['columns'];\n        }\n      }\n    }\n    return [];\n  }",
            "startLine": 2301,
            "doc": {
                "description": "Return the unique keys of a table as a numeric array.\n\n```php\n\\bbn\\x::dump($db->get_unique_keys('table_users'));\n\/\/ (array) [\"userid\", \"userdataid\"]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": ""
            },
            "endLine": 2312,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "escape_value": {
            "name": "escape_value",
            "summary": "Return a string with quotes and percent escaped.",
            "description": "```php\nbbn\\x::dump($db->escape_value(\"My father's job is interesting\");\n\/\/ (string) My father\\'s job is interesting\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "bbn\\x::dump($db->escape_value(\"My father's job is interesting\");\n\/\/ (string) My father\\'s job is interesting"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($value, $esc = '\\'')\n  {\n    return str_replace('%', '\\\\%', $esc === '\"' ?\n      str::escape_dquotes($value) :\n      str::escape_squotes($value));\n  }",
            "startLine": 2335,
            "doc": {
                "description": "Return a string with quotes and percent escaped.\n\n```php\nbbn\\x::dump($db->escape_value(\"My father's job is interesting\");\n\/\/ (string) My father\\'s job is interesting\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$value",
                        "description": "The string to escape."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$esc"
                    }
                ],
                "return": ""
            },
            "endLine": 2340,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "value",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                },
                {
                    "name": "esc",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "'",
                    "default_name": ""
                }
            ]
        },
        "set_last_insert_id": {
            "name": "set_last_insert_id",
            "summary": "Changes the value of last_insert_id (used by history).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id = '')\n  {\n    if ( $id === '' ){\n      if ( $this->id_just_inserted ){\n        $id = $this->id_just_inserted;\n        $this->id_just_inserted = null;\n      }\n      else{\n        $id = $this->lastInsertId();\n        if ( \\is_string($id) && str::is_integer($id) ){\n          $id = (int)$id;\n        }\n      }\n    }\n    else{\n      $this->id_just_inserted = $id;\n    }\n    $this->last_insert_id = $id;\n    return $this;\n  }",
            "startLine": 2353,
            "doc": {
                "description": "Changes the value of last_insert_id (used by history).",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$id",
                        "description": "The last inserted id"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "this function should be private\n\n```php\nbbn\\x::dump($db->set_last_insert_id());\n\/\/ (db)\n```"
                }
            },
            "endLine": 2372,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The last inserted id"
                }
            ]
        },
        "parse_query": {
            "name": "parse_query",
            "summary": "Parses a SQL query and return an array.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($statement)\n  {\n    if ( $this->parser === null ){\n      $this->parser = new \\PHPSQLParser\\PHPSQLParser();\n    }\n    $done = false;\n    try {\n      $r = $this->parser->parse($statement);\n      $done = 1;\n    }\n    catch ( \\Exception $e ){\n      $this->log('Error while parsing the query '.$statement);\n    }\n    if ($done) {\n      if (!$r || !count($r) ){\n        $this->log('Impossible to parse the query '.$statement);\n        return null;\n      }\n      if ( isset($r['BRACKET']) && (\\count($r) === 1) ){\n        $this->log('Bracket in the query '.$statement);\n        return null;\n      }\n      return $r;\n    }\n    return null;\n  }",
            "startLine": 2380,
            "doc": {
                "description": "Parses a SQL query and return an array.",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$statement"
                    }
                ],
                "return": ""
            },
            "endLine": 2405,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "statement",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "last": {
            "name": "last",
            "summary": "Return the last query for this connection.",
            "description": "```php\n\\bbn\\x::dump($db->last());\n\/\/ (string) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "```php\n\\bbn\\x::dump($db->last());\n\/\/ (string) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n```"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->last_query;\n  }",
            "startLine": 2417,
            "doc": {
                "description": "Return the last query for this connection.\n\n```php\n\\bbn\\x::dump($db->last());\n\/\/ (string) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n```",
                "params": [],
                "return": ""
            },
            "endLine": 2420,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_last_cfg": {
            "name": "get_last_cfg",
            "summary": "Return the last config for this connection.",
            "description": "```php\n\\bbn\\x::dump($db->get_last_cfg());\n\/\/ (array) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "```php\n\\bbn\\x::dump($db->get_last_cfg());\n\/\/ (array) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n```"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->last_cfg;\n  }",
            "startLine": 2432,
            "doc": {
                "description": "Return the last config for this connection.\n\n```php\n\\bbn\\x::dump($db->get_last_cfg());\n\/\/ (array) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n```",
                "params": [],
                "return": ""
            },
            "endLine": 2435,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "last_id": {
            "name": "last_id",
            "summary": "Return the last inserted ID.",
            "description": "```php\n\\bbn\\x::dump($db->last_id());\n\/\/ (int) 26\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->last_id());\n\/\/ (int) 26"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ( $this->last_insert_id ){\n      return str::is_buid($this->last_insert_id) ? bin2hex($this->last_insert_id) : $this->last_insert_id;\n    }\n    return false;\n  }",
            "startLine": 2447,
            "doc": {
                "description": "Return the last inserted ID.\n\n```php\n\\bbn\\x::dump($db->last_id());\n\/\/ (int) 26\n```",
                "params": [],
                "return": ""
            },
            "endLine": 2453,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "flush": {
            "name": "flush",
            "summary": "Deletes all the queries recorded and returns their (ex) number.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $num = \\count($this->queries);\n    $this->queries = [];\n    return $num;\n  }",
            "startLine": 2460,
            "doc": {
                "description": "Deletes all the queries recorded and returns their (ex) number.",
                "params": [],
                "return": ""
            },
            "endLine": 2465,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": []
        },
        "raw_query": {
            "name": "raw_query",
            "summary": "Executes the original PDO query function",
            "description": "```php\n\\bbn\\x::dump($db->raw_query());\n\/\/ (bool)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->raw_query());\n\/\/ (bool)"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return parent::query(...\\func_get_args());\n  }",
            "startLine": 2476,
            "doc": {
                "description": "Executes the original PDO query function\n\n```php\n\\bbn\\x::dump($db->raw_query());\n\/\/ (bool)\n```",
                "params": [],
                "return": ""
            },
            "endLine": 2479,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "new_id": {
            "name": "new_id",
            "summary": "Generate a new casual id based on the max number of characters of id's column structure in the given table",
            "description": "```php\n\\bbn\\x::dump($db->new_id('table_users', 18));\n\/\/ (int) 69991701\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->new_id('table_users', 18));\n\/\/ (int) 69991701"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $min = 1)\n  {\n    if ( \\count($tab['keys']['PRIMARY']['columns']) !== 1 ){\n      die(\"Error! Unique numeric primary key doesn't exist\");\n    }\n    if (\n      ($id_field = $tab['keys']['PRIMARY']['columns'][0]) &&\n      ($maxlength = $tab['fields'][$id_field]['maxlength'] )&&\n      ($maxlength > 1)\n    ){\n      $max = (10 ** $maxlength) - 1;\n      if ( $max >= mt_getrandmax() ){\n        $max = mt_getrandmax();\n      }\n      if ( ($max > $min) && ($table = $this->tfn($table, true)) ){\n        $i = 0;\n        do {\n          $id = random_int($min, $max);\n          \/** @todo *\/\n          \/*\n          if ( strpos($tab['fields'][$id_field]['type'], 'char') !== false ){\n            $id = substr(md5('bbn'.$id), 0, random_int(1, 10 ** $maxlength));\n          }\n          *\/\n          $i++;\n        }\n        while ( ($i < 100) && $this->select($table, [$id_field], [$id_field => $id]) );\n        return $id;\n      }\n    }\n    return null;\n  }",
            "startLine": 2494,
            "doc": {
                "description": "Generate a new casual id based on the max number of characters of id's column structure in the given table\n\n```php\n\\bbn\\x::dump($db->new_id('table_users', 18));\n\/\/ (int) 69991701\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$table",
                        "description": "The table's name."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$min"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Either get rid of th efunction or include the UID types"
                }
            },
            "endLine": 2525,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name."
                },
                {
                    "name": "min",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": ""
                }
            ]
        },
        "rselect_random": {
            "name": "rselect_random",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $fields = [], array $where = [])\n  {\n    if ( $this->check() && ($num = $this->count($table, $where)) ){\n      $args = $this->_add_kind($this->_set_start($this->_set_limit_1(\\func_get_args()), random_int(0, $num - 1)));\n      if ( $r = $this->_exec(...$args) ){\n        return $r->get_row();\n      }\n    }\n    return null;\n  }",
            "startLine": 2527,
            "doc": null,
            "endLine": 2536,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "select_random": {
            "name": "select_random",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $fields = [], array $where = [])\n  {\n    if ( $this->check() && ($num = $this->count($table, $where)) ){\n      $args = $this->_add_kind($this->_set_start($this->_set_limit_1(\\func_get_args()), random_int(0, $num - 1)));\n      if ( $r = $this->_exec(...$args) ){\n        return $r->get_obj();\n      }\n    }\n    return null;\n  }",
            "startLine": 2538,
            "doc": null,
            "endLine": 2547,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "stdClass",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "random_value": {
            "name": "random_value",
            "summary": "Returns a random value fitting the requested column's type",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($col, $table)\n  {\n    if ( ($tab = $this->modelize($table)) && isset($tab['fields'][$col]) ){\n      foreach ( $tab['keys'] as $key => $cfg ){\n        if (\n          $cfg['unique'] &&\n          !empty($cfg['ref_column']) &&\n          (\\count($cfg['columns']) === 1) &&\n          ($col === $cfg['columns'][0])\n        ){\n          return ($num = $this->count($cfg['ref_column'])) ? $this->select_one([\n            'tables' [$cfg['ref_table']],\n            'fields' => [$cfg['ref_column']],\n            'start' => random_int(0, $num - 1)\n          ]) : null;\n        }\n      }\n      switch ( $tab['fields'][$col]['type'] ){\n        case 'int':\n          if ( ($tab['fields'][$col]['maxlength'] === 1) && !$tab['fields'][$col]['signed'] ){\n            $val = microtime(true) % 2 === 0 ? 1 : 0;\n          }\n          else {\n            $max = 10 ** $tab['fields'][$col]['maxlength'] - 1;\n            if ( $max > mt_getrandmax() ){\n              $max = mt_getrandmax();\n            }\n            if ( $tab['fields'][$col]['signed'] ){\n              $max \/= 2;\n            }\n            $min = $tab['fields'][$col]['signed'] ? -$max : 0;\n            $val = random_int($min, $max);\n          }\n          break;\n        case 'float':\n        case 'double':\n        case 'decimal':\n          break;\n        case 'varchar':\n          break;\n        case 'text':\n          break;\n        case 'date':\n          break;\n        case 'datetime':\n          break;\n        case 'timestamp':\n          break;\n        case 'time':\n          break;\n        case 'year':\n          break;\n        case 'blob':\n          break;\n        case 'binary':\n          break;\n        case 'varbinary':\n          break;\n        case 'enum':\n          break;\n      }\n    }\n    return $val;\n  }",
            "startLine": 2557,
            "doc": {
                "description": "Returns a random value fitting the requested column's type",
                "params": [
                    {
                        "tag": "param",
                        "type": "$col"
                    },
                    {
                        "tag": "param",
                        "type": "$table"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "This great function has to be done properly"
                }
            },
            "endLine": 2620,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "count_queries": {
            "name": "count_queries",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return \\count($this->queries);\n  }",
            "startLine": 2625,
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "endLine": 2628,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": []
        },
        "get_one": {
            "name": "get_one",
            "summary": "Executes the given query with given vars, and extracts the first cell's result.",
            "description": "```php\n\\bbn\\x::dump($db->get_one(\"SELECT name FROM table_users WHERE id>?\", 138));\n\/\/ (string) John\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->get_one(\"SELECT name FROM table_users WHERE id>?\", 138));\n\/\/ (string) John"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ( $r = $this->query(...\\func_get_args()) ){\n      return $r->fetchColumn(0);\n    }\n    return false;\n  }",
            "startLine": 2650,
            "doc": {
                "description": "Executes the given query with given vars, and extracts the first cell's result.\n\n```php\n\\bbn\\x::dump($db->get_one(\"SELECT name FROM table_users WHERE id>?\", 138));\n\/\/ (string) John\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "query"
                    },
                    {
                        "tag": "param",
                        "type": "mixed",
                        "description": "values"
                    }
                ],
                "return": ""
            },
            "endLine": 2656,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "get_var": {
            "name": "get_var",
            "summary": "Execute the given query with given vars, and extract the first cell's result.",
            "description": "(similar to {@link get_one()})\n\n```php\n\\bbn\\x::dump($db->get_var(\"SELECT telephone FROM table_users WHERE id>?\", 1));\n\/\/ (int) 123554154\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "(similar to {@link get_one()})"
                },
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->get_var(\"SELECT telephone FROM table_users WHERE id>?\", 1));\n\/\/ (int) 123554154"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 2671,
            "doc": {
                "description": "Execute the given query with given vars, and extract the first cell's result.\n(similar to {@link get_one()})\n\n```php\n\\bbn\\x::dump($db->get_var(\"SELECT telephone FROM table_users WHERE id>?\", 1));\n\/\/ (int) 123554154\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "query"
                    },
                    {
                        "tag": "param",
                        "type": "mixed",
                        "description": "values"
                    }
                ],
                "return": ""
            },
            "endLine": 2673,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "get_key_val": {
            "name": "get_key_val",
            "summary": "Return an array indexed on the first field of the request.",
            "description": "The value will be an array if the request has more than two fields.\n\n```php\n\\bbn\\x::dump($db->get_key_val(\"SELECT name,id_group FROM table_users\"));\n\/*\n(array)[\n \"John\" => 1,\n \"Michael\" => 1,\n \"Barbara\" => 1\n  ]\n\n\\bbn\\x::dump($db->get_key_val(\"SELECT name, surname, id FROM table_users WHERE id > 2 \"));\n\/*\n(array)[\n  \"John\" => [\n   \"surname\" => \"Brown\",\n   \"id\" => 3\n  ],\n  \"Michael\" => [\n   \"surname\" => \"Smith\",\n   \"id\" => 4\n  ]\n  ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "The value will be an array if the request has more than two fields."
                },
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->get_key_val(\"SELECT name,id_group FROM table_users\"));\n\/*\n(array)[\n \"John\" => 1,\n \"Michael\" => 1,\n \"Barbara\" => 1\n  ]\n\n\\bbn\\x::dump($db->get_key_val(\"SELECT name, surname, id FROM table_users WHERE id > 2 \"));\n\/*\n(array)[\n  \"John\" => [\n   \"surname\" => \"Brown\",\n   \"id\" => 3\n  ],\n  \"Michael\" => [\n   \"surname\" => \"Smith\",\n   \"id\" => 4\n  ]\n  ]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ( $r = $this->query(...\\func_get_args()) ){\n      if ( $rows = $r->get_rows() ){\n        return x::index_by_first_val($rows);\n      }\n      return [];\n    }\n    return null;\n  }",
            "startLine": 2706,
            "doc": {
                "description": "Return an array indexed on the first field of the request.\nThe value will be an array if the request has more than two fields.\n\n```php\n\\bbn\\x::dump($db->get_key_val(\"SELECT name,id_group FROM table_users\"));\n\/*\n(array)[\n \"John\" => 1,\n \"Michael\" => 1,\n \"Barbara\" => 1\n  ]\n\n\\bbn\\x::dump($db->get_key_val(\"SELECT name, surname, id FROM table_users WHERE id > 2 \"));\n\/*\n(array)[\n  \"John\" => [\n   \"surname\" => \"Brown\",\n   \"id\" => 3\n  ],\n  \"Michael\" => [\n   \"surname\" => \"Smith\",\n   \"id\" => 4\n  ]\n  ]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "query"
                    },
                    {
                        "tag": "param",
                        "type": "mixed",
                        "description": "values"
                    }
                ],
                "return": ""
            },
            "endLine": 2715,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_col_array": {
            "name": "get_col_array",
            "summary": "Return an array with the values of single field resulting from the query.",
            "description": "```php\n\\bbn\\x::dump($db->get_col_array(\"SELECT id FROM table_users\"));\n\/*\n(array)[1, 2, 3, 4]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->get_col_array(\"SELECT id FROM table_users\"));\n\/*\n(array)[1, 2, 3, 4]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ( $r = $this->get_by_columns(...\\func_get_args()) ){\n      return array_values(current($r));\n    }\n    return [];\n  }",
            "startLine": 2730,
            "doc": {
                "description": "Return an array with the values of single field resulting from the query.\n\n```php\n\\bbn\\x::dump($db->get_col_array(\"SELECT id FROM table_users\"));\n\/*\n(array)[1, 2, 3, 4]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "query"
                    },
                    {
                        "tag": "param",
                        "type": "mixed",
                        "description": "values"
                    }
                ],
                "return": ""
            },
            "endLine": 2736,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "select": {
            "name": "select",
            "summary": "Returns the first row resulting from the query as an object.",
            "description": "```php\n\\bbn\\x::dump($db->select('table_users', ['name', 'surname'], [['id','>','2']]));\n\/*\n(object){\n \"name\": \"John\",\n \"surname\": \"Smith\",\n}\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->select('table_users', ['name', 'surname'], [['id','>','2']]));\n\/*\n(object){\n \"name\": \"John\",\n \"surname\": \"Smith\",\n}"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], $start = 0)\n  {\n    $args = $this->_add_kind($this->_set_limit_1(\\func_get_args()));\n    if ( $r = $this->_exec(...$args) ){\n      if ( !is_object($r) ){\n        $this->log([$args, $this->process_cfg($args)]);\n      }\n      else{\n        return $r->get_object();\n      }\n    }\n    return null;\n  }",
            "startLine": 2765,
            "doc": {
                "description": "Returns the first row resulting from the query as an object.\n\n```php\n\\bbn\\x::dump($db->select('table_users', ['name', 'surname'], [['id','>','2']]));\n\/*\n(object){\n \"name\": \"John\",\n \"surname\": \"Smith\",\n}\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$fields",
                        "description": "The fields' name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": ""
            },
            "endLine": 2777,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": [
                "stdClass",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ]
        },
        "select_all": {
            "name": "select_all",
            "summary": "Return table's rows resulting from the query as an array of objects.",
            "description": "```php\n\\bbn\\x::dump($db->select_all(\"tab_users\", [\"id\", \"name\", \"surname\"],[[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n  Object stdClass: df {\n   \"id\" => 2,\n   \"name\" => \"John\",\n   \"surname\" => \"Smith\",\n   },\n  Object stdClass: df {\n   \"id\" => 3,\n   \"name\" => \"Thomas\",\n   \"surname\" => \"Jones\",\n  }\n  ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->select_all(\"tab_users\", [\"id\", \"name\", \"surname\"],[[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n  Object stdClass: df {\n   \"id\" => 2,\n   \"name\" => \"John\",\n   \"surname\" => \"Smith\",\n   },\n  Object stdClass: df {\n   \"id\" => 3,\n   \"name\" => \"Thomas\",\n   \"surname\" => \"Jones\",\n  }\n  ]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0)\n  {\n    if ( $r = $this->_exec(...$this->_add_kind(\\func_get_args())) ){\n      return $r->get_objects();\n    }\n    return null;\n  }",
            "startLine": 2807,
            "doc": {
                "description": "Return table's rows resulting from the query as an array of objects.\n\n```php\n\\bbn\\x::dump($db->select_all(\"tab_users\", [\"id\", \"name\", \"surname\"],[[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n  Object stdClass: df {\n   \"id\" => 2,\n   \"name\" => \"John\",\n   \"surname\" => \"Smith\",\n   },\n  Object stdClass: df {\n   \"id\" => 3,\n   \"name\" => \"Thomas\",\n   \"surname\" => \"Jones\",\n  }\n  ]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$fields",
                        "description": "The fields' name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "The \"limit\" condition, default: 0"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": ""
            },
            "endLine": 2813,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"limit\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ]
        },
        "iselect": {
            "name": "iselect",
            "summary": "Return the first row resulting from the query as a numeric array.",
            "description": "```php\n\\bbn\\x::dump($db->iselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n   4,\n  \"Jack\",\n   \"Stewart\"\n  ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->iselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n   4,\n  \"Jack\",\n   \"Stewart\"\n  ]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], $start = 0)\n  {\n    if ( $r = $this->_exec(...$this->_add_kind($this->_set_limit_1(\\func_get_args()))) ){\n      return $r->get_irow();\n    }\n    return null;\n  }",
            "startLine": 2835,
            "doc": {
                "description": "Return the first row resulting from the query as a numeric array.\n\n```php\n\\bbn\\x::dump($db->iselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n   4,\n  \"Jack\",\n   \"Stewart\"\n  ]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$fields",
                        "description": "The fields' name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": ""
            },
            "endLine": 2841,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ]
        },
        "iselect_all": {
            "name": "iselect_all",
            "summary": "Return the searched rows as an array of numeric arrays.",
            "description": "```php\n\\bbn\\x::dump($db->iselect_all(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]],[\"id\" => \"ASC\"],2));\n\/*\n(array)[\n   [\n  2,\n  \"John\",\n  \"Smith\",\n   ],\n   [\n  3,\n  \"Thomas\",\n  \"Jones\",\n   ]\n  ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->iselect_all(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]],[\"id\" => \"ASC\"],2));\n\/*\n(array)[\n   [\n  2,\n  \"John\",\n  \"Smith\",\n   ],\n   [\n  3,\n  \"Thomas\",\n  \"Jones\",\n   ]\n  ]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0)\n  {\n    if ( $r = $this->_exec(...$this->_add_kind(\\func_get_args())) ){\n      return $r->get_irows();\n    }\n    return null;\n  }",
            "startLine": 2871,
            "doc": {
                "description": "Return the searched rows as an array of numeric arrays.\n\n```php\n\\bbn\\x::dump($db->iselect_all(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]],[\"id\" => \"ASC\"],2));\n\/*\n(array)[\n   [\n  2,\n  \"John\",\n  \"Smith\",\n   ],\n   [\n  3,\n  \"Thomas\",\n  \"Jones\",\n   ]\n  ]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$fields",
                        "description": "The fields's name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "description": "| boolean The \"order\" condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "The \"limit\" condition, default: 0"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": ""
            },
            "endLine": 2877,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "| boolean The \"order\" condition, default: false"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"limit\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ]
        },
        "rselect": {
            "name": "rselect",
            "summary": "Return the first row resulting from the query as an indexed array.",
            "description": "```php\n\\bbn\\x::dump($db->rselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [\"id\", \">\", 1], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n   \"id\" => 4,\n   \"name\" => \"John\",\n   \"surname\" => \"Smith\"\n  ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->rselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [\"id\", \">\", 1], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n   \"id\" => 4,\n   \"name\" => \"John\",\n   \"surname\" => \"Smith\"\n  ]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], $start = 0)\n  {\n    if ( $r = $this->_exec(...$this->_add_kind($this->_set_limit_1(\\func_get_args()))) ){\n      \n      return $r->get_row();\n    }\n    return null;\n  }",
            "startLine": 2899,
            "doc": {
                "description": "Return the first row resulting from the query as an indexed array.\n\n```php\n\\bbn\\x::dump($db->rselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [\"id\", \">\", 1], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n   \"id\" => 4,\n   \"name\" => \"John\",\n   \"surname\" => \"Smith\"\n  ]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$fields",
                        "description": "The fields' name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array|boolean",
                        "name": "$order",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": ""
            },
            "endLine": 2906,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ]
        },
        "rselect_all": {
            "name": "rselect_all",
            "summary": "Return table's rows as an array of indexed arrays.",
            "description": "```php\n\\bbn\\x::dump($db->rselect_all(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n   [\n   \"id\" => 2,\n   \"name\" => \"John\",\n   \"surname\" => \"Smith\",\n   ],\n   [\n   \"id\" => 3,\n   \"name\" => \"Thomas\",\n   \"surname\" => \"Jones\",\n   ]\n  ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->rselect_all(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n   [\n   \"id\" => 2,\n   \"name\" => \"John\",\n   \"surname\" => \"Smith\",\n   ],\n   [\n   \"id\" => 3,\n   \"name\" => \"Thomas\",\n   \"surname\" => \"Jones\",\n   ]\n  ]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0)\n  {\n    if ( $r = $this->_exec(...$this->_add_kind(\\func_get_args())) ){\n      if ( method_exists($r, 'get_rows') ){\n        return $r->get_rows();\n      }\n      $this->log('ERROR IN RSELECT_ALL', $r);\n    }\n    return [];\n  }",
            "startLine": 2936,
            "doc": {
                "description": "Return table's rows as an array of indexed arrays.\n\n```php\n\\bbn\\x::dump($db->rselect_all(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n   [\n   \"id\" => 2,\n   \"name\" => \"John\",\n   \"surname\" => \"Smith\",\n   ],\n   [\n   \"id\" => 3,\n   \"name\" => \"Thomas\",\n   \"surname\" => \"Jones\",\n   ]\n  ]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$fields",
                        "description": "The fields' name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "The \"limit\" condition, default: 0"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": ""
            },
            "endLine": 2945,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "condition, default: false"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"limit\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ]
        },
        "select_one": {
            "name": "select_one",
            "summary": "Return a single value",
            "description": "```php\n\\bbn\\x::dump($db->select_one(\"tab_users\", \"name\", [[\"id\", \">\", 1]], [\"id\" => \"DESC\"], 2));\n (string) 'Michael'\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->select_one(\"tab_users\", \"name\", [[\"id\", \">\", 1]], [\"id\" => \"DESC\"], 2));\n (string) 'Michael'"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $field = NULL, array $where = [], array $order = [], $start = 0)\n  {\n    if ( $r = $this->_exec(...$this->_add_kind($this->_set_limit_1(\\func_get_args()))) ){\n      if ( method_exists($r, 'get_irow') ){\n        return ($a = $r->get_irow()) ? $a[0] : false;\n      }\n      $this->log('ERROR IN SELECT_ONE', $this->get_last_cfg(), $r, $this->_add_kind($this->_set_limit_1(\\func_get_args())));\n    }\n    return false;\n  }",
            "startLine": 2962,
            "doc": {
                "description": "Return a single value\n\n```php\n\\bbn\\x::dump($db->select_one(\"tab_users\", \"name\", [[\"id\", \">\", 1]], [\"id\" => \"DESC\"], 2));\n (string) 'Michael'\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$field",
                        "description": "The field's name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": ""
            },
            "endLine": 2971,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ]
        },
        "select_union": {
            "name": "select_union",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $union, array $fields = [], array $where = [], array $order = [], $start = 0)\n  {\n    $cfgs = [];\n    $sql = 'SELECT ';\n    if ( empty($fields) ){\n      $sql .= '* ';\n    }\n    else{\n      foreach ( $fields as $i => $f ){\n        if ( $i ){\n          $sql .= ', ';\n        }\n        $sql .= $this->csn($f, true);\n      }\n    }\n    $sql .= ' FROM (('.PHP_EOL;\n    $vals = [];\n    $i = 0;\n    foreach ( $union as $u ){\n      $cfg = $this->process_cfg($this->_add_kind([$u]));\n      if ( $cfg && $cfg['sql'] ){\n        \/** @todo From here needs to analyze the where array to the light of the tables' config *\/\n        if ( !empty($where) ){\n          if ( empty($fields) ){\n            $fields = $cfg['fields'];\n          }\n          foreach ( $fields as $k => $f ){\n            if ( isset($cfg['available_fields'][$f]) ){\n              if ( $cfg['available_fields'][$f] && ($t = $cfg['models'][$cfg['available_fields'][$f]])\n              ){\n                die(var_dump($t['fields'][$cfg['fields'][$f] ?? $this->csn($f)]));\n              }\n            }\n          }\n        }\n        if ( $i ){\n          $sql .= PHP_EOL.') UNION ('.PHP_EOL;\n        }\n        $sql .= $cfg['sql'];\n        foreach ( $cfg['values'] as $v ){\n          $vals[] = $v;\n        }\n        $i++;\n      }\n    }\n    $sql .= PHP_EOL.')) AS t';\n    return $this->get_rows($sql, ...$vals);\n    \/\/echo nl2br($sql);\n    return [];\n  }",
            "startLine": 2973,
            "doc": null,
            "endLine": 3022,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "union",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "count": {
            "name": "count",
            "summary": "Return the number of records in the table corresponding to the $where condition (non mandatory).",
            "description": "```php\n\\bbn\\x::dump($db->count('table_users', ['name' => 'John']));\n\/\/ (int) 2\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->count('table_users', ['name' => 'John']));\n\/\/ (int) 2"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $where = [])\n  {\n    $args = \\is_array($table) && (isset($table['tables']) || isset($table['table'])) ? $table : [\n      'tables' => [$table],\n      'where' => $where\n    ];\n    $args['count'] = true;\n    if ( !empty($args['bbn_db_processed']) ){\n      unset($args['bbn_db_processed']);\n    }\n    if ( \\is_object($r = $this->_exec($args)) ){\n      $a = $r->get_irow();\n      return $a ? (int)$a[0] : null;\n    }\n    return null;\n  }",
            "startLine": 3036,
            "doc": {
                "description": "Return the number of records in the table corresponding to the $where condition (non mandatory).\n\n```php\n\\bbn\\x::dump($db->count('table_users', ['name' => 'John']));\n\/\/ (int) 2\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    }
                ],
                "return": ""
            },
            "endLine": 3051,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                }
            ]
        },
        "select_all_by_keys": {
            "name": "select_all_by_keys",
            "summary": "Return an array indexed on the first field of the request.",
            "description": "The value will be an array if the request has more than two fields.\nReturn the same value as \"get_key_val\".\n\n```php\n\\bbn\\x::dump($db->select_all_by_keys(\"table_users\", [\"name\",\"id\",\"surname\"], [[\"id\", \">\", \"1\"]], [\"id\" => \"ASC\"]);\n\/*\n(array)[\n  \"John\" => [\n   \"surname\" => \"Brown\",\n   \"id\" => 3\n   ],\n  \"Michael\" => [\n   \"surname\" => \"Smith\",\n   \"id\" => 4\n  ]\n ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "The value will be an array if the request has more than two fields.\nReturn the same value as \"get_key_val\"."
                },
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->select_all_by_keys(\"table_users\", [\"name\",\"id\",\"surname\"], [[\"id\", \">\", \"1\"]], [\"id\" => \"ASC\"]);\n\/*\n(array)[\n  \"John\" => [\n   \"surname\" => \"Brown\",\n   \"id\" => 3\n   ],\n  \"Michael\" => [\n   \"surname\" => \"Smith\",\n   \"id\" => 4\n  ]\n ]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0)\n  {\n    if ( $rows = $this->rselect_all($table, $fields, $where, $order, $limit, $start) ){\n      return x::index_by_first_val($rows);\n    }\n    return $this->check() ? [] : null;\n  }",
            "startLine": 3081,
            "doc": {
                "description": "Return an array indexed on the first field of the request.\nThe value will be an array if the request has more than two fields.\nReturn the same value as \"get_key_val\".\n\n```php\n\\bbn\\x::dump($db->select_all_by_keys(\"table_users\", [\"name\",\"id\",\"surname\"], [[\"id\", \">\", \"1\"]], [\"id\" => \"ASC\"]);\n\/*\n(array)[\n  \"John\" => [\n   \"surname\" => \"Brown\",\n   \"id\" => 3\n   ],\n  \"Michael\" => [\n   \"surname\" => \"Smith\",\n   \"id\" => 4\n  ]\n ]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "The fields's name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array|boolean",
                        "name": "$order",
                        "description": "The \"order\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "The $limit condition, default: 0"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The $limit condition, default: 0"
                    }
                ],
                "return": ""
            },
            "endLine": 3087,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The $limit condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The $limit condition, default: 0"
                }
            ]
        },
        "stat": {
            "name": "stat",
            "summary": "Return an array with the count of values corresponding to the where conditions.",
            "description": "```php\n\\bbn\\x::dump($db->stat('table_user', 'name', ['name' => '%n']));\n\/* (array)\n[\n [\n \"num\" => 1,\n \"name\" => \"alan\",\n ], [\n \"num\" => 1,\n \"name\" => \"karen\",\n ],\n]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->stat('table_user', 'name', ['name' => '%n']));\n\/* (array)\n[\n [\n \"num\" => 1,\n \"name\" => \"alan\",\n ], [\n \"num\" => 1,\n \"name\" => \"karen\",\n ],\n]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $column, array $where = [], array $order = [])\n  {\n      return $this->rselect_all([\n        'tables' => [$table],\n        'fields' => [\n          $column,\n          'num' => 'COUNT(*)'\n        ],\n        'where' => $where,\n        'order' => $order,\n        'group_by' => [$column]\n      ]);\n    }\n    return null;\n  }",
            "startLine": 3112,
            "doc": {
                "description": "Return an array with the count of values corresponding to the where conditions.\n\n```php\n\\bbn\\x::dump($db->stat('table_user', 'name', ['name' => '%n']));\n\/* (array)\n[\n [\n \"num\" => 1,\n \"name\" => \"alan\",\n ], [\n \"num\" => 1,\n \"name\" => \"karen\",\n ],\n]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$column",
                        "description": "The field's name."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition."
                    }
                ],
                "return": ""
            },
            "endLine": 3126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array."
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The field's name."
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition."
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition."
                }
            ]
        },
        "get_field_values": {
            "name": "get_field_values",
            "summary": "Return the unique values of a column of a table as a numeric indexed array.",
            "description": "```php\n\\bbn\\x::dump($db->get_field_values(\"table_users\", \"surname\", [['id', '>', '2']], 1, 1));\n\/\/ (array) [\"Smiths\", \"White\"]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->get_field_values(\"table_users\", \"surname\", [['id', '>', '2']], 1, 1));\n\/\/ (array) [\"Smiths\", \"White\"]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $field = NULL, array $where = [], array $order = [])\n  {\n    return $this->get_column_values($table, $field, $where, $order);\n  }",
            "startLine": 3142,
            "doc": {
                "description": "Return the unique values of a column of a table as a numeric indexed array.\n\n```php\n\\bbn\\x::dump($db->get_field_values(\"table_users\", \"surname\", [['id', '>', '2']], 1, 1));\n\/\/ (array) [\"Smiths\", \"White\"]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$field",
                        "description": "The field's name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition"
                    }
                ],
                "return": "| false"
            },
            "endLine": 3145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                }
            ]
        },
        "count_field_values": {
            "name": "count_field_values",
            "summary": "Return a count of identical values in a field as array, reporting a structure type 'num' - 'val'.",
            "description": "```php\n\\bbn\\x::dump($db->count_field_values('table_users','surname',[['name','=','John']]));\n\/\/ (array) [\"num\" => 2, \"val\" => \"John\"]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->count_field_values('table_users','surname',[['name','=','John']]));\n\/\/ (array) [\"num\" => 2, \"val\" => \"John\"]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $field = NULL, array $where = [], array $order = [])\n  {\n      $args = $table;\n      $field = array_values($table['fields'])[0];\n    }\n    else{\n      $args = [\n        'tables' => [$table],\n        'where' => $where,\n        'order' => $order\n      ];\n    }\n    $args = array_merge($args, [\n      'kind' => 'SELECT',\n      'fields' => [\n        'val' => $field,\n        'num' => 'COUNT(*)'\n      ],\n      'group_by' => [$field]\n    ]);\n    return $this->rselect_all($args);\n  }",
            "startLine": 3161,
            "doc": {
                "description": "Return a count of identical values in a field as array, reporting a structure type 'num' - 'val'.\n\n```php\n\\bbn\\x::dump($db->count_field_values('table_users','surname',[['name','=','John']]));\n\/\/ (array) [\"num\" => 2, \"val\" => \"John\"]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$field",
                        "description": "The field's name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition"
                    }
                ],
                "return": "| false"
            },
            "endLine": 3182,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                }
            ]
        },
        "get_column_values": {
            "name": "get_column_values",
            "summary": "Return a numeric indexed array with the values of the unique column ($field) from the selected $table",
            "description": "```php\n\\bbn\\x::dump($db->get_column_values('table_users','surname',['id','>',1]));\n\/*\narray [\n  \"Smith\",\n  \"Jones\",\n  \"Williams\",\n  \"Taylor\"\n]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->get_column_values('table_users','surname',['id','>',1]));\n\/*\narray [\n  \"Smith\",\n  \"Jones\",\n  \"Williams\",\n  \"Taylor\"\n]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $field = NULL, array $where = [], array $order = [])\n  {\n    $res = null;\n    if ($this->check()) {\n      $res = [];\n      if ( \\is_array($table) && isset($table['fields']) && \\is_array($table['fields']) && !empty($table['fields'][0]) ){\n        array_splice($table['fields'], 0, 1, 'DISTINCT '.(string)$table['fields'][0]);\n      }\n      else if ( \\is_string($table) && \\is_string($field) && (stripos($field, 'DISTINCT') !== 0) ){\n        $field = 'DISTINCT '.$field;\n      }\n      if ( $rows = $this->iselect_all($table, $field, $where, $order) ){\n        foreach ( $rows as $row ){\n          $res[] = $row[0];\n        }\n      }\n    }\n    return $res;\n  }",
            "startLine": 3204,
            "doc": {
                "description": "Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n\n```php\n\\bbn\\x::dump($db->get_column_values('table_users','surname',['id','>',1]));\n\/*\narray [\n  \"Smith\",\n  \"Jones\",\n  \"Williams\",\n  \"Taylor\"\n]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$field",
                        "description": "The field's name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition"
                    }
                ],
                "return": ""
            },
            "endLine": 3222,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                }
            ]
        },
        "get_values_count": {
            "name": "get_values_count",
            "summary": "Return a string with the sql query to count equal values in a field of the table.",
            "description": "```php\n\\bbn\\x::dump($db->get_values_count('table_users','name',['surname','=','smith']));\n\/*\n(string)\n SELECT COUNT(*) AS num, `name` AS val FROM `db_example`.`table_users`\n  GROUP BY `name`\n  ORDER BY `name`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "```php\n\\bbn\\x::dump($db->get_values_count('table_users','name',['surname','=','smith']));\n\/*\n(string)\n SELECT COUNT(*) AS num, `name` AS val FROM `db_example`.`table_users`\n  GROUP BY `name`\n  ORDER BY `name`\n```"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $field, array $where, $order)\n  {\n    return $this->count_field_values($table, $field, $where, $order);\n  }",
            "startLine": 3242,
            "doc": {
                "description": "Return a string with the sql query to count equal values in a field of the table.\n\n```php\n\\bbn\\x::dump($db->get_values_count('table_users','name',['surname','=','smith']));\n\/*\n(string)\n SELECT COUNT(*) AS num, `name` AS val FROM `db_example`.`table_users`\n  GROUP BY `name`\n  ORDER BY `name`\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$field",
                        "description": "The field's name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition"
                    }
                ],
                "return": ""
            },
            "endLine": 3245,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": true,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The \"order\" condition"
                }
            ]
        },
        "insert": {
            "name": "insert",
            "summary": "Inserts row(s) in a table.",
            "description": "<code>\n$db->insert(\"table_users\", [\n  [\"name\" => \"Ted\"],\n  [\"surname\" => \"McLow\"]\n ]);\n<\/code>\n\n<code>\n$db->insert(\"table_users\", [\n  [\"name\" => \"July\"],\n  [\"surname\" => \"O'neill\"]\n ], [\n  [\"name\" => \"Peter\"],\n  [\"surname\" => \"Griffin\"]\n ], [\n  [\"name\" => \"Marge\"],\n  [\"surname\" => \"Simpson\"]\n ]);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<code>\n$db->insert(\"table_users\", [\n  [\"name\" => \"Ted\"],\n  [\"surname\" => \"McLow\"]\n ]);\n<\/code>\n\n<code>\n$db->insert(\"table_users\", [\n  [\"name\" => \"July\"],\n  [\"surname\" => \"O'neill\"]\n ], [\n  [\"name\" => \"Peter\"],\n  [\"surname\" => \"Griffin\"]\n ], [\n  [\"name\" => \"Marge\"],\n  [\"surname\" => \"Simpson\"]\n ]);\n<\/code>"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $values = NULL, $ignore = false)\n  {\n    if ( \\is_array($table) && isset($table['values']) ){\n      $values = $table['values'];\n    }\n    \/\/ Array of arrays\n    if (\n      \\is_array($values) &&\n      count($values) &&\n      !x::is_assoc($values) &&\n      \\is_array($values[0])\n    ){\n      $res = 0;\n\n      foreach ( $values as $v ){\n        $res += $this->insert($table, $v, $ignore);\n      }\n      return $res;\n    }\n\n    $cfg = \\is_array($table) ? $table : [\n      'tables' => [$table],\n      'fields' => $values,\n      'ignore' => $ignore\n    ];\n    $cfg['kind'] = 'INSERT';\n    return $this->_exec($cfg);\n  }",
            "startLine": 3284,
            "doc": {
                "description": "Inserts row(s) in a table.\n\n<code>\n$db->insert(\"table_users\", [\n  [\"name\" => \"Ted\"],\n  [\"surname\" => \"McLow\"]\n ]);\n<\/code>\n\n<code>\n$db->insert(\"table_users\", [\n  [\"name\" => \"July\"],\n  [\"surname\" => \"O'neill\"]\n ], [\n  [\"name\" => \"Peter\"],\n  [\"surname\" => \"Griffin\"]\n ], [\n  [\"name\" => \"Marge\"],\n  [\"surname\" => \"Simpson\"]\n ]);\n<\/code>",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table name or the configuration array."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$values",
                        "description": "The values to insert."
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$ignore",
                        "description": "If true, controls if the row is already existing and ignores it."
                    }
                ],
                "return": "Number affected rows."
            },
            "endLine": 3311,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The values to insert."
                },
                {
                    "name": "ignore",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If true, controls if the row is already existing and ignores it."
                }
            ]
        },
        "insert_update": {
            "name": "insert_update",
            "summary": "If not exist inserts row(s) in a table, else update.",
            "description": "<code>\n$db->insert_update(\n \"table_users\",\n [\n  'id' => '12',\n  'name' => 'Frank'\n ]\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<code>\n$db->insert_update(\n \"table_users\",\n [\n  'id' => '12',\n  'name' => 'Frank'\n ]\n);\n<\/code>"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $values = NULL)\n  {\n    if ( \\is_array($table) && isset($table['values']) ){\n      $values = $table['values'];\n    }\n    if ( !x::is_assoc($values) ){\n      $res = 0;\n      foreach ( $values as $v ){\n        $res += $this->insert_update($table, $v);\n      }\n      return $res;\n    }\n    $keys = $this->get_keys($table);\n    $unique = [];\n    foreach ( $keys['keys'] as $k ){\n      \/\/ Checking each unique key\n      if ( $k['unique'] ){\n        $i = 0;\n        foreach ( $k['columns'] as $c ){\n          if ( isset($values[$c]) ){\n            $unique[$c] = $values[$c];\n            $i++;\n          }\n        }\n        \/\/ Only if the number of known field values matches the number of columns qhich are parts of the unique key\n        if ( ($i === \\count($k['columns'])) && $this->count($table, $unique) ){\n          \/\/ Removing unique matching fields from the values (as it is the where)\n          foreach ( $unique as $f => $v ){\n            unset($values[$f]);\n          }\n          \/\/ For updating\n          return $this->update($table, $values, $unique);\n        }\n      }\n    }\n    \/\/ No need to update, inserting\n    return $this->insert($table, $values);\n  }",
            "startLine": 3331,
            "doc": {
                "description": "If not exist inserts row(s) in a table, else update.\n\n<code>\n$db->insert_update(\n \"table_users\",\n [\n  'id' => '12',\n  'name' => 'Frank'\n ]\n);\n<\/code>",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table name or the configuration array."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$values",
                        "description": "The values to insert."
                    }
                ],
                "return": "The number of rows inserted or updated."
            },
            "endLine": 3368,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The values to insert."
                }
            ]
        },
        "update": {
            "name": "update",
            "summary": "Updates row(s) in a table.",
            "description": "<code>\n$db->update(\n \"table_users\",\n [\n  ['name' => 'Frank'],\n  ['surname' => 'Red']\n ],\n ['id' => '127']\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<code>\n$db->update(\n \"table_users\",\n [\n  ['name' => 'Frank'],\n  ['surname' => 'Red']\n ],\n ['id' => '127']\n);\n<\/code>"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $values = NULL, array $where = NULL, $ignore = false)\n  {\n    $cfg = \\is_array($table) ? $table : [\n      'tables' => [$table],\n      'where' => $where,\n      'fields' => $values,\n      'ignore' => $ignore\n    ];\n    $cfg['kind'] = 'UPDATE';\n    return $this->_exec($cfg);\n  }",
            "startLine": 3391,
            "doc": {
                "description": "Updates row(s) in a table.\n\n<code>\n$db->update(\n \"table_users\",\n [\n  ['name' => 'Frank'],\n  ['surname' => 'Red']\n ],\n ['id' => '127']\n);\n<\/code>",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table name or the configuration array."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$values",
                        "description": "The new value(s)."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition."
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$ignore",
                        "description": "If IGNORE should be added to the statement"
                    }
                ],
                "return": "The number of rows updated."
            },
            "endLine": 3401,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The new value(s)."
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition."
                },
                {
                    "name": "ignore",
                    "position": 3,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If IGNORE should be added to the statement"
                }
            ]
        },
        "update_ignore": {
            "name": "update_ignore",
            "summary": "If exist updates row(s) in a table, else ignore.",
            "description": "<code>\n$db->update_ignore(\n \"table_users\",\n [\n  ['name' => 'Frank'],\n  ['surname' => 'Red']\n ],\n ['id' => '20']\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<code>\n$db->update_ignore(\n \"table_users\",\n [\n  ['name' => 'Frank'],\n  ['surname' => 'Red']\n ],\n ['id' => '20']\n);\n<\/code>"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $values = NULL, array $where = NULL)\n  {\n    return $this->update($table, $values, $where, true);\n  }",
            "startLine": 3423,
            "doc": {
                "description": "If exist updates row(s) in a table, else ignore.\n\n<code>\n$db->update_ignore(\n \"table_users\",\n [\n  ['name' => 'Frank'],\n  ['surname' => 'Red']\n ],\n ['id' => '20']\n);\n<\/code>",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table name or the configuration array."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$values"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition."
                    }
                ],
                "return": "The number of rows deleted."
            },
            "endLine": 3426,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition."
                }
            ]
        },
        "delete": {
            "name": "delete",
            "summary": "Deletes row(s) in a table.",
            "description": "<code>\n$db->delete(\"table_users\", ['id' => '32']);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<code>\n$db->delete(\"table_users\", ['id' => '32']);\n<\/code>"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $where = NULL, $ignore = false)\n  {\n    $cfg = \\is_array($table) ? $table : [\n      'tables' => [$table],\n      'where' => $where,\n      'ignore' => $ignore\n    ];\n    $cfg['kind'] = 'DELETE';\n    return $this->_exec($cfg);\n  }",
            "startLine": 3441,
            "doc": {
                "description": "Deletes row(s) in a table.\n\n<code>\n$db->delete(\"table_users\", ['id' => '32']);\n<\/code>",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table name or the configuration array."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition."
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$ignore",
                        "description": "default: false."
                    }
                ],
                "return": "The number of rows deleted."
            },
            "endLine": 3450,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition."
                },
                {
                    "name": "ignore",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "default: false."
                }
            ]
        },
        "delete_ignore": {
            "name": "delete_ignore",
            "summary": "If exist deletess row(s) in a table, else ignore.",
            "description": "<code>\n$db->delete_ignore(\n \"table_users\",\n ['id' => '20']\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<code>\n$db->delete_ignore(\n \"table_users\",\n ['id' => '20']\n);\n<\/code>"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $where = NULL)\n  {\n    return $this->delete(\\is_array($table) ? array_merge($table, ['ignore' => true]) : $table, $where, true);\n  }",
            "startLine": 3467,
            "doc": {
                "description": "If exist deletess row(s) in a table, else ignore.\n\n<code>\n$db->delete_ignore(\n \"table_users\",\n ['id' => '20']\n);\n<\/code>",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table name or the configuration array."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition."
                    }
                ],
                "return": "The number of rows deleted."
            },
            "endLine": 3470,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition."
                }
            ]
        },
        "insert_ignore": {
            "name": "insert_ignore",
            "summary": "If not exist inserts row(s) in a table, else ignore.",
            "description": "<code>\n$db->insert_ignore(\n \"table_users\",\n [\n  ['id' => '19', 'name' => 'Frank'],\n  ['id' => '20', 'name' => 'Ted'],\n ]\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<code>\n$db->insert_ignore(\n \"table_users\",\n [\n  ['id' => '19', 'name' => 'Frank'],\n  ['id' => '20', 'name' => 'Ted'],\n ]\n);\n<\/code>"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $values = NULL)\n  {\n    return $this->insert(\\is_array($table) ? array_merge($table, ['ignore' => true]) : $table, $values, true);\n  }",
            "startLine": 3490,
            "doc": {
                "description": "If not exist inserts row(s) in a table, else ignore.\n\n<code>\n$db->insert_ignore(\n \"table_users\",\n [\n  ['id' => '19', 'name' => 'Frank'],\n  ['id' => '20', 'name' => 'Ted'],\n ]\n);\n<\/code>",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table name or the configuration array."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$values",
                        "description": "The row(s) values."
                    }
                ],
                "return": "The number of rows inserted."
            },
            "endLine": 3493,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The row(s) values."
                }
            ]
        },
        "truncate": {
            "name": "truncate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    return $this->delete($table, []);\n  }",
            "startLine": 3499,
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$table"
                    }
                ],
                "return": ""
            },
            "endLine": 3502,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fetch": {
            "name": "fetch",
            "summary": "Return an indexed array with the first result of the query or false if there are no results.",
            "description": "```php\n\\bbn\\x::dump($db->fetch(\"SELECT name FROM users WHERE id = 10\"));\n\/* (array)\n[\n \"name\" => \"john\",\n 0 => \"john\",\n]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->fetch(\"SELECT name FROM users WHERE id = 10\"));\n\/* (array)\n[\n \"name\" => \"john\",\n 0 => \"john\",\n]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($query)\n  {\n      return $r->fetch();\n    }\n    return false;\n  }",
            "startLine": 3527,
            "doc": {
                "description": "Return an indexed array with the first result of the query or false if there are no results.\n\n```php\n\\bbn\\x::dump($db->fetch(\"SELECT name FROM users WHERE id = 10\"));\n\/* (array)\n[\n \"name\" => \"john\",\n 0 => \"john\",\n]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$query"
                    }
                ],
                "return": "| false"
            },
            "endLine": 3532,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fetchAll": {
            "name": "fetchAll",
            "summary": "Return an array of indexed array with all results of the query or false if there are no results.",
            "description": "```php\n\\bbn\\x::dump($db->fetchAll(\"SELECT 'surname', 'name', 'id' FROM users WHERE name = 'john'\"));\n\/* (array)\n [\n  [\n  \"surname\" => \"White\",\n  0 => \"White\",\n  \"name\" => \"Michael\",\n  1 => \"Michael\",\n  \"id\" => 1,\n  2 => 1,\n  ],\n  [\n  \"surname\" => \"Smith\",\n  0 => \"Smith\",\n  \"name\" => \"John\",\n  1 => \"John\",\n  \"id\" => 2,\n  2 => 2,\n  ],\n ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->fetchAll(\"SELECT 'surname', 'name', 'id' FROM users WHERE name = 'john'\"));\n\/* (array)\n [\n  [\n  \"surname\" => \"White\",\n  0 => \"White\",\n  \"name\" => \"Michael\",\n  1 => \"Michael\",\n  \"id\" => 1,\n  2 => 1,\n  ],\n  [\n  \"surname\" => \"Smith\",\n  0 => \"Smith\",\n  \"name\" => \"John\",\n  1 => \"John\",\n  \"id\" => 2,\n  2 => 2,\n  ],\n ]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($query)\n  {\n      return $r->fetchAll();\n    }\n    return false;\n  }",
            "startLine": 3563,
            "doc": {
                "description": "Return an array of indexed array with all results of the query or false if there are no results.\n\n```php\n\\bbn\\x::dump($db->fetchAll(\"SELECT 'surname', 'name', 'id' FROM users WHERE name = 'john'\"));\n\/* (array)\n [\n  [\n  \"surname\" => \"White\",\n  0 => \"White\",\n  \"name\" => \"Michael\",\n  1 => \"Michael\",\n  \"id\" => 1,\n  2 => 1,\n  ],\n  [\n  \"surname\" => \"Smith\",\n  0 => \"Smith\",\n  \"name\" => \"John\",\n  1 => \"John\",\n  \"id\" => 2,\n  2 => 2,\n  ],\n ]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$query"
                    }
                ],
                "return": "| false"
            },
            "endLine": 3568,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fetchColumn": {
            "name": "fetchColumn",
            "summary": "Transposition of the original fetchColumn method, but with the query included. Return an arra or false if no result",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($query, $num = 0)\n  {\n    if ( $r = $this->query(...\\func_get_args()) ){\n      return $r->fetchColumn($num);\n    }\n    return false;\n  }",
            "startLine": 3578,
            "doc": {
                "description": "Transposition of the original fetchColumn method, but with the query included. Return an arra or false if no result",
                "params": [
                    {
                        "tag": "param",
                        "type": "$query"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$num"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "confusion between result's index and this->query arguments(IMPORTANT). Missing the example because the function doesn't work"
                }
            },
            "endLine": 3584,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "num",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "fetchObject": {
            "name": "fetchObject",
            "summary": "Return an array with stdClass object or false if no result.",
            "description": "```php\n\\bbn\\x::dump($db->fetchObject(\"SELECT * FROM table_users WHERE name = 'john'\"));\n\/\/ stdClass Object {\n    \"id\" => 1,\n    \"name\" => \"John\",\n    \"surname\" => \"Smith\",\n    }\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->fetchObject(\"SELECT * FROM table_users WHERE name = 'john'\"));\n\/\/ stdClass Object {\n    \"id\" => 1,\n    \"name\" => \"John\",\n    \"surname\" => \"Smith\",\n    }"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($query)\n  {\n    if ( $r = $this->query(...\\func_get_args()) ){\n      return $r->fetchObject();\n    }\n    return false;\n  }",
            "startLine": 3601,
            "doc": {
                "description": "Return an array with stdClass object or false if no result.\n\n```php\n\\bbn\\x::dump($db->fetchObject(\"SELECT * FROM table_users WHERE name = 'john'\"));\n\/\/ stdClass Object {\n    \"id\" => 1,\n    \"name\" => \"John\",\n    \"surname\" => \"Smith\",\n    }\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$query"
                    }
                ],
                "return": ""
            },
            "endLine": 3607,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "query": {
            "name": "query",
            "summary": "Executes a writing statement and return the number of affected rows or return a query object for the reading * statement",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($statement)\n  {\n    if ( $this->check() ){\n      $args = \\func_get_args();\n      \/\/ If fancy is false we just use the regular PDO query function\n      if ( !$this->fancy ){\n        return parent::query(...$args);\n      }\n      \/\/ The function can be called directly with func_get_args()\n      while ( (\\count($args) === 1) && \\is_array($args[0]) ){\n        $args = $args[0];\n      }\n      if ( !empty($args[0]) && \\is_string($args[0]) ){\n\n        \/\/ The first argument is the statement\n        $statement = trim(array_shift($args));\n        $hash = $this->_make_hash($statement);\n\n        \/\/ Sending a hash as second argument from helper functions will bind it to the saved statement\n        if (\n          count($args) &&\n          \\is_string($args[0]) &&\n          (strpos($args[0], $this->hash_contour) === 0) &&\n          (\\strlen($args[0]) === (32 + 2*\\strlen($this->hash_contour))) &&\n          (substr($args[0],-\\strlen($this->hash_contour)) === $this->hash_contour)\n        ){\n          $hash_sent = array_shift($args);\n        }\n\n        $driver_options = [];\n        if (\n          count($args) &&\n          \\is_array($args[0])\n        ){\n          \/\/ Case where drivers are arguments\n          if ( !array_key_exists(0, $args[0]) ){\n            $driver_options = array_shift($args);\n          }\n          \/\/ Case where values are in a single argument\n          else if ( \\count($args) === 1 ){\n            $args = $args[0];\n          }\n        }\n\n        \/** @var array $params Will become the property last_params each time a query is executed *\/\n        $params = [\n          'statement' => $statement,\n          'values' => [],\n          'last' => microtime(true)\n        ];\n        $num_values = 0;\n        foreach ( $args as $i => $arg ){\n          if ( !\\is_array($arg) ){\n            $params['values'][] = $arg;\n            $num_values++;\n          }\n          else if ( isset($arg[2]) ){\n            $params['values'][] = $arg[2];\n            $num_values++;\n          }\n        }\n        if ( !isset($this->queries[$hash]) ){\n          \/** @var int $placeholders The number of placeholders in the statement *\/\n          $placeholders = 0;\n          if ( $sequences = $this->parse_query($statement) ){\n            \/* Or looking for question marks *\/\n            $sequences = array_keys($sequences);\n            preg_match_all('\/(\\?)\/', $statement, $exp);\n            $placeholders = isset($exp[1]) && \\is_array($exp[1]) ? \\count($exp[1]) : 0;\n            while ( $sequences[0] === 'OPTIONS' ){\n              array_shift($sequences);\n            }\n            $params['kind'] = $sequences[0];\n            $params['union'] = isset($sequences['UNION']);\n            $params['write'] = \\in_array($params['kind'], self::$write_kinds, true);\n            $params['structure'] = \\in_array($params['kind'], self::$structure_kinds, true);\n          }\n          else if ( ($this->engine === 'sqlite') && (strpos($statement, 'PRAGMA') === 0) ){\n            $params['kind'] = 'PRAGMA';\n          }\n          else{\n            die(\\defined('BBN_IS_DEV') && BBN_IS_DEV ? \"Impossible to parse the query $statement\" : 'Impossible to parse the query');\n          }\n          \/\/ This will add to the queries array\n          $this->_add_query(\n            $hash,\n            $statement,\n            $params['kind'],\n            $placeholders,\n            $driver_options);\n          if ( !empty($hash_sent) ){\n            $this->queries[$hash_sent] = $hash;\n          }\n        }\n        \/\/ The hash of the hash for retrieving a query based on the helper's config's hash\n        else if ( \\is_string($this->queries[$hash]) ){\n          $hash = $this->queries[$hash];\n        }\n\n        $q =& $this->queries[$hash];\n        \/* If the number of values is inferior to the number of placeholders we fill the values with the last given value *\/\n        if ( !empty($params['values']) && ($num_values < $q['placeholders']) ){\n          $params['values'] = array_merge(\n            $params['values'],\n            array_fill($num_values, $q['placeholders'] - $num_values, end($params['values']))\n          );\n          $num_values = \\count($params['values']);\n        }\n        \/* The number of values must match the number of placeholders to bind *\/\n        if ( $num_values !== $q['placeholders'] ){\n          $this->error('Incorrect arguments count (your values: '.$num_values.', in the statement: '.$q['placeholders'].\"\\n\\n\".$statement.\"\\n\\n\".'start of values'.print_r($params['values'], 1).'Arguments:'.print_r(\\func_get_args(),true));\n          exit;\n        }\n        $q['num']++;\n        $q['last'] = microtime(true);\n        if ( $q['exe_time'] === 0 ){\n          $time = $q['last'];\n        }\n        \/\/ That will always contains the parameters of the last query done\n\n        \/\/ Adds to $debug_queries if in debug mode and defines $last_query\n        $this->add_statement($q['sql'], $params);\n        \/\/ If the statement is a structure modifier we need to clear the cache\n        if ( $q['structure'] ){\n          foreach ( $this->queries as $k => $v ){\n            if ( $k !== $hash ){\n              unset($this->queries[$k]);\n            }\n          }\n          \/** @todo Clear the cache *\/\n        }\n        try{\n          \/\/ This is a writing statement, it will execute the statement and return the number of affected rows\n          if ( $q['write'] ){\n            \/\/ A prepared query already exists for the writing\n            \/** @var db\\query *\/\n            if ( $q['prepared'] ){\n              $r = $q['prepared']->init($params['values'])->execute();\n            }\n            \/\/ If there are no values we can assume the statement doesn't need to be prepared and is just executed\n            else if ( $num_values === 0 ){\n              \/\/ Native PDO function which returns the number of affected rows\n              $r = $this->exec($q['sql']);\n            }\n            \/\/ Preparing the query\n            else{\n              \/\/ Native PDO function which will use db\\query as base class\n              \/** @var db\\query *\/\n              $q['prepared'] = $this->prepare($q['sql'], $q['options']);\n              $r = $q['prepared']->execute();\n            }\n          }\n          \/\/ This is a reading statement, it will prepare the statement and return a query object\n          else{\n            if ( !$q['prepared'] ){\n              \/\/ Native PDO function which will use db\\query as base class\n              $q['prepared'] = $this->prepare($q['sql'], $driver_options);\n            }\n            else{\n              \/\/ Returns the same db\\query object\n              $q['prepared']->init($params['values']);\n            }\n          }\n          if ( !empty($time) && ($q['exe_time'] === 0) ){\n            $q['exe_time'] = microtime(true) - $time;\n          }\n        }\n        catch (\\PDOException $e ){\n          $this->error($e);\n        }\n        if ( $this->check() ){\n          \/\/ So if read statement returns the query object\n          if ( !$q['write'] ){\n            return $q['prepared'];\n          }\n          \/\/ If it is a write statement returns the number of affected rows\n          if ( $q['prepared'] && $q['write'] ){\n            $r = $q['prepared']->rowCount();\n          }\n          \/\/ If it is an insert statement we (try to) set the last inserted ID\n          if ( ($q['kind'] === 'INSERT') && $r ){\n            $this->set_last_insert_id();\n          }\n          return $r ?? false;\n        }\n      }\n    }\n    return false;\n  }",
            "startLine": 3623,
            "doc": {
                "description": "Executes a writing statement and return the number of affected rows or return a query object for the reading * statement",
                "params": [
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$statement"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "far vedere a thomams perche non funziona in lettura\n\n```php\n\\bbn\\x::dump($db->query(\"DELETE FROM table_users WHERE name LIKE '%lucy%'\"));\n\/\/ (int) 3\n\\bbn\\x::dump($db->query(\"SELECT * FROM table_users WHERE name = 'John\"));\n\/\/ (bbn\\db\\query) Object\n```"
                }
            },
            "endLine": 3811,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "query",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "doc": null,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": [
                {
                    "name": "statement",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "tfn": {
            "name": "tfn",
            "summary": "Return table's simple name.",
            "description": "(similar to {@link table_simple_name()})\n\n```php\n\\bbn\\x::dump($db->tsn(\"work_db.table_users\"));\n\/\/ (string) table_users\n\\bbn\\x::dump($db->tsn(\"work_db.table_users\", true));\n\/\/ (string) `table_users`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "(similar to {@link table_simple_name()})\n\n```php\n\\bbn\\x::dump($db->tsn(\"work_db.table_users\"));\n\/\/ (string) table_users\n\\bbn\\x::dump($db->tsn(\"work_db.table_users\", true));\n\/\/ (string) `table_users`\n```"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $escaped = false)\n  {\n    return $this->table_full_name($table, $escaped);\n  }",
            "startLine": 3837,
            "doc": {
                "description": "Return table's simple name.\n(similar to {@link table_simple_name()})\n\n```php\n\\bbn\\x::dump($db->tsn(\"work_db.table_users\"));\n\/\/ (string) table_users\n\\bbn\\x::dump($db->tsn(\"work_db.table_users\", true));\n\/\/ (string) `table_users`\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$escaped",
                        "description": "If set to true the returned string will be escaped."
                    }
                ],
                "return": ""
            },
            "endLine": 3840,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                }
            ]
        },
        "tsn": {
            "name": "tsn",
            "summary": "Return table's simple name.",
            "description": "(similar to {@link table_simple_name()})\n\n```php\n\\bbn\\x::dump($db->tsn(\"work_db.table_users\"));\n\/\/ (string) table_users\n\\bbn\\x::dump($db->tsn(\"work_db.table_users\", true));\n\/\/ (string) `table_users`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "(similar to {@link table_simple_name()})\n\n```php\n\\bbn\\x::dump($db->tsn(\"work_db.table_users\"));\n\/\/ (string) table_users\n\\bbn\\x::dump($db->tsn(\"work_db.table_users\", true));\n\/\/ (string) `table_users`\n```"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $escaped = false)\n  {\n    return $this->table_simple_name($table, $escaped);\n  }",
            "startLine": 3857,
            "doc": {
                "description": "Return table's simple name.\n(similar to {@link table_simple_name()})\n\n```php\n\\bbn\\x::dump($db->tsn(\"work_db.table_users\"));\n\/\/ (string) table_users\n\\bbn\\x::dump($db->tsn(\"work_db.table_users\", true));\n\/\/ (string) `table_users`\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$escaped",
                        "description": "If set to true the returned string will be escaped."
                    }
                ],
                "return": ""
            },
            "endLine": 3860,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                }
            ]
        },
        "cfn": {
            "name": "cfn",
            "summary": "Return column's full name.",
            "description": "(similar to {@link col_full_name()})\n\n```php\n\\bbn\\x::dump($db->cfn(\"name\", \"table_users\"));\n\/\/ (string) table_users.name\n\\bbn\\x::dump($db->cfn(\"name\", \"table_users\", true));\n\/\/ (string) \\`table_users\\`.\\`name\\`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "(similar to {@link col_full_name()})\n\n```php\n\\bbn\\x::dump($db->cfn(\"name\", \"table_users\"));\n\/\/ (string) table_users.name\n\\bbn\\x::dump($db->cfn(\"name\", \"table_users\", true));\n\/\/ (string) \\`table_users\\`.\\`name\\`\n```"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($col, $table = NULL, $escaped = false)\n  {\n    return $this->col_full_name($col, $table, $escaped);\n  }",
            "startLine": 3878,
            "doc": {
                "description": "Return column's full name.\n(similar to {@link col_full_name()})\n\n```php\n\\bbn\\x::dump($db->cfn(\"name\", \"table_users\"));\n\/\/ (string) table_users.name\n\\bbn\\x::dump($db->cfn(\"name\", \"table_users\", true));\n\/\/ (string) \\`table_users\\`.\\`name\\`\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$col",
                        "description": "The column's name (escaped or not)."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name (escaped or not)."
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$escaped",
                        "description": "If set to true the returned string will be escaped."
                    }
                ],
                "return": ""
            },
            "endLine": 3881,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's name (escaped or not)."
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table's name (escaped or not)."
                },
                {
                    "name": "escaped",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                }
            ]
        },
        "csn": {
            "name": "csn",
            "summary": "Return the column's simple name.",
            "description": "(similar to {@link col_simple_name()})\n\n```php\n\\bbn\\x::dump($db->csn(\"table_users.name\"));\n\/\/ (string) name\n\\bbn\\x::dump($db->csn(\"table_users.name\", true));\n\/\/ (string) `name`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "(similar to {@link col_simple_name()})\n\n```php\n\\bbn\\x::dump($db->csn(\"table_users.name\"));\n\/\/ (string) name\n\\bbn\\x::dump($db->csn(\"table_users.name\", true));\n\/\/ (string) `name`\n```"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($col, $escaped = false)\n  {\n    return $this->col_simple_name($col, $escaped);\n  }",
            "startLine": 3898,
            "doc": {
                "description": "Return the column's simple name.\n(similar to {@link col_simple_name()})\n\n```php\n\\bbn\\x::dump($db->csn(\"table_users.name\"));\n\/\/ (string) name\n\\bbn\\x::dump($db->csn(\"table_users.name\", true));\n\/\/ (string) `name`\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$col",
                        "description": "The column's complete name (escaped or not)"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$escaped",
                        "description": "If set to true the returned string will be escaped."
                    }
                ],
                "return": ""
            },
            "endLine": 3901,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's complete name (escaped or not)"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                }
            ]
        },
        "get_connection": {
            "name": "get_connection",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg = [])\n  {\n    if ( $this->language ){\n      return $this->language->get_connection($cfg);\n    }\n    return null;\n  }",
            "startLine": 3915,
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The user's options"
                    }
                ],
                "return": "The final configuration"
            },
            "endLine": 3921,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The user's options"
                }
            ]
        },
        "post_creation": {
            "name": "post_creation",
            "summary": "Actions to do once the PDO object has been created",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ( $this->language && !$this->engine ){\n      $this->language->post_creation();\n    }\n    return;\n  }",
            "startLine": 3928,
            "doc": {
                "description": "Actions to do once the PDO object has been created",
                "params": [],
                "return": ""
            },
            "endLine": 3934,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "change": {
            "name": "change",
            "summary": "Changes the database used to the given one.",
            "description": "```php\n$db = new db();\nx::dump($db->change('db_example'));\n\/\/ (db)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db = new db();\nx::dump($db->change('db_example'));\n\/\/ (db)"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($db)\n  {\n    if ( $this->language->change($db) ){\n      $this->current = $db;\n    }\n    return $this;\n  }",
            "startLine": 3948,
            "doc": {
                "description": "Changes the database used to the given one.\n\n```php\n$db = new db();\nx::dump($db->change('db_example'));\n\/\/ (db)\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db",
                        "description": "The database's name"
                    }
                ],
                "return": ""
            },
            "endLine": 3954,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The database's name"
                }
            ]
        },
        "escape": {
            "name": "escape",
            "summary": "Escapes names with the appropriate quotes (db, tables, columns, keys...)",
            "description": "```php\nbbn\\x::dump($db->escape(\"table_users\"));\n\/\/ (string) `table_users`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "```php\nbbn\\x::dump($db->escape(\"table_users\"));\n\/\/ (string) `table_users`\n```"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($item)\n  {\n    return $this->language->escape($item);\n  }",
            "startLine": 3967,
            "doc": {
                "description": "Escapes names with the appropriate quotes (db, tables, columns, keys...)\n\n```php\nbbn\\x::dump($db->escape(\"table_users\"));\n\/\/ (string) `table_users`\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$item",
                        "description": "The name to escape."
                    }
                ],
                "return": ""
            },
            "endLine": 3970,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name to escape."
                }
            ]
        },
        "table_full_name": {
            "name": "table_full_name",
            "summary": "Return table's full name.",
            "description": "```php\nbbn\\x::dump($db->table_full_name(\"table_users\"));\n\/\/ (String) db_example.table_users\nbbn\\x::dump($db->table_full_name(\"table_users\", true));\n\/\/ (String) `db_example`.`table_users`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "```php\nbbn\\x::dump($db->table_full_name(\"table_users\"));\n\/\/ (String) db_example.table_users\nbbn\\x::dump($db->table_full_name(\"table_users\", true));\n\/\/ (String) `db_example`.`table_users`\n```"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $escaped = false)\n  {\n    return $this->language->table_full_name($table, $escaped);\n  }",
            "startLine": 3986,
            "doc": {
                "description": "Return table's full name.\n\n```php\nbbn\\x::dump($db->table_full_name(\"table_users\"));\n\/\/ (String) db_example.table_users\nbbn\\x::dump($db->table_full_name(\"table_users\", true));\n\/\/ (String) `db_example`.`table_users`\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name (escaped or not)."
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$escaped",
                        "description": "If set to true the returned string will be escaped."
                    }
                ],
                "return": "| false"
            },
            "endLine": 3989,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name (escaped or not)."
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                }
            ]
        },
        "is_table_full_name": {
            "name": "is_table_full_name",
            "summary": "Returns true if the string corresponds to the tipology of a table full name.",
            "description": "(similar to {@link table_full_name()})\n\n```php\n\\bbn\\x::dump($db->tfn(\"table_users\"));\n\/\/ (String) db_example.table_users\n\\bbn\\x::dump($db->tfn(\"table_users\", true));\n\/\/ (String) `db_example`.`table_users`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "(similar to {@link table_full_name()})\n\n```php\n\\bbn\\x::dump($db->tfn(\"table_users\"));\n\/\/ (String) db_example.table_users\n\\bbn\\x::dump($db->tfn(\"table_users\", true));\n\/\/ (String) `db_example`.`table_users`\n```"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    return $this->language->is_table_full_name($table);\n  }",
            "startLine": 4005,
            "doc": {
                "description": "Returns true if the string corresponds to the tipology of a table full name.\n(similar to {@link table_full_name()})\n\n```php\n\\bbn\\x::dump($db->tfn(\"table_users\"));\n\/\/ (String) db_example.table_users\n\\bbn\\x::dump($db->tfn(\"table_users\", true));\n\/\/ (String) `db_example`.`table_users`\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": ""
            },
            "endLine": 4008,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "is_col_full_name": {
            "name": "is_col_full_name",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($col)\n  {\n    return $this->language->is_col_full_name($col);\n  }",
            "startLine": 4014,
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$col"
                    }
                ],
                "return": ""
            },
            "endLine": 4017,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "table_simple_name": {
            "name": "table_simple_name",
            "summary": "Return table's simple name.",
            "description": "```php\n\\bbn\\x::dump($db->table_simple_name(\"example_db.table_users\"));\n\/\/ (string) table_users\n\\bbn\\x::dump($db->table_simple_name(\"example.table_users\", true));\n\/\/ (string) `table_users`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "```php\n\\bbn\\x::dump($db->table_simple_name(\"example_db.table_users\"));\n\/\/ (string) table_users\n\\bbn\\x::dump($db->table_simple_name(\"example.table_users\", true));\n\/\/ (string) `table_users`\n```"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $escaped = false)\n  {\n    return $this->language->table_simple_name($table, $escaped);\n  }",
            "startLine": 4033,
            "doc": {
                "description": "Return table's simple name.\n\n```php\n\\bbn\\x::dump($db->table_simple_name(\"example_db.table_users\"));\n\/\/ (string) table_users\n\\bbn\\x::dump($db->table_simple_name(\"example.table_users\", true));\n\/\/ (string) `table_users`\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name (escaped or not)"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$escaped",
                        "description": "If set to true the returned string will be escaped"
                    }
                ],
                "return": "| false"
            },
            "endLine": 4036,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name (escaped or not)"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                }
            ]
        },
        "col_full_name": {
            "name": "col_full_name",
            "summary": "Return column's full name.",
            "description": "```php\n\\bbn\\x::dump($db->col_full_name(\"name\", \"table_users\"));\n\/\/ (string) table_users.name\n\\bbn\\x::dump($db->col_full_name(\"name\", \"table_users\", true));\n\/\/ (string) \\`table_users\\`.\\`name\\`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "```php\n\\bbn\\x::dump($db->col_full_name(\"name\", \"table_users\"));\n\/\/ (string) table_users.name\n\\bbn\\x::dump($db->col_full_name(\"name\", \"table_users\", true));\n\/\/ (string) \\`table_users\\`.\\`name\\`\n```"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($col, $table = '', $escaped = false)\n  {\n    return $this->language->col_full_name($col, $table, $escaped);\n  }",
            "startLine": 4053,
            "doc": {
                "description": "Return column's full name.\n\n```php\n\\bbn\\x::dump($db->col_full_name(\"name\", \"table_users\"));\n\/\/ (string) table_users.name\n\\bbn\\x::dump($db->col_full_name(\"name\", \"table_users\", true));\n\/\/ (string) \\`table_users\\`.\\`name\\`\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$col",
                        "description": "The column's name (escaped or not)"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name (escaped or not)"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$escaped",
                        "description": "If set to true the returned string will be escaped"
                    }
                ],
                "return": "| false"
            },
            "endLine": 4056,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's name (escaped or not)"
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name (escaped or not)"
                },
                {
                    "name": "escaped",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                }
            ]
        },
        "col_simple_name": {
            "name": "col_simple_name",
            "summary": "Return the column's simple name.",
            "description": "```php\n\\bbn\\x::dump($db->col_simple_name(\"table_users.name\"));\n\/\/ (string) name\n\\bbn\\x::dump($db->col_simple_name(\"table_users.name\", true));\n\/\/ (string) `name`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "```php\n\\bbn\\x::dump($db->col_simple_name(\"table_users.name\"));\n\/\/ (string) name\n\\bbn\\x::dump($db->col_simple_name(\"table_users.name\", true));\n\/\/ (string) `name`\n```"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($col, $escaped = false)\n  {\n    return $this->language->col_simple_name($col, $escaped);\n  }",
            "startLine": 4072,
            "doc": {
                "description": "Return the column's simple name.\n\n```php\n\\bbn\\x::dump($db->col_simple_name(\"table_users.name\"));\n\/\/ (string) name\n\\bbn\\x::dump($db->col_simple_name(\"table_users.name\", true));\n\/\/ (string) `name`\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$col",
                        "description": "The column's complete name (escaped or not)."
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$escaped",
                        "description": "If set to true the returned string will be escaped."
                    }
                ],
                "return": "| false"
            },
            "endLine": 4075,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's complete name (escaped or not)."
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                }
            ]
        },
        "disable_keys": {
            "name": "disable_keys",
            "summary": "Disables foreign keys constraints.",
            "description": "```php\n\\bbn\\x::dump($db->disable_keys());\n\/\/ (db)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->disable_keys());\n\/\/ (db)"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->language->disable_keys();\n    return $this;\n  }",
            "startLine": 4087,
            "doc": {
                "description": "Disables foreign keys constraints.\n\n```php\n\\bbn\\x::dump($db->disable_keys());\n\/\/ (db)\n```",
                "params": [],
                "return": ""
            },
            "endLine": 4091,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "enable_keys": {
            "name": "enable_keys",
            "summary": "Enables foreign keys constraints.",
            "description": "```php\n\\bbn\\x::dump($db->enable_keys());\n\/\/ (db)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->enable_keys());\n\/\/ (db)"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->language->enable_keys();\n    return $this;\n  }",
            "startLine": 4103,
            "doc": {
                "description": "Enables foreign keys constraints.\n\n```php\n\\bbn\\x::dump($db->enable_keys());\n\/\/ (db)\n```",
                "params": [],
                "return": ""
            },
            "endLine": 4107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "get_databases": {
            "name": "get_databases",
            "summary": "Return databases' names as an array.",
            "description": "```php\n\\bbn\\x::dump($db->get_databases());\n\/*\n(array)[\n \"db_customers\",\n \"db_clients\",\n \"db_empty\",\n \"db_example\",\n \"db_mail\"\n ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->get_databases());\n\/*\n(array)[\n \"db_customers\",\n \"db_clients\",\n \"db_empty\",\n \"db_example\",\n \"db_mail\"\n ]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_get_cache('', 'databases');\n  }",
            "startLine": 4126,
            "doc": {
                "description": "Return databases' names as an array.\n\n```php\n\\bbn\\x::dump($db->get_databases());\n\/*\n(array)[\n \"db_customers\",\n \"db_clients\",\n \"db_empty\",\n \"db_example\",\n \"db_mail\"\n ]\n```",
                "params": [],
                "return": ""
            },
            "endLine": 4129,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_tables": {
            "name": "get_tables",
            "summary": "Return tables' names of a database as an array.",
            "description": "```php\n\\bbn\\x::dump($db->get_tables('db_example'));\n\/*\n(array) [\n  \"clients\",\n  \"columns\",\n  \"cron\",\n  \"journal\",\n  \"dbs\",\n  \"examples\",\n  \"history\",\n  \"hosts\",\n  \"keys\",\n  \"mails\",\n  \"medias\",\n  \"notes\",\n  \"medias\",\n  \"versions\"\n  ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->get_tables('db_example'));\n\/*\n(array) [\n  \"clients\",\n  \"columns\",\n  \"cron\",\n  \"journal\",\n  \"dbs\",\n  \"examples\",\n  \"history\",\n  \"hosts\",\n  \"keys\",\n  \"mails\",\n  \"medias\",\n  \"notes\",\n  \"medias\",\n  \"versions\"\n  ]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($database = '')\n  {\n    if ( empty($database) ){\n      $database = $this->current;\n    }\n    return $this->_get_cache($database, 'tables');\n  }",
            "startLine": 4158,
            "doc": {
                "description": "Return tables' names of a database as an array.\n\n```php\n\\bbn\\x::dump($db->get_tables('db_example'));\n\/*\n(array) [\n  \"clients\",\n  \"columns\",\n  \"cron\",\n  \"journal\",\n  \"dbs\",\n  \"examples\",\n  \"history\",\n  \"hosts\",\n  \"keys\",\n  \"mails\",\n  \"medias\",\n  \"notes\",\n  \"medias\",\n  \"versions\"\n  ]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database",
                        "description": "Database name"
                    }
                ],
                "return": ""
            },
            "endLine": 4164,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "Database name"
                }
            ]
        },
        "get_columns": {
            "name": "get_columns",
            "summary": "Return colums' structure of a table as an array indexed with the fields names.",
            "description": "```php\n\\bbn\\x::dump($db->get_columns('table_users'));\n\/* (array)[\n  \"id\" => [\n   \"position\" => 1,\n   \"null\" => 0,\n   \"key\" => \"PRI\",\n   \"default\" => null,\n   \"extra\" => \"auto_increment\",\n   \"signed\" => 0,\n   \"maxlength\" => \"8\",\n   \"type\" => \"int\",\n  ],\n   \"name\" => [\n   \"position\" => 2,\n   \"null\" => 0,\n   \"key\" => null,\n   \"default\" => null,\n   \"extra\" => \"\",\n   \"signed\" => 0,\n   \"maxlength\" => \"30\",\n   \"type\" => \"varchar\",\n  ],\n  \"surname\" => [\n   \"position\" => 3,\n   \"null\" => 0,\n   \"key\" => null,\n   \"default\" => null,\n   \"extra\" => \"\",\n   \"signed\" => 0,\n   \"maxlength\" => \"30\",\n   \"type\" => \"varchar\",\n  ],\n  \"address\" => [\n   \"position\" => 4,\n   \"null\" => 0,\n   \"key\" => \"UNI\",\n   \"default\" => null,\n   \"extra\" => \"\",\n   \"signed\" => 0,\n   \"maxlength\" => \"30\",\n   \"type\" => \"varchar\",\n  ],\n   ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->get_columns('table_users'));\n\/* (array)[\n  \"id\" => [\n   \"position\" => 1,\n   \"null\" => 0,\n   \"key\" => \"PRI\",\n   \"default\" => null,\n   \"extra\" => \"auto_increment\",\n   \"signed\" => 0,\n   \"maxlength\" => \"8\",\n   \"type\" => \"int\",\n  ],\n   \"name\" => [\n   \"position\" => 2,\n   \"null\" => 0,\n   \"key\" => null,\n   \"default\" => null,\n   \"extra\" => \"\",\n   \"signed\" => 0,\n   \"maxlength\" => \"30\",\n   \"type\" => \"varchar\",\n  ],\n  \"surname\" => [\n   \"position\" => 3,\n   \"null\" => 0,\n   \"key\" => null,\n   \"default\" => null,\n   \"extra\" => \"\",\n   \"signed\" => 0,\n   \"maxlength\" => \"30\",\n   \"type\" => \"varchar\",\n  ],\n  \"address\" => [\n   \"position\" => 4,\n   \"null\" => 0,\n   \"key\" => \"UNI\",\n   \"default\" => null,\n   \"extra\" => \"\",\n   \"signed\" => 0,\n   \"maxlength\" => \"30\",\n   \"type\" => \"varchar\",\n  ],\n   ]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    if ( $tmp = $this->_get_cache($table) ){\n      return $tmp['fields'];\n    }\n    return null;\n  }",
            "startLine": 4218,
            "doc": {
                "description": "Return colums' structure of a table as an array indexed with the fields names.\n\n```php\n\\bbn\\x::dump($db->get_columns('table_users'));\n\/* (array)[\n  \"id\" => [\n   \"position\" => 1,\n   \"null\" => 0,\n   \"key\" => \"PRI\",\n   \"default\" => null,\n   \"extra\" => \"auto_increment\",\n   \"signed\" => 0,\n   \"maxlength\" => \"8\",\n   \"type\" => \"int\",\n  ],\n   \"name\" => [\n   \"position\" => 2,\n   \"null\" => 0,\n   \"key\" => null,\n   \"default\" => null,\n   \"extra\" => \"\",\n   \"signed\" => 0,\n   \"maxlength\" => \"30\",\n   \"type\" => \"varchar\",\n  ],\n  \"surname\" => [\n   \"position\" => 3,\n   \"null\" => 0,\n   \"key\" => null,\n   \"default\" => null,\n   \"extra\" => \"\",\n   \"signed\" => 0,\n   \"maxlength\" => \"30\",\n   \"type\" => \"varchar\",\n  ],\n  \"address\" => [\n   \"position\" => 4,\n   \"null\" => 0,\n   \"key\" => \"UNI\",\n   \"default\" => null,\n   \"extra\" => \"\",\n   \"signed\" => 0,\n   \"maxlength\" => \"30\",\n   \"type\" => \"varchar\",\n  ],\n   ]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": ""
            },
            "endLine": 4224,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "get_keys": {
            "name": "get_keys",
            "summary": "Return the table's keys as an array indexed with the fields names.",
            "description": "```php\n\\bbn\\x::dump($db->get_keys(\"table_users\"));\n\/*\n(array)[\n \"keys\" => [\n  \"PRIMARY\" => [\n   \"columns\" => [\n  \"id\",\n   ],\n   \"ref_db\" => null,\n   \"ref_table\" => null,\n   \"ref_column\" => null,\n   \"unique\" => 1,\n  ],\n  \"number\" => [\n   \"columns\" => [\n  \"number\",\n   ],\n   \"ref_db\" => null,\n   \"ref_table\" => null,\n   \"ref_column\" => null,\n  \"unique\" => 1,\n  ],\n ],\n \"cols\" => [\n  \"id\" => [\n   \"PRIMARY\",\n  ],\n  \"number\" => [\n   \"number\",\n  ],\n ],\n]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->get_keys(\"table_users\"));\n\/*\n(array)[\n \"keys\" => [\n  \"PRIMARY\" => [\n   \"columns\" => [\n  \"id\",\n   ],\n   \"ref_db\" => null,\n   \"ref_table\" => null,\n   \"ref_column\" => null,\n   \"unique\" => 1,\n  ],\n  \"number\" => [\n   \"columns\" => [\n  \"number\",\n   ],\n   \"ref_db\" => null,\n   \"ref_table\" => null,\n   \"ref_column\" => null,\n  \"unique\" => 1,\n  ],\n ],\n \"cols\" => [\n  \"id\" => [\n   \"PRIMARY\",\n  ],\n  \"number\" => [\n   \"number\",\n  ],\n ],\n]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    if ( $tmp = $this->_get_cache($table) ){\n      return [\n        'keys' => $tmp['keys'],\n        'cols' => $tmp['cols']\n      ];\n    }\n    return null;\n  }",
            "startLine": 4267,
            "doc": {
                "description": "Return the table's keys as an array indexed with the fields names.\n\n```php\n\\bbn\\x::dump($db->get_keys(\"table_users\"));\n\/*\n(array)[\n \"keys\" => [\n  \"PRIMARY\" => [\n   \"columns\" => [\n  \"id\",\n   ],\n   \"ref_db\" => null,\n   \"ref_table\" => null,\n   \"ref_column\" => null,\n   \"unique\" => 1,\n  ],\n  \"number\" => [\n   \"columns\" => [\n  \"number\",\n   ],\n   \"ref_db\" => null,\n   \"ref_table\" => null,\n   \"ref_column\" => null,\n  \"unique\" => 1,\n  ],\n ],\n \"cols\" => [\n  \"id\" => [\n   \"PRIMARY\",\n  ],\n  \"number\" => [\n   \"number\",\n  ],\n ],\n]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": ""
            },
            "endLine": 4276,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "get_conditions": {
            "name": "get_conditions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $conditions, array $cfg = [], $is_having = false, $indent = 0)\n  {\n    return $this->language->get_conditions($conditions, $cfg, $is_having, $indent);\n  }",
            "startLine": 4284,
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$conditions"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$is",
                        "description": "having"
                    }
                ],
                "return": ""
            },
            "endLine": 4287,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "conditions",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "is_having",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "having"
                },
                {
                    "name": "indent",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "get_select": {
            "name": "get_select",
            "summary": "Return SQL code for row(s) SELECT.",
            "description": "```php\n\\bbn\\x::dump($db->get_select('table_users',['name','surname']));\n\/*\n(string)\n SELECT\n  `table_users`.`name`,\n  `table_users`.`surname`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "```php\n\\bbn\\x::dump($db->get_select('table_users',['name','surname']));\n\/*\n(string)\n SELECT\n  `table_users`.`name`,\n  `table_users`.`surname`\n```"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    return $this->language->get_select(...$this->_add_kind(\\func_get_args()));\n  }",
            "startLine": 4304,
            "doc": {
                "description": "Return SQL code for row(s) SELECT.\n\n```php\n\\bbn\\x::dump($db->get_select('table_users',['name','surname']));\n\/*\n(string)\n SELECT\n  `table_users`.`name`,\n  `table_users`.`surname`\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The configuration array"
                    }
                ],
                "return": ""
            },
            "endLine": 4307,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration array"
                }
            ]
        },
        "get_insert": {
            "name": "get_insert",
            "summary": "Returns the SQL code for an INSERT statement.",
            "description": "```php\n\\bbn\\x::dump($db->get_insert([\n 'tables' => ['table_users'],\n 'fields' => ['name','surname']\n]));\n\/*\n(string)\n INSERT INTO `db_example`.`table_users` (\n   `name`, `surname`)\n   VALUES (?, ?)\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "```php\n\\bbn\\x::dump($db->get_insert([\n 'tables' => ['table_users'],\n 'fields' => ['name','surname']\n]));\n\/*\n(string)\n INSERT INTO `db_example`.`table_users` (\n   `name`, `surname`)\n   VALUES (?, ?)\n```"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $cfg['kind'] = 'INSERT';\n    return $this->language->get_insert($this->process_cfg($cfg));\n  }",
            "startLine": 4327,
            "doc": {
                "description": "Returns the SQL code for an INSERT statement.\n\n```php\n\\bbn\\x::dump($db->get_insert([\n 'tables' => ['table_users'],\n 'fields' => ['name','surname']\n]));\n\/*\n(string)\n INSERT INTO `db_example`.`table_users` (\n   `name`, `surname`)\n   VALUES (?, ?)\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The configuration array"
                    }
                ],
                "return": ""
            },
            "endLine": 4331,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration array"
                }
            ]
        },
        "get_update": {
            "name": "get_update",
            "summary": "Returns the SQL code for an UPDATE statement.",
            "description": "```php\n\\bbn\\x::dump($db->get_update([\n 'tables' => ['table_users'],\n 'fields' => ['name','surname']\n]));\n\/*\n(string)\n  UPDATE `db_example`.`table_users`\n  SET `table_users`.`name` = ?,\n  `table_users`.`surname` = ?\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "```php\n\\bbn\\x::dump($db->get_update([\n 'tables' => ['table_users'],\n 'fields' => ['name','surname']\n]));\n\/*\n(string)\n  UPDATE `db_example`.`table_users`\n  SET `table_users`.`name` = ?,\n  `table_users`.`surname` = ?\n```"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $cfg['kind'] = 'UPDATE';\n    return $this->language->get_update($this->process_cfg($cfg));\n  }",
            "startLine": 4351,
            "doc": {
                "description": "Returns the SQL code for an UPDATE statement.\n\n```php\n\\bbn\\x::dump($db->get_update([\n 'tables' => ['table_users'],\n 'fields' => ['name','surname']\n]));\n\/*\n(string)\n  UPDATE `db_example`.`table_users`\n  SET `table_users`.`name` = ?,\n  `table_users`.`surname` = ?\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The configuration array"
                    }
                ],
                "return": ""
            },
            "endLine": 4355,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration array"
                }
            ]
        },
        "get_delete": {
            "name": "get_delete",
            "summary": "Returns the SQL code for a DELETE statement.",
            "description": "```php\n\\bbn\\x::dump($db->get_delete('table_users',['id'=>1]));\n\/\/ (string) DELETE FROM `db_example`.`table_users` * WHERE 1 AND `table_users`.`id` = ?\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "```php\n\\bbn\\x::dump($db->get_delete('table_users',['id'=>1]));\n\/\/ (string) DELETE FROM `db_example`.`table_users` * WHERE 1 AND `table_users`.`id` = ?\n```"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $cfg['kind'] = 'DELETE';\n    return $this->language->get_delete($this->process_cfg($cfg));\n  }",
            "startLine": 4368,
            "doc": {
                "description": "Returns the SQL code for a DELETE statement.\n\n```php\n\\bbn\\x::dump($db->get_delete('table_users',['id'=>1]));\n\/\/ (string) DELETE FROM `db_example`.`table_users` * WHERE 1 AND `table_users`.`id` = ?\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The configuration array"
                    }
                ],
                "return": ""
            },
            "endLine": 4372,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration array"
                }
            ]
        },
        "get_join": {
            "name": "get_join",
            "summary": "Returns a string with the JOIN part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    return $this->language->get_join($cfg);\n  }",
            "startLine": 4380,
            "doc": {
                "description": "Returns a string with the JOIN part of the query if there is, empty otherwise",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "endLine": 4383,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_where": {
            "name": "get_where",
            "summary": "Return a string with 'where' conditions.",
            "description": "```php\n\\bbn\\x::dump($db->get_where(['id' => 9], 'table_users'));\n\/\/ (string) WHERE 1 AND `table_users`.`id` = ?\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "```php\n\\bbn\\x::dump($db->get_where(['id' => 9], 'table_users'));\n\/\/ (string) WHERE 1 AND `table_users`.`id` = ?\n```"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    return $this->language->get_where($cfg);\n  }",
            "startLine": 4396,
            "doc": {
                "description": "Return a string with 'where' conditions.\n\n```php\n\\bbn\\x::dump($db->get_where(['id' => 9], 'table_users'));\n\/\/ (string) WHERE 1 AND `table_users`.`id` = ?\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "endLine": 4399,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_group_by": {
            "name": "get_group_by",
            "summary": "Returns a string with the GROUP BY part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    return $this->language->get_group_by($cfg);\n  }",
            "startLine": 4407,
            "doc": {
                "description": "Returns a string with the GROUP BY part of the query if there is, empty otherwise",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "endLine": 4410,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_having": {
            "name": "get_having",
            "summary": "Returns a string with the HAVING part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    return $this->language->get_having($cfg);\n  }",
            "startLine": 4418,
            "doc": {
                "description": "Returns a string with the HAVING part of the query if there is, empty otherwise",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "endLine": 4421,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_order": {
            "name": "get_order",
            "summary": "Get a string starting with ORDER BY with corresponding parameters to $order.",
            "description": "```php\n\\bbn\\x::dump($db->get_order(['name' => 'DESC' ],'table_users'));\n\/\/ (string) ORDER BY `name` DESC\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "```php\n\\bbn\\x::dump($db->get_order(['name' => 'DESC' ],'table_users'));\n\/\/ (string) ORDER BY `name` DESC\n```"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    return $this->language->get_order($cfg);\n  }",
            "startLine": 4434,
            "doc": {
                "description": "Get a string starting with ORDER BY with corresponding parameters to $order.\n\n```php\n\\bbn\\x::dump($db->get_order(['name' => 'DESC' ],'table_users'));\n\/\/ (string) ORDER BY `name` DESC\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "endLine": 4437,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_limit": {
            "name": "get_limit",
            "summary": "Get a string starting with LIMIT with corresponding parameters to $limit.",
            "description": "```php\n\\bbn\\x::dump($db->get_limit(3,1));\n\/\/ (string) LIMIT 1, 3\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->get_limit(3,1));\n\/\/ (string) LIMIT 1, 3"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    return $this->language->get_limit($cfg);\n  }",
            "startLine": 4450,
            "doc": {
                "description": "Get a string starting with LIMIT with corresponding parameters to $limit.\n\n```php\n\\bbn\\x::dump($db->get_limit(3,1));\n\/\/ (string) LIMIT 1, 3\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "endLine": 4453,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_create": {
            "name": "get_create",
            "summary": "Return SQL code for table creation.",
            "description": "```php\n\\bbn\\x::dump($db->get_create(\"table_users\"));\n\/*\n(string)\n  CREATE TABLE `table_users` (\n `userid` int(11) NOT NULL,\n `userdataid` int(11) NOT NULL,\n `info` char(200) DEFAULT NULL,\n PRIMARY KEY (`userid`,`userdataid`),\n KEY `table_users_userId_userdataId_info` (`userid`,`userdataid`,`info`)\n  ) ENGINE=InnoDB DEFAULT CHARSET=utf8\n\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "```php\n\\bbn\\x::dump($db->get_create(\"table_users\"));\n\/*\n(string)\n  CREATE TABLE `table_users` (\n `userid` int(11) NOT NULL,\n `userdataid` int(11) NOT NULL,\n `info` char(200) DEFAULT NULL,\n PRIMARY KEY (`userid`,`userdataid`),\n KEY `table_users_userId_userdataId_info` (`userid`,`userdataid`,`info`)\n  ) ENGINE=InnoDB DEFAULT CHARSET=utf8\n\n```"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $model = NULL)\n  {\n    return $this->language->get_create($table, $model);\n  }",
            "startLine": 4474,
            "doc": {
                "description": "Return SQL code for table creation.\n\n```php\n\\bbn\\x::dump($db->get_create(\"table_users\"));\n\/*\n(string)\n  CREATE TABLE `table_users` (\n `userid` int(11) NOT NULL,\n `userdataid` int(11) NOT NULL,\n `info` char(200) DEFAULT NULL,\n PRIMARY KEY (`userid`,`userdataid`),\n KEY `table_users_userId_userdataId_info` (`userid`,`userdataid`,`info`)\n  ) ENGINE=InnoDB DEFAULT CHARSET=utf8\n\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": "| false"
            },
            "endLine": 4477,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "get_create_table": {
            "name": "get_create_table",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $model = NULL)\n  {\n    return $this->language->get_create_table($table, $model);\n  }",
            "startLine": 4479,
            "doc": null,
            "endLine": 4482,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "get_create_keys": {
            "name": "get_create_keys",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $model = NULL)\n  {\n    return $this->language->get_create_keys($table, $model);\n  }",
            "startLine": 4484,
            "doc": null,
            "endLine": 4487,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "get_create_constraints": {
            "name": "get_create_constraints",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $model = NULL)\n  {\n    \n    return $this->language->get_create_constraints($table, $model);\n  }",
            "startLine": 4489,
            "doc": null,
            "endLine": 4493,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "create_constraints_sqlite": {
            "name": "create_constraints_sqlite",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $model = NULL)\n  {\n    return $this->language->create_constraints_sqlite(...\\func_get_args());\n  }",
            "startLine": 4495,
            "doc": null,
            "endLine": 4498,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "create_index": {
            "name": "create_index",
            "summary": "Creates an index on one or more column(s) of the table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $column, $unique = false, $length = NULL)\n  {\n    return $this->language->create_index($table, $column, $unique);\n  }",
            "startLine": 4516,
            "doc": {
                "description": "Creates an index on one or more column(s) of the table",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$column"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$unique"
                    },
                    {
                        "tag": "param",
                        "type": "null",
                        "name": "$length"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "return data\n\n```php\n\\bbn\\x::dump($db->create_db_index('table_users','id_group'));\n\/\/ (void)\n```"
                }
            },
            "endLine": 4519,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "unique",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "length",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "delete_index": {
            "name": "delete_index",
            "summary": "Deletes index on a column of the table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $key)\n  {\n    return $this->language->delete_index($table, $key);\n  }",
            "startLine": 4535,
            "doc": {
                "description": "Deletes index on a column of the table.",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$key",
                        "description": "The key's name."
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "far vedere a thomas perch\u00e8 non funziona\/return data\n\n```php\n\\bbn\\x::dump($db->delete_db_index('table_users','id_group'));\n\/\/ (void)\n```"
                }
            },
            "endLine": 4538,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name."
                },
                {
                    "name": "key",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The key's name."
                }
            ]
        },
        "create_user": {
            "name": "create_user",
            "summary": "Creates an user for a specific db.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($user = NULL, $pass = NULL, $db = NULL)\n  {\n    return $this->language->create_user($user, $pass, $db);\n  }",
            "startLine": 4554,
            "doc": {
                "description": "Creates an user for a specific db.",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$user"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$pass"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "return data\n\n```php\n\\bbn\\x::dump($db->create_db_user('Michael','22101980','db_example'));\n\/\/ (void)\n```"
                }
            },
            "endLine": 4557,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "pass",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "delete_user": {
            "name": "delete_user",
            "summary": "Deletes a db user.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($user = NULL)\n  {\n    return $this->language->delete_user($user);\n  }",
            "startLine": 4572,
            "doc": {
                "description": "Deletes a db user.",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$user"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "non mi funziona ma forse per una questione di permessi\/ return data\n\n```php\n\\bbn\\x::dump($db->delete_db_user('Michael'));\n\/\/ (void)\n```"
                }
            },
            "endLine": 4575,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "get_users": {
            "name": "get_users",
            "summary": "Return an array including privileges of a specific db_user or all db_users.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($user = '', $host = '')\n  {\n    return $this->language->get_users($user, $host);\n  }",
            "startLine": 4593,
            "doc": {
                "description": "Return an array including privileges of a specific db_user or all db_users.",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$user",
                        "description": "The user's name, without params will return all privileges of all db_users"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$host",
                        "description": "The host"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "far vedere a th la descrizione\n\n```php\n\\bbn\\x::dump($db->get_users('Michael'));\n\/* (array) [\n\"GRANT USAGE ON *.* TO 'Michael'@''\",\nGRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `db_example`.* TO 'Michael'@''\"\n ]\n```"
                }
            },
            "endLine": 4596,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The user's name, without params will return all privileges of all db_users"
                },
                {
                    "name": "host",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The host"
                }
            ]
        },
        "db_size": {
            "name": "db_size",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($database = '', $type = '')\n  {\n    return $this->language->db_size($database, $type);\n  }",
            "startLine": 4603,
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    }
                ],
                "return": ""
            },
            "endLine": 4606,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "table_size": {
            "name": "table_size",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $type = '')\n  {\n    return $this->language->table_size($table, $type);\n  }",
            "startLine": 4613,
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    }
                ],
                "return": ""
            },
            "endLine": 4616,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "status": {
            "name": "status",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table = '', $database = '')\n  {\n    return $this->language->status($table, $database);\n  }",
            "startLine": 4623,
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database"
                    }
                ],
                "return": ""
            },
            "endLine": 4626,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "database",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_uid": {
            "name": "get_uid",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    \/\/return hex2bin(str_replace('-', '', \\bbn\\x::make_uid()));\n    return $this->language->get_uid();\n  }",
            "startLine": 4631,
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "endLine": 4635,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "get_row": {
            "name": "get_row",
            "summary": "Return the first row resulting from the query as an array indexed with the fields' name.",
            "description": "```php\n\\bbn\\x::dump($db->get_row(\"SELECT id, name FROM table_users WHERE id > ? \", 2));;\n\n\/* (array)[\n  \"id\" => 3,\n  \"name\" => \"thomas\",\n  ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->get_row(\"SELECT id, name FROM table_users WHERE id > ? \", 2));;\n\n\/* (array)[\n  \"id\" => 3,\n  \"name\" => \"thomas\",\n  ]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ( $r = $this->query(...\\func_get_args()) ){\n      return $r->get_row();\n    }\n    return null;\n  }",
            "startLine": 4662,
            "doc": {
                "description": "Return the first row resulting from the query as an array indexed with the fields' name.\n\n```php\n\\bbn\\x::dump($db->get_row(\"SELECT id, name FROM table_users WHERE id > ? \", 2));;\n\n\/* (array)[\n  \"id\" => 3,\n  \"name\" => \"thomas\",\n  ]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "query."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "description": "The var ? value."
                    }
                ],
                "return": "| false"
            },
            "endLine": 4668,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_rows": {
            "name": "get_rows",
            "summary": "Return an array that includes indexed arrays for every row resultant from the query.",
            "description": "```php\n\\bbn\\x::dump($db->get_rows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2));\n\/* (array)[\n  [\n  \"id\" => 3,\n  \"name\" => \"john\",\n  ],\n  [\n  \"id\" => 4,\n  \"name\" => \"barbara\",\n  ],\n   ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->get_rows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2));\n\/* (array)[\n  [\n  \"id\" => 3,\n  \"name\" => \"john\",\n  ],\n  [\n  \"id\" => 4,\n  \"name\" => \"barbara\",\n  ],\n   ]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ( $r = $this->query(...\\func_get_args()) ){\n      return $r->get_rows();\n    }\n    return null;\n  }",
            "startLine": 4691,
            "doc": {
                "description": "Return an array that includes indexed arrays for every row resultant from the query.\n\n```php\n\\bbn\\x::dump($db->get_rows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2));\n\/* (array)[\n  [\n  \"id\" => 3,\n  \"name\" => \"john\",\n  ],\n  [\n  \"id\" => 4,\n  \"name\" => \"barbara\",\n  ],\n   ]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "description": "The var ? value"
                    }
                ],
                "return": "| false"
            },
            "endLine": 4697,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_irow": {
            "name": "get_irow",
            "summary": "Return a row as a numeric indexed array.",
            "description": "```php\n\\bbn\\x::dump($db->get_irow(\"SELECT id, name, surname FROM table_users WHERE id > ?\", 2));\n\/* (array) [\n   3,\n   \"john\",\n   \"brown\",\n  ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->get_irow(\"SELECT id, name, surname FROM table_users WHERE id > ?\", 2));\n\/* (array) [\n   3,\n   \"john\",\n   \"brown\",\n  ]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ( $r = $this->query(...\\func_get_args()) ){\n      return $r->get_irow();\n    }\n    return null;\n  }",
            "startLine": 4715,
            "doc": {
                "description": "Return a row as a numeric indexed array.\n\n```php\n\\bbn\\x::dump($db->get_irow(\"SELECT id, name, surname FROM table_users WHERE id > ?\", 2));\n\/* (array) [\n   3,\n   \"john\",\n   \"brown\",\n  ]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "query"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "description": "The var ? value"
                    }
                ],
                "return": "| false"
            },
            "endLine": 4721,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_irows": {
            "name": "get_irows",
            "summary": "Return an array of numeric indexed rows.",
            "description": "```php\n\\bbn\\x::dump($db->get_irows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2, 2));\n\/*\n(array)[\n  [\n   3,\n  \"john\"\n  ],\n  [\n  4,\n  \"barbara\"\n  ]\n ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->get_irows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2, 2));\n\/*\n(array)[\n  [\n   3,\n  \"john\"\n  ],\n  [\n  4,\n  \"barbara\"\n  ]\n ]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ( $r = $this->query(...\\func_get_args()) ){\n      return $r->get_irows();\n    }\n    return null;\n  }",
            "startLine": 4743,
            "doc": {
                "description": "Return an array of numeric indexed rows.\n\n```php\n\\bbn\\x::dump($db->get_irows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2, 2));\n\/*\n(array)[\n  [\n   3,\n  \"john\"\n  ],\n  [\n  4,\n  \"barbara\"\n  ]\n ]\n```",
                "params": [],
                "return": ""
            },
            "endLine": 4749,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_by_columns": {
            "name": "get_by_columns",
            "summary": "Return an array indexed on the searched field's in which there are all the values of the column.",
            "description": "```php\n\\bbn\\x::dump($db->get_by_columns(\"SELECT name, surname FROM table_users WHERE id > 2\"));\n\/*\n(array) [\n \"name\" => [\n \"John\",\n \"Michael\"\n ],\n \"surname\" => [\n  \"Brown\",\n  \"Smith\"\n ]\n  ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->get_by_columns(\"SELECT name, surname FROM table_users WHERE id > 2\"));\n\/*\n(array) [\n \"name\" => [\n \"John\",\n \"Michael\"\n ],\n \"surname\" => [\n  \"Brown\",\n  \"Smith\"\n ]\n  ]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ( $r = $this->query(...\\func_get_args()) ){\n      return $r->get_by_columns();\n    }\n    return null;\n  }",
            "startLine": 4772,
            "doc": {
                "description": "Return an array indexed on the searched field's in which there are all the values of the column.\n\n```php\n\\bbn\\x::dump($db->get_by_columns(\"SELECT name, surname FROM table_users WHERE id > 2\"));\n\/*\n(array) [\n \"name\" => [\n \"John\",\n \"Michael\"\n ],\n \"surname\" => [\n  \"Brown\",\n  \"Smith\"\n ]\n  ]\n```",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "query"
                    }
                ],
                "return": ""
            },
            "endLine": 4778,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_obj": {
            "name": "get_obj",
            "summary": "Return the first row resulting from the query as an object (similar to {@link get_object()}).",
            "description": "```php\n\\bbn\\x::dump($db->get_obj(\"SELECT surname FROM table_users\"));\n\/*\n(obj){\n \"name\" => \"Smith\"\n }\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->get_obj(\"SELECT surname FROM table_users\"));\n\/*\n(obj){\n \"name\" => \"Smith\"\n }"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->get_object(\\func_get_args());\n  }",
            "startLine": 4793,
            "doc": {
                "description": "Return the first row resulting from the query as an object (similar to {@link get_object()}).\n\n```php\n\\bbn\\x::dump($db->get_obj(\"SELECT surname FROM table_users\"));\n\/*\n(obj){\n \"name\" => \"Smith\"\n }\n```",
                "params": [],
                "return": ""
            },
            "endLine": 4796,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "stdClass",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_object": {
            "name": "get_object",
            "summary": "Return the first row resulting from the query as an object.",
            "description": "Synonym of get_obj.\n\n```php\n\\bbn\\x::dump($db->get_object(\"SELECT name FROM table_users\"));\n\/*\n(obj){\n \"name\" => \"John\"\n }\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "Synonym of get_obj."
                },
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->get_object(\"SELECT name FROM table_users\"));\n\/*\n(obj){\n \"name\" => \"John\"\n }"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ( $r = $this->query(...\\func_get_args()) ){\n      return $r->get_object();\n    }\n    return null;\n  }",
            "startLine": 4812,
            "doc": {
                "description": "Return the first row resulting from the query as an object.\nSynonym of get_obj.\n\n```php\n\\bbn\\x::dump($db->get_object(\"SELECT name FROM table_users\"));\n\/*\n(obj){\n \"name\" => \"John\"\n }\n```",
                "params": [],
                "return": ""
            },
            "endLine": 4818,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "stdClass",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_objects": {
            "name": "get_objects",
            "summary": "Return an array of stdClass objects.",
            "description": "```php\n\\bbn\\x::dump($db->get_objects(\"SELECT name FROM table_users\"));\n\n\/*\n(array) [\n   Object stdClass: df {\n  \"name\" => \"John\",\n   },\n   Object stdClass: df {\n  \"name\" => \"Michael\",\n   },\n   Object stdClass: df {\n  \"name\" => \"Thomas\",\n   },\n   Object stdClass: df {\n  \"name\" => \"William\",\n   },\n   Object stdClass: df {\n  \"name\" => \"Jake\",\n   },\n  ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\x::dump($db->get_objects(\"SELECT name FROM table_users\"));\n\n\/*\n(array) [\n   Object stdClass: df {\n  \"name\" => \"John\",\n   },\n   Object stdClass: df {\n  \"name\" => \"Michael\",\n   },\n   Object stdClass: df {\n  \"name\" => \"Thomas\",\n   },\n   Object stdClass: df {\n  \"name\" => \"William\",\n   },\n   Object stdClass: df {\n  \"name\" => \"Jake\",\n   },\n  ]"
                }
            ],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ( $r = $this->query(...\\func_get_args()) ){\n      return $r->get_objects();\n    }\n    return [];\n  }",
            "startLine": 4848,
            "doc": {
                "description": "Return an array of stdClass objects.\n\n```php\n\\bbn\\x::dump($db->get_objects(\"SELECT name FROM table_users\"));\n\n\/*\n(array) [\n   Object stdClass: df {\n  \"name\" => \"John\",\n   },\n   Object stdClass: df {\n  \"name\" => \"Michael\",\n   },\n   Object stdClass: df {\n  \"name\" => \"Thomas\",\n   },\n   Object stdClass: df {\n  \"name\" => \"William\",\n   },\n   Object stdClass: df {\n  \"name\" => \"Jake\",\n   },\n  ]\n```",
                "params": [],
                "return": ""
            },
            "endLine": 4854,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "create_table": {
            "name": "create_table",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 4856,
            "doc": null,
            "endLine": 4858,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "create_table_sqlite": {
            "name": "create_table_sqlite",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 4860,
            "doc": null,
            "endLine": 4862,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "create_database": {
            "name": "create_database",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($database)\n  {\n    return $this->language->create_database(...\\func_get_args());\n  }",
            "startLine": 4864,
            "doc": null,
            "endLine": 4867,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "create_database_sqlite": {
            "name": "create_database_sqlite",
            "summary": "test",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($database)\n  {\n      file_put_contents($database,'');\n      if (is_file($database) ){\n        return  [\n          'engine' => 'sqlite',\n          'db' => $database\n        ];\n      }\n    }\n    return false;\n  }",
            "startLine": 4872,
            "doc": {
                "description": "test",
                "tags": []
            },
            "endLine": 4883,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "enable_last": {
            "name": "enable_last",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->last_enabled = true;\n  }",
            "startLine": 4885,
            "doc": null,
            "endLine": 4888,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "disable_last": {
            "name": "disable_last",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->last_enabled = false;\n  }",
            "startLine": 4890,
            "doc": null,
            "endLine": 4893,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "get_real_last_params": {
            "name": "get_real_last_params",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->last_real_params;\n  }",
            "startLine": 4895,
            "doc": null,
            "endLine": 4898,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "real_last": {
            "name": "real_last",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->last_real_query;\n  }",
            "startLine": 4900,
            "doc": null,
            "endLine": 4903,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_last_params": {
            "name": "get_last_params",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->last_params;\n  }",
            "startLine": 4905,
            "doc": null,
            "endLine": 4908,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_last_values": {
            "name": "get_last_values",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->last_params ? $this->last_params['values'] : null;\n  }",
            "startLine": 4910,
            "doc": null,
            "endLine": 4913,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "prepare": {
            "name": "prepare",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "doc": null,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "prepare",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "doc": null,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "statement",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "options",
                        "position": 1,
                        "type": "",
                        "required": false,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "statement",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "options",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "beginTransaction": {
            "name": "beginTransaction",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "doc": null,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "beginTransaction",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "doc": null,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "commit": {
            "name": "commit",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "doc": null,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "commit",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "doc": null,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "rollBack": {
            "name": "rollBack",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "doc": null,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "rollBack",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "doc": null,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "inTransaction": {
            "name": "inTransaction",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "doc": null,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "inTransaction",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "doc": null,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "setAttribute": {
            "name": "setAttribute",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "doc": null,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": {
                "name": "setAttribute",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "doc": null,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "attribute",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "value",
                        "position": 1,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "attribute",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "exec": {
            "name": "exec",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "doc": null,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "exec",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "doc": null,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "query",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "lastInsertId": {
            "name": "lastInsertId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "doc": null,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "lastInsertId",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "doc": null,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "seqname",
                        "position": 0,
                        "type": "",
                        "required": false,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "seqname",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "errorCode": {
            "name": "errorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "doc": null,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "errorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "doc": null,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "errorInfo": {
            "name": "errorInfo",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "doc": null,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "errorInfo",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "doc": null,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getAttribute": {
            "name": "getAttribute",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "doc": null,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "getAttribute",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "doc": null,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "attribute",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "attribute",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "quote": {
            "name": "quote",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "doc": null,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "quote",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "doc": null,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "string",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "paramtype",
                        "position": 1,
                        "type": "",
                        "required": false,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "string",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "paramtype",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "__wakeup": {
            "name": "__wakeup",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": true,
            "code": "",
            "startLine": false,
            "doc": null,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "__wakeup",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": true,
                "code": "",
                "startLine": false,
                "doc": null,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__sleep": {
            "name": "__sleep",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": true,
            "code": "",
            "startLine": false,
            "doc": null,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "__sleep",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": true,
                "code": "",
                "startLine": false,
                "doc": null,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getAvailableDrivers": {
            "name": "getAvailableDrivers",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "doc": null,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getAvailableDrivers",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": true,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "doc": null,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "get_instance": {
            "name": "get_instance",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 25,
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "endLine": 27,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "retriever_exists": {
            "name": "retriever_exists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\db",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 29,
            "doc": null,
            "endLine": 31,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        }
    },
    "properties": {
        "last_error": {
            "visibility": "public",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "name": "$last",
                        "description": "error"
                    }
                ]
            }
        },
        "debug": {
            "visibility": "public",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ]
            }
        },
        "engine": {
            "visibility": "public",
            "doc": {
                "description": "The ODBC engine of this connection",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "name": "$engine"
                    }
                ]
            }
        },
        "host": {
            "visibility": "public",
            "doc": {
                "description": "The host of this connection",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "name": "$host"
                    }
                ]
            }
        },
        "username": {
            "visibility": "public",
            "doc": {
                "description": "The host of this connection",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "name": "$host"
                    }
                ]
            }
        },
        "current": {
            "visibility": "public",
            "doc": {
                "description": "The currently selected database",
                "tags": [
                    {
                        "tag": "var",
                        "type": "mixed",
                        "name": "$current"
                    }
                ]
            }
        }
    },
    "staticProperties": null,
    "constants": null,
    "numMethods": 169,
    "numProperties": 6,
    "numConstants": 0,
    "numStaticProperties": 0,
    "interfaceNames": [
        "bbn\\db\\actions",
        "bbn\\db\\api",
        "bbn\\db\\engines"
    ],
    "isInterface": false,
    "traitNames": [
        "bbn\\models\\tts\\cache",
        "bbn\\models\\tts\\retriever"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "PDO",
    "isSubclassOf": false,
    "defaultProperties": {
        "write_kinds": [
            "INSERT",
            "UPDATE",
            "DELETE",
            "DROP",
            "ALTER",
            "CREATE"
        ],
        "structure_kinds": [
            "DROP",
            "ALTER",
            "CREATE"
        ],
        "has_error_all": false,
        "line": "---------------------------------------------------------------------------------",
        "retriever_instance": {
            "last_error": false,
            "debug": false,
            "engine": "sqlite",
            "host": "\/home\/thomas\/domains\/cdn.thomas.lan\/_appui\/src\/data\/db\/",
            "username": null,
            "current": "main"
        },
        "retriever_exists": true,
        "last_enabled": true,
        "parser": null,
        "cache": [],
        "fancy": 1,
        "debug_queries": [],
        "has_error": false,
        "triggers": {
            "SELECT": {
                "before": [],
                "after": []
            },
            "INSERT": {
                "before": [],
                "after": []
            },
            "UPDATE": {
                "before": [],
                "after": []
            },
            "DELETE": {
                "before": [],
                "after": []
            }
        },
        "triggers_disabled": false,
        "hash": null,
        "language": false,
        "cache_renewal": 3600,
        "max_queries": 50,
        "last_insert_id": null,
        "id_just_inserted": null,
        "hash_contour": "__BBN__",
        "last_query": null,
        "last_params": {
            "sequences": false,
            "values": false
        },
        "last_real_query": null,
        "last_real_params": {
            "sequences": false,
            "values": false
        },
        "last_cfg": null,
        "last_prepared": null,
        "queries": [],
        "cfgs": [],
        "qte": null,
        "on_error": "stop_all",
        "last_error": false,
        "debug": false,
        "engine": null,
        "host": null,
        "username": null,
        "current": null,
        "_cache_prefix": null,
        "cache_engine": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn",
    "shortName": "db"
}