{
    "doc": {
        "description": "Half ORM half DB management, the simplest class for data queries.\n *\nHello world!",
        "tags": {
            "package": "Bbn",
            "author": "Thomas Nabet <thomas.nabet@gmail.com>",
            "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT",
            "version": "Release: <package_version>",
            "link": "https:\/\/bbn.io\/bbn-php\/doc\/class\/db",
            "since": "Apr 4, 2011, 23:23:55 +0000",
            "todo": "Check for the tables and column names legality in _treat_arguments"
        }
    },
    "name": "bbn\\Db",
    "namespace": true,
    "traits": [
        "bbn\\Models\\Tts\\Cache",
        "bbn\\Models\\Tts\\Retriever"
    ],
    "interfaces": {
        "bbn\\Db\\Actions": {
            "name": "bbn\\Db\\Actions"
        },
        "bbn\\Db\\Api": {
            "name": "bbn\\Db\\Api"
        },
        "bbn\\Db\\Engines": {
            "name": "bbn\\Db\\Engines"
        }
    },
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/db.php",
    "startLine": 18,
    "endLine": 5549,
    "contentConstructor": {
        "file": "bbn\\Db",
        "returns": null
    },
    "methods": {
        "is_engine_supported": {
            "name": "is_engine_supported",
            "summary": "Says if the given database engine is supported or not",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($engine)\n  {\n    return isset(self::$engines[$engine]);\n  }",
            "startLine": 269,
            "endLine": 272,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "engine",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_engine_icon": {
            "name": "get_engine_icon",
            "summary": "Returns the icon (CSS class from nerd fonts) for the given db engine",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($engine)\n  {\n    return self::$engines[$engine] ?? null;\n  }",
            "startLine": 282,
            "endLine": 285,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "engine",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "create_database_sqlite": {
            "name": "create_database_sqlite",
            "summary": "test",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($database)\n  {\n    if (!is_file($database)) {\n      file_put_contents($database,'');\n      if (is_file($database)) {\n        return [\n          'engine' => 'sqlite',\n          'db' => $database\n        ];\n      }\n    }\n\n    return false;\n  }",
            "startLine": 291,
            "endLine": 304,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_log_line": {
            "name": "get_log_line",
            "summary": "Returns a string with the given text in the middle of a \"line\" of logs.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($text = '')\n  {\n    if ($text) {\n      $text = ' '.$text.' ';\n    }\n\n    $tot  = \\strlen(self::LINE) - \\strlen($text);\n    $char = \\substr(self::LINE, 0, 1);\n    return \\str_repeat($char, floor($tot \/ 2)).$text.\\str_repeat($char, ceil($tot \/ 2));\n  }",
            "startLine": 314,
            "endLine": 323,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "text",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "__construct": {
            "name": "__construct",
            "summary": "Constructor",
            "description": "*\n```php\n$dbtest = new bbn\\Db(['db_user' => 'test','db_engine' => 'mysql','db_host' => 'host','db_pass' => 't6pZDwRdfp4IM']);\n \/\/ (void)\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "$dbtest = new bbn\\Db(['db_user' => 'test','db_engine' => 'mysql','db_host' => 'host','db_pass' => 't6pZDwRdfp4IM']);\n \/\/ (void)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg = [])\n  {\n    if (\\defined('BBN_DB_ENGINE') && !isset($cfg['engine'])) {\n      $cfg['engine'] = BBN_DB_ENGINE;\n    }\n\n    if (isset($cfg['engine'])) {\n      $engine = $cfg['engine'];\n      $db     = $cfg['db'] ?? (defined('BBN_DATABASE') ? BBN_DATABASE : '?');\n      $cls    = '\\\\bbn\\\\db\\\\languages\\\\'.$engine;\n      if (!class_exists($cls)) {\n        die(\"Sorry the engine class $engine does not exist\");\n      }\n\n      self::retrieverInit($this);\n      $this->cacheInit();\n      $this->language = new $cls($this);\n      if (isset($cfg['on_error'])) {\n        $this->on_error = $cfg['on_error'];\n      }\n\n      if ($cfg = $this->getConnection($cfg)) {\n        $this->qte = $this->language->qte;\n        try{\n          parent::__construct(...($cfg['args'] ?: []));\n        }\n        catch (\\PDOException $e){\n          $err = _(\"Impossible to create the connection\").\" $engine\/$db \"\n                 ._(\"with the following error\").$e->getMessage();\n          throw new \\Exception($err);\n        }\n        $this->language->postCreation();\n        $this->current  = $cfg['db'] ?? null;\n        $this->engine   = $cfg['engine'];\n        $this->host     = $cfg['host'] ?? '127.0.0.1';\n        $this->username = $cfg['user'] ?? null;\n        $this->connection_code = $cfg['code_host'];\n        $this->hash     = $this->_make_hash($cfg['args']);\n        $this->setAttribute(\\PDO::ATTR_ERRMODE, \\PDO::ERRMODE_EXCEPTION);\n        if (!empty($cfg['cache_length'])) {\n          $this->cache_renewal = (int)$cfg['cache_length'];\n        }\n\n        $this->startFancyStuff();\n        if (!empty($cfg['error_mode'])) {\n          $this->setErrorMode($cfg['error_mode']);\n        }\n      }\n    }\n\n    if (!$this->engine) {\n      $connection  = $cfg['engine'] ?? 'No engine';\n      $connection .= '\/'.($cfg['db'] ?? 'No DB');\n      $this->log(_(\"Impossible to create the connection for\").' '.$connection);\n      throw new \\Exception(_(\"Impossible to create the connection for\").' '.$connection);\n    }\n  }",
            "startLine": 335,
            "endLine": 391,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "__construct",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "dsn",
                        "position": 0,
                        "type": null,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "username",
                        "position": 1,
                        "type": null,
                        "required": false,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "passwd",
                        "position": 2,
                        "type": null,
                        "required": false,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "options",
                        "position": 3,
                        "type": null,
                        "required": false,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Mandatory db_user db_engine db_host db_pass"
                }
            ]
        },
        "get_engine": {
            "name": "get_engine",
            "summary": "Returns the engine used by the current connection.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->engine;\n  }",
            "startLine": 399,
            "endLine": 402,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_host": {
            "name": "get_host",
            "summary": "Returns the host of the current connection.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->host;\n  }",
            "startLine": 410,
            "endLine": 413,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_current": {
            "name": "get_current",
            "summary": "Returns the current database selected by the current connection.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->current;\n  }",
            "startLine": 421,
            "endLine": 424,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_last_error": {
            "name": "get_last_error",
            "summary": "Returns the last error.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->last_error;\n  }",
            "startLine": 432,
            "endLine": 435,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "is_aggregate_function": {
            "name": "is_aggregate_function",
            "summary": "Returns true if the column name is an aggregate function",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($f)\n  {\n    $cls = '\\\\bbn\\\\db\\\\languages\\\\'.$this->engine;\n    return $cls::isAggregateFunction($f);\n  }",
            "startLine": 444,
            "endLine": 448,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "f",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "__toString": {
            "name": "__toString",
            "summary": "Makes that echoing the connection shows its engin and host.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return \"Connection {$this->engine} to {$this->host}\";\n  }",
            "startLine": 456,
            "endLine": 459,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "get_connection_code": {
            "name": "get_connection_code",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->connection_code;\n  }",
            "startLine": 462,
            "endLine": 465,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "get_hash": {
            "name": "get_hash",
            "summary": "Gets the last hash created.",
            "description": "*\n```php\nx::dump($db->getHash());\n\/\/ (string) 3819056v431b210daf45f9b5dc2\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getHash());\n\/\/ (string) 3819056v431b210daf45f9b5dc2"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->hash;\n  }",
            "startLine": 488,
            "endLine": 491,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "replace_table_in_conditions": {
            "name": "replace_table_in_conditions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $conditions, $old_name, $new_name)\n  {\n    return X::map(\n      function ($a) use ($old_name, $new_name) {\n        if (!empty($a['field'])) {\n          $a['field'] = preg_replace(\"\/(\\\\W|^)$old_name([\\\\`\\\\']*\\\\s*)\\\\.\/\", '$1'.$new_name.'$2.', $a['field']);\n        }\n\n        if (!empty($a['exp'])) {\n          $a['exp'] = preg_replace(\"\/(\\\\W|^)$old_name([\\\\`\\\\']*\\\\s*)\\\\.\/\", '$1'.$new_name.'$2.', $a['exp']);\n        }\n\n        return $a;\n      }, $conditions, 'conditions'\n    );\n  }",
            "startLine": 494,
            "endLine": 509,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "conditions",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "old_name",
                    "position": 1,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "new_name",
                    "position": 2,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "retrieve_query": {
            "name": "retrieve_query",
            "summary": "Retrieves a query array based on its hash.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($hash)\n  {\n    if (isset($this->queries[$hash])) {\n      if (\\is_string($this->queries[$hash])) {\n        $hash = $this->queries[$hash];\n      }\n\n      return $this->queries[$hash];\n    }\n\n    return null;\n  }",
            "startLine": 517,
            "endLine": 528,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "hash",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "retrieve_cfg": {
            "name": "retrieve_cfg",
            "summary": "Retrieves a configuration array based on its hash.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($hash)\n  {\n    return $this->cfgs[$hash] ?? null;\n  }",
            "startLine": 536,
            "endLine": 539,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "hash",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "treat_conditions": {
            "name": "treat_conditions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $where, $full = true)\n  {\n    if (!isset($where['conditions'])) {\n      $where['conditions'] = $where;\n    }\n\n    if (isset($where['conditions']) && \\is_array($where['conditions'])) {\n      if (!isset($where['logic']) || (strtoupper($where['logic']) !== 'OR')) {\n        $where['logic'] = 'AND';\n      }\n\n      $res = [\n        'conditions' => [],\n        'logic' => $where['logic']\n      ];\n      foreach ($where['conditions'] as $key => $f){\n        $is_array = \\is_array($f);\n        if ($is_array\n            && array_key_exists('conditions', $f)\n            && \\is_array($f['conditions'])\n        ) {\n          $res['conditions'][] = $this->treatConditions($f, false);\n        }\n        else {\n          if (\\is_string($key)) {\n            \/\/ 'id_user' => [1, 2] Will do OR\n            if (!$is_array) {\n              if (null === $f) {\n                $f = [\n                  'field' => $key,\n                  'operator' => 'isnull'\n                ];\n              }\n              else{\n                $f = [\n                  'field' => $key,\n                  'operator' => is_string($f) && !str::isUid($f) ? 'LIKE' : '=',\n                  'value' => $f\n                ];\n              }\n            }\n            elseif (isset($f[0])) {\n              $tmp = [\n                'conditions' => [],\n                'logic' => 'OR'\n              ];\n              foreach ($f as $v){\n                if (null === $v) {\n                  $tmp['conditions'][] = [\n                    'field' => $key,\n                    'operator' => 'isnull'\n                  ];\n                }\n                else{\n                  $tmp['conditions'][] = [\n                    'field' => $key,\n                    'operator' => is_string($f) && !str::isUid($f) ? 'LIKE' : '=',\n                    'value' => $v\n                  ];\n                }\n              }\n\n              $res['conditions'][] = $tmp;\n            }\n          }\n          elseif ($is_array && !x::isAssoc($f) && count($f) >= 2) {\n            $tmp = [\n              'field' => $f[0],\n              'operator' => $f[1]\n            ];\n            if (isset($f[3])) {\n              $tmp['exp'] = $f[3];\n            }\n            elseif (array_key_exists(2, $f)) {\n              if (is_array($f[2])) {\n                $tmp = [\n                  'conditions' => [],\n                  'logic' => 'AND'\n                ];\n                foreach ($f[2] as $v){\n                  if (null === $v) {\n                    $tmp['conditions'][] = [\n                      'field' => $f[0],\n                      'operator' => 'isnotnull'\n                    ];\n                  }\n                  else{\n                    $tmp['conditions'][] = [\n                      'field' => $f[0],\n                      'operator' => $f[1],\n                      'value' => $v\n                    ];\n                  }\n                }\n\n                $res['conditions'][] = $tmp;\n              }\n              elseif ($f[2] === null) {\n                $tmp['operator'] = $f[2] === '!=' ? 'isnotnull' : 'isnull';\n              }\n              else{\n                $tmp['value'] = $f[2];\n              }\n            }\n\n            $f = $tmp;\n          }\n\n          if (isset($f['field'])) {\n            if (!isset($f['operator'])) {\n              $f['operator'] = 'eq';\n            }\n\n            $res['conditions'][] = $f;\n          }\n        }\n      }\n\n      if ($full) {\n        $tmp = $this->_remove_conditions_value($res);\n        $res = [\n          'hashed' => $tmp['hashed'],\n          'values' => $tmp['values'],\n          'where' => $res\n        ];\n      }\n\n      return $res;\n    }\n\n    return false;\n  }",
            "startLine": 547,
            "endLine": 678,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "where",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "extract_fields": {
            "name": "extract_fields",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg, array $conditions, array &$res = NULL)\n  {\n    if (null === $res) {\n      $res = [];\n    }\n\n    if (isset($conditions['conditions'])) {\n      $conditions = $conditions['conditions'];\n    }\n\n    foreach ($conditions as $c) {\n      if (isset($c['conditions'])) {\n        $this->extractFields($cfg, $c['conditions'], $res);\n      }\n      else {\n        if (isset($c['field'], $cfg['available_fields'][$c['field']])) {\n          $res[] = $cfg['available_fields'][$c['field']] ? $this->cfn($c['field'], $cfg['available_fields'][$c['field']]) : $c['field'];\n        }\n\n        if (isset($c['exp'])) {\n          $res[] = $cfg['available_fields'][$c['exp']] ? $this->cfn($c['exp'], $cfg['available_fields'][$c['exp']]) : $c['exp'];\n        }\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 681,
            "endLine": 707,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "conditions",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "res",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "filter_filters": {
            "name": "filter_filters",
            "summary": "Retrieve an array of specific filters among the existing ones.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg, $field, $operator = NULL)\n  {\n    if (isset($cfg['filters'])) {\n      $f = function ($cond, &$res = []) use (&$f, $field, $operator) {\n        foreach ($cond as $c){\n          if (isset($c['conditions'])) {\n            $f($c['conditions'], $res);\n          }\n          elseif (($c['field'] === $field) && (!$operator || ($operator === $c['operator']))) {\n            $res[] = $c;\n          }\n        }\n\n        return $res;\n      };\n      return isset($cfg['filters']['conditions']) ? $f($cfg['filters']['conditions']) : [];\n    }\n\n    return null;\n  }",
            "startLine": 718,
            "endLine": 737,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "operator",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "get_values_desc": {
            "name": "get_values_desc",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $where, array $cfg, &$others = [])\n  {\n    if (!empty($where['conditions'])) {\n      foreach ($where['conditions'] as &$f){\n        if (isset($f['logic'], $f['conditions']) && \\is_array($f['conditions'])) {\n          $this->getValuesDesc($f, $cfg, $others);\n        }\n        elseif (array_key_exists('value', $f)) {\n          $desc = [\n            'primary' => false,\n            'type' => null,\n            'maxlength' => null,\n            'operator' => $f['operator'] ?? null\n          ];\n          if (isset($cfg['models'], $f['field'], $cfg['available_fields'][$f['field']])) {\n            $t = $cfg['available_fields'][$f['field']];\n            if (isset($cfg['models'], $f['field'], $cfg['tables_full'][$t], $cfg['models'][$cfg['tables_full'][$t]])\n                && ($model = $cfg['models'][$cfg['tables_full'][$t]])\n                && ($fname = $this->csn($f['field']))\n            ) {\n              if (!empty($model['fields'][$fname]['type'])) {\n                $desc = [\n                  'type' => $model['fields'][$fname]['type'],\n                  'maxlength' => $model['fields'][$fname]['maxlength'] ?? null,\n                  'operator' => $f['operator'] ?? null\n                ];\n              }\n              \/\/ Fixing filters using alias\n              elseif (isset($cfg['fields'][$f['field']])\n                  && ($fname = $this->csn($cfg['fields'][$f['field']]))\n                  && !empty($model['fields'][$fname]['type'])\n              ) {\n                $desc = [\n                  'type' => $model[$fname]['type'],\n                  'maxlength' => $model[$fname]['maxlength'] ?? null,\n                  'operator' => $f['operator'] ?? null\n                ];\n              }\n\n              if (!empty($desc['type'])\n                  && isset($model['keys']['PRIMARY'])\n                  && (count($model['keys']['PRIMARY']['columns']) === 1)\n                  && ($model['keys']['PRIMARY']['columns'][0] === $fname)\n              ) {\n                $desc['primary'] = true;\n              }\n            }\n          }\n\n          $others[] = $desc;\n        }\n      }\n    }\n\n    return $others;\n  }",
            "startLine": 745,
            "endLine": 800,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "where",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "others",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "arrange_conditions": {
            "name": "arrange_conditions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array &$conditions, array $cfg)\n  {\n    if (!empty($cfg['available_fields']) && isset($conditions['conditions'])) {\n      foreach ($conditions['conditions'] as &$c){\n        if (array_key_exists('conditions', $c) && \\is_array($c['conditions'])) {\n          $this->arrangeConditions($c, $cfg);\n        }\n        elseif (isset($c['field']) && empty($cfg['available_fields'][$c['field']]) && !$this->isColFullName($c['field'])) {\n          foreach ($cfg['tables'] as $t => $o){\n            if (isset($cfg['available_fields'][$this->colFullName($c['field'], $t)])) {\n              $c['field'] = $this->colFullName($c['field'], $t);\n              break;\n            }\n          }\n        }\n      }\n    }\n  }",
            "startLine": 803,
            "endLine": 820,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "conditions",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "reprocess_cfg": {
            "name": "reprocess_cfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    unset($cfg['bbn_db_processed']);\n    unset($cfg['bbn_db_treated']);\n    unset($this->cfgs[$cfg['hash']]);\n    $tmp = $this->processCfg($cfg, true);\n    if (!empty($cfg['values']) && (count($cfg['values']) === count($tmp['values']))) {\n      $tmp = array_merge($tmp, ['values' => $cfg['values']]);\n    }\n\n    return $tmp;\n  }",
            "startLine": 827,
            "endLine": 838,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "process_cfg": {
            "name": "process_cfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $args, $force = false)\n  {\n    \/\/ Avoid confusion when\n    while (\\is_array($args) && isset($args[0]) && \\is_array($args[0])){\n      $args = $args[0];\n    }\n\n    if (\\is_array($args) && !empty($args['bbn_db_processed'])) {\n      return $args;\n    }\n\n    if (empty($args['bbn_db_treated'])) {\n      $args = $this->_treat_arguments($args);\n    }\n\n    \/\/var_dump(\"UPD0\", $args);\n    if (isset($args['hash'])) {\n      if (isset($this->cfgs[$args['hash']])) {\n        return array_merge(\n          $this->cfgs[$args['hash']], [\n          'values' => $args['values'] ?: [],\n          'where' => $args['where'] ?: [],\n          'filters' => $args['filters'] ?: []\n          ]\n        );\n      }\n\n      \/** @var array $tables_full  Each of the tables' full name. *\/\n      $tables_full = [];\n      $res         = array_merge(\n        $args, [\n        'tables' => [],\n        'values_desc' => [],\n        'bbn_db_processed' => true,\n        'available_fields' => [],\n        'generate_id' => false\n        ]\n      );\n      $models      = [];\n\n      foreach ($args['tables'] as $key => $tab){\n        $tfn = $this->tfn($tab);\n\n        \/\/ 2 tables in the same statement can't have the same idx\n        $idx = \\is_string($key) ? $key : $tfn;\n        \/\/ Error if they do\n        if (isset($tables_full[$idx])) {\n          $this->error('You cannot use twice the same table with the same alias'.PHP_EOL.x::getDump($args['tables']));\n          return null;\n        }\n\n        $tables_full[$idx]   = $tfn;\n        $res['tables'][$idx] = $tfn;\n        if (!isset($models[$tfn]) && ($model = $this->modelize($tfn))) {\n          $models[$tfn] = $model;\n        }\n      }\n\n      if ((\\count($res['tables']) === 1)\n          && ($tfn = array_values($res['tables'])[0])\n          && isset($models[$tfn]['keys']['PRIMARY'])\n          && (\\count($models[$tfn]['keys']['PRIMARY']['columns']) === 1)\n          && ($res['primary'] = $models[$tfn]['keys']['PRIMARY']['columns'][0])\n      ) {\n        $p                     = $models[$tfn]['fields'][$res['primary']];\n        $res['auto_increment'] = isset($p['extra']) && ($p['extra'] === 'auto_increment');\n        $res['primary_length'] = $p['maxlength'];\n        $res['primary_type']   = $p['type'];\n        if (($res['kind'] === 'INSERT')\n            && !$res['auto_increment']\n            && !\\in_array($this->csn($res['primary']), $res['fields'], true)\n        ) {\n          $res['generate_id'] = true;\n          $res['fields'][]    = $res['primary'];\n        }\n      }\n\n      foreach ($args['join'] as $key => $join){\n        if (!empty($join['table']) && !empty($join['on'])) {\n          $tfn = $this->tfn($join['table']);\n          if (!isset($models[$tfn]) && ($model = $this->modelize($tfn))) {\n            $models[$tfn] = $model;\n          }\n\n          $idx               = $join['alias'] ?? $tfn;\n          $tables_full[$idx] = $tfn;\n        }\n        else{\n          $this->error('Error! The join array must have on and table defined'.PHP_EOL.x::getDump($join));\n        }\n      }\n\n      foreach ($tables_full as $idx => $tfn){\n        foreach ($models[$tfn]['fields'] as $col => $cfg){\n          $res['available_fields'][$this->cfn($col, $idx)] = $idx;\n          $csn                                             = $this->csn($col);\n          if (!isset($res['available_fields'][$csn])) {\n            \/*\n            $res['available_fields'][$csn] = false;\n            }\n            else{\n            *\/\n            $res['available_fields'][$csn] = $idx;\n          }\n        }\n      }\n\n      foreach ($res['fields'] as $idx => &$col){\n        if (strpos($col, '(')\n            || strpos($col, '-')\n            || strpos($col, \"+\")\n            || strpos($col, '*')\n            || strpos($col, \"\/\")\n            \/*\n          strpos($col, '->\"$.')  ||\n          strpos($col, \"->'$.\") ||\n          strpos($col, '->>\"$.')  ||\n          strpos($col, \"->>'$.\") ||\n          *\/\n            \/\/ String as value\n            || preg_match('\/^[\\\\\\'\\\"]{1}[^\\\\\\'\\\"]*[\\\\\\'\\\"]{1}$\/', $col)\n        ) {\n          $res['available_fields'][$col] = false;\n        }\n\n        if (\\is_string($idx)) {\n          if (!isset($res['available_fields'][$col])) {\n            \/\/$this->log($res);\n            $this->error(\"Impossible to find the column $col\");\n            $this->error(json_encode($res['available_fields'], JSON_PRETTY_PRINT));\n            return null;\n          }\n\n          $res['available_fields'][$idx] = $res['available_fields'][$col];\n        }\n      }\n\n      \/\/ From here the available fields are defined\n      if (!empty($res['filters'])) {\n        $this->arrangeConditions($res['filters'], $res);\n      }\n\n      unset($col);\n      $res['models']      = $models;\n      $res['tables_full'] = $tables_full;\n      switch ($res['kind']){\n        case 'SELECT':\n          if (empty($res['fields'])) {\n            foreach (array_keys($res['available_fields']) as $f){\n              if ($this->isColFullName($f)) {\n                $res['fields'][] = $f;\n              }\n            }\n          }\n\n          \/\/x::log($res, 'sql');\n          if ($res['select_st'] = $this->language->getSelect($res)) {\n            $res['sql'] = $res['select_st'];\n          }\n          break;\n        case 'INSERT':\n          $res = $this->removeVirtual($res);\n          if ($res['insert_st'] = $this->language->getInsert($res)) {\n            $res['sql'] = $res['insert_st'];\n          }\n\n          \/\/var_dump($res);\n          break;\n        case 'UPDATE':\n          $res = $this->removeVirtual($res);\n          if ($res['update_st'] = $this->getUpdate($res)) {\n            $res['sql'] = $res['update_st'];\n          }\n          break;\n        case 'DELETE':\n          if ($res['delete_st'] = $this->getDelete($res)) {\n            $res['sql'] = $res['delete_st'];\n          }\n          break;\n      }\n\n      $res['join_st']   = $this->language->getJoin($res);\n      $res['where_st']  = $this->language->getWhere($res);\n      $res['group_st']  = $this->language->getGroupBy($res);\n      $res['having_st'] = $this->language->getHaving($res);\n      $cls              = '\\\\bbn\\\\db\\\\languages\\\\'.$this->engine;\n      if (empty($res['count'])\n          && (count($res['fields']) === 1)\n          && ($cls::isAggregateFunction(reset($res['fields'])))\n      ) {\n        $res['order_st'] = '';\n        $res['limit_st'] = '';\n      }\n      else {\n        $res['order_st'] = $res['count'] ? '' : $this->language->getOrder($res);\n        $res['limit_st'] = $res['count'] ? '' : $this->language->getLimit($res);\n      }\n\n      if (!empty($res['sql'])) {\n        $res['sql'] .= $res['join_st'].$res['where_st'].$res['group_st'];\n        if ($res['count'] && $res['group_by']) {\n          $res['sql'] .= ') AS t '.PHP_EOL;\n        }\n\n        $res['sql']           .= $res['having_st'].$res['order_st'].$res['limit_st'];\n        $res['statement_hash'] = $this->_make_hash($res['sql']);\n\n        foreach ($res['join'] as $r){\n          $this->getValuesDesc($r['on'], $res, $res['values_desc']);\n        }\n\n        if (($res['kind'] === 'INSERT') || ($res['kind'] === 'UPDATE')) {\n          foreach ($res['fields'] as $name){\n            $desc = [];\n            if (isset($res['models'], $res['available_fields'][$name])) {\n              $t = $res['available_fields'][$name];\n              if (isset($tables_full[$t])\n                  && ($model = $res['models'][$tables_full[$t]]['fields'])\n                  && ($fname = $this->csn($name))\n                  && !empty($model[$fname]['type'])\n              ) {\n                $desc['type']      = $model[$fname]['type'];\n                $desc['maxlength'] = $model[$fname]['maxlength'] ?? null;\n              }\n            }\n\n            $res['values_desc'][] = $desc;\n          }\n        }\n\n        $this->getValuesDesc($res['filters'], $res, $res['values_desc']);\n        $this->getValuesDesc($res['having'], $res, $res['values_desc']);\n        $this->cfgs[$res['hash']] = $res;\n      }\n\n      return $res;\n    }\n\n    $this->error('Impossible to process the config (no hash)'.PHP_EOL.print_r($args, true));\n    return null;\n  }",
            "startLine": 846,
            "endLine": 1086,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "args",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "remove_virtual": {
            "name": "remove_virtual",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $res)\n  {\n    if (isset($res['fields'])) {\n      $to_remove = [];\n      foreach ($res['fields'] as $i => $f){\n        if (!empty($res['available_fields'][$f])\n            && isset($res['models'][$res['available_fields'][$f]]['fields'][$this->csn($f)])\n            && $res['models'][$res['available_fields'][$f]]['fields'][$this->csn($f)]['virtual']\n        ) {\n          array_unshift($to_remove, $i);\n        }\n      }\n\n      foreach ($to_remove as $i) {\n        array_splice($res['fields'], $i, 1);\n        array_splice($res['values'], $i, 1);\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1089,
            "endLine": 1109,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "res",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "error": {
            "name": "error",
            "summary": "Set an error and acts appropriately based oon the error mode",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($e)\n  {\n    $this->_has_error = true;\n    self::_set_has_error_all();\n    $msg = [\n      self::LINE,\n      self::getLogLine('ERROR DB!'),\n      self::LINE\n    ];\n    if (\\is_string($e)) {\n      $msg[] = self::getLogLine('USER MESSAGE');\n      $msg[] = $e;\n    }\n    elseif (method_exists($e, 'getMessage')) {\n      $msg[] = self::getLogLine('DB MESSAGE');\n      $msg[] = $e->getMessage();\n    }\n\n    $this->last_error = end($msg);\n    $msg[]            = self::getLogLine('QUERY');\n    $msg[]            = $this->last();\n    if ($this->last_real_params['values']) {\n      $msg[] = self::getLogLine('VALUES');\n      foreach ($this->last_real_params['values'] as $v){\n        if ($v === null) {\n          $msg[] = 'NULL';\n        }\n        elseif (\\is_bool($v)) {\n          $msg[] = $v ? 'TRUE' : 'FALSE';\n        }\n        elseif (\\is_string($v)) {\n          $msg[] = Str::isBuid($v) ? bin2hex($v) : Str::cut($v, 30);\n        }\n        else{\n          $msg[] = $v;\n        }\n      }\n    }\n\n    $msg[] = self::getLogLine('BACKTRACE');\n    $dbt   = array_reverse(debug_backtrace());\n    array_walk(\n      $dbt, function ($a, $i) use (&$msg) {\n        $msg[] = str_repeat(' ', $i).($i ? '->' : '').\"{$a['function']}  (\".basename(dirname($a['file'])).'\/'.basename($a['file']).\":{$a['line']})\";\n      }\n    );\n    $this->log(implode(PHP_EOL, $msg));\n    if ($this->on_error === self::E_DIE) {\n      die(\\defined('BBN_IS_DEV') && BBN_IS_DEV ? '<pre>'.PHP_EOL.implode(PHP_EOL, $msg).PHP_EOL.'<\/pre>' : 'Database error');\n    }\n  }",
            "startLine": 1118,
            "endLine": 1168,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "e",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "check": {
            "name": "check",
            "summary": "Checks if the database is ready to process a query.",
            "description": "*\n```php\nx::dump($db->check());\n\/\/ (bool)\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->check());\n\/\/ (bool)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->current !== null) {\n      \/\/ if $on_error is set to E_CONTINUE returns true\n      if ($this->on_error === self::E_CONTINUE) {\n        return true;\n      }\n\n      \/\/ If any connection has an error with mode E_STOP_ALL\n      if (self::$_has_error_all && ($this->on_error !== self::E_STOP_ALL)) {\n        return false;\n      }\n\n      \/\/ If this connection has an error with mode E_STOP\n      if ($this->_has_error && ($this->on_error !== self::E_STOP)) {\n        return false;\n      }\n\n      return true;\n    }\n\n    return false;\n  }",
            "startLine": 1180,
            "endLine": 1202,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "Writes in data\/logs\/db.log.",
            "description": "*\n```php\n$db->$db->log('test');\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "$db->$db->log('test');"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    $args = \\func_get_args();\n    foreach ($args as $a){\n      X::log($a, 'db');\n    }\n\n    return $this;\n  }",
            "startLine": 1214,
            "endLine": 1222,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "set_error_mode": {
            "name": "set_error_mode",
            "summary": "Sets the error mode.",
            "description": "*\n```php\n$db->setErrorMode('continue'|'die'|'stop_all|'stop');\n\/\/ (void)\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "$db->setErrorMode('continue'|'die'|'stop_all|'stop');\n\/\/ (void)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($mode)\n  {\n    $this->on_error = $mode;\n    return $this;\n  }",
            "startLine": 1236,
            "endLine": 1240,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "mode",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_error_mode": {
            "name": "get_error_mode",
            "summary": "Gets the error mode.",
            "description": "*\n```php\nx::dump($db->getErrorMode());\n\/\/ (string) stop_all\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getErrorMode());\n\/\/ (string) stop_all"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->on_error;\n  }",
            "startLine": 1252,
            "endLine": 1255,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "clear_cache": {
            "name": "clear_cache",
            "summary": "Deletes a specific item from the cache.",
            "description": "*\n```php\nx::dump($db->clearCache('db_example','tables'));\n\/\/ (db)\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->clearCache('db_example','tables'));\n\/\/ (db)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($item, $mode)\n  {\n    $cache_name = $this->_cache_name($item, $mode);\n    if ($this->cacheHas($cache_name)) {\n      $this->cacheDelete($cache_name);\n    }\n\n    return $this;\n  }",
            "startLine": 1270,
            "endLine": 1278,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "'columns','tables' or 'databases'"
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "clear_all_cache": {
            "name": "clear_all_cache",
            "summary": "Clears the cache.",
            "description": "*\n```php\nx::dump($db->clearAllCache());\n\/\/ (db)\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->clearAllCache());\n\/\/ (db)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->cacheDeleteAll();\n    return $this;\n  }",
            "startLine": 1291,
            "endLine": 1295,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "stop_fancy_stuff": {
            "name": "stop_fancy_stuff",
            "summary": "Stops fancy stuff.",
            "description": "*\n```php\n $db->stopFancyStuff();\n\/\/ (void)\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "$db->stopFancyStuff();\n\/\/ (void)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->setAttribute(\\PDO::ATTR_STATEMENT_CLASS, [\\PDOStatement::class]);\n    $this->_fancy = false;\n    return $this;\n  }",
            "startLine": 1308,
            "endLine": 1313,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "start_fancy_stuff": {
            "name": "start_fancy_stuff",
            "summary": "Starts fancy stuff.",
            "description": "*\n```php\n$db->startFancyStuff();\n\/\/ (void)\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "$db->startFancyStuff();\n\/\/ (void)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->setAttribute(\\PDO::ATTR_STATEMENT_CLASS, [db\\query::class, [$this]]);\n    $this->_fancy = 1;\n    return $this;\n  }",
            "startLine": 1325,
            "endLine": 1330,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "clear": {
            "name": "clear",
            "summary": "Clear.",
            "description": "*\n```php\n$db->clear()\n\/\/ (void)\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "$db->clear()\n\/\/ (void)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->queries      = [];\n    $this->list_queries = [];\n    return $this;\n  }",
            "startLine": 1343,
            "endLine": 1348,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "add_statement": {
            "name": "add_statement",
            "summary": "Return an object with all the properties of the statement and where it is carried out.",
            "description": "*\n```php\nx::dump($db->addStatement('SELECT name FROM table_users'));\n\/\/ (db)\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->addStatement('SELECT name FROM table_users'));\n\/\/ (db)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($statement, $params)\n  {\n    $this->last_real_query  = $statement;\n    $this->last_real_params = $params;\n    if ($this->_last_enabled) {\n      $this->last_query  = $statement;\n      $this->last_params = $params;\n    }\n\n    return $this;\n  }",
            "startLine": 1362,
            "endLine": 1372,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "statement",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "params",
                    "position": 1,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "enable_trigger": {
            "name": "enable_trigger",
            "summary": "Enable the triggers' functions",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->_triggers_disabled = false;\n    return $this;\n  }",
            "startLine": 1389,
            "endLine": 1393,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "disable_trigger": {
            "name": "disable_trigger",
            "summary": "Disable the triggers' functions",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->_triggers_disabled = true;\n    return $this;\n  }",
            "startLine": 1401,
            "endLine": 1405,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "is_trigger_enabled": {
            "name": "is_trigger_enabled",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return !$this->_triggers_disabled;\n  }",
            "startLine": 1408,
            "endLine": 1411,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "is_trigger_disabled": {
            "name": "is_trigger_disabled",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_triggers_disabled;\n  }",
            "startLine": 1414,
            "endLine": 1417,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "set_trigger": {
            "name": "set_trigger",
            "summary": "Apply a function each time the methods $kind are used",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($function, $kind = NULL, $moment = NULL, $tables = '*')\n  {\n    $kinds   = ['SELECT', 'INSERT', 'UPDATE', 'DELETE'];\n    $moments = ['before', 'after'];\n    if (empty($kind)) {\n      $kind = $kinds;\n    }\n    elseif (!\\is_array($kind)) {\n      $kind = (array)strtoupper($kind);\n    }\n    else{\n      $kind = array_map('strtoupper', $kind);\n    }\n\n    if (empty($moment)) {\n      $moment = $moments;\n    }\n    else {\n      $moment = !\\is_array($moment) ? (array)strtolower($moment) : array_map('strtolower', $moment);\n    }\n\n    foreach ($kind as $k){\n      if (\\in_array($k, $kinds, true)) {\n        foreach ($moment as $m){\n          if (array_key_exists($m, $this->_triggers[$k]) && \\in_array($m, $moments, true)) {\n            if ($tables === '*') {\n              $tables = $this->getTables();\n            }\n            elseif (str::checkName($tables)) {\n              $tables = [$tables];\n            }\n\n            if (\\is_array($tables)) {\n              foreach ($tables as $table){\n                $t = $this->tfn($table);\n                if (!isset($this->_triggers[$k][$m][$t])) {\n                  $this->_triggers[$k][$m][$t] = [];\n                }\n\n                $this->_triggers[$k][$m][$t][] = $function;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return $this;\n  }",
            "startLine": 1429,
            "endLine": 1477,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "function",
                    "position": 0,
                    "type": "callable",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "select|insert|update|delete"
                },
                {
                    "name": "kind",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "before|after"
                },
                {
                    "name": "moment",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "database's table(s) name(s)"
                },
                {
                    "name": "tables",
                    "position": 3,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "*",
                    "default_name": ""
                }
            ]
        },
        "get_triggers": {
            "name": "get_triggers",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_triggers;\n  }",
            "startLine": 1483,
            "endLine": 1486,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "get_fields_list": {
            "name": "get_fields_list",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($tables)\n  {\n    $res = [];\n    if (!\\is_array($tables)) {\n      $tables = [$tables];\n    }\n\n    foreach ($tables as $t){\n      if (!($model = $this->getColumns($t))) {\n        $this->error('Impossible to find the table '.$t);\n        die('Impossible to find the table '.$t);\n      }\n\n      foreach (array_keys($model) as $f){\n        $res[] = $this->cfn($f, $t);\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1502,
            "endLine": 1521,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "tables",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_foreign_keys": {
            "name": "get_foreign_keys",
            "summary": "Return an array with tables and fields related to the searched foreign key.",
            "description": "*\n```php\nx::dump($db->getForeignKeys('id', 'table_users', 'db_example'));\n\/\/ (Array)\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getForeignKeys('id', 'table_users', 'db_example'));\n\/\/ (Array)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($col, $table, $db = NULL)\n  {\n    if (!$db) {\n      $db = $this->current;\n    }\n\n    $res   = [];\n    $model = $this->modelize();\n    foreach ($model as $tn => $m){\n      foreach ($m['keys'] as $k => $t){\n        if (($t['ref_table'] === $table)\n            && ($t['ref_column'] === $col)\n            && ($t['ref_db'] === $db)\n            && (\\count($t['columns']) === 1)\n        ) {\n          if (!isset($res[$tn])) {\n            $res[$tn] = [$t['columns'][0]];\n          }\n          else{\n            $res[$tn][] = $t['columns'][0];\n          }\n        }\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1537,
            "endLine": 1563,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The database name if different from the current one"
                },
                {
                    "name": "db",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "has_id_increment": {
            "name": "has_id_increment",
            "summary": "Return true if in the table there are fields with auto-increment.",
            "description": "Working only on mysql.\n   *\n```php\nx::dump($db->hasIdIncrement('table_users'));\n\/\/ (bool) 1\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Working only on mysql.\n*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->hasIdIncrement('table_users'));\n\/\/ (bool) 1"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    return ($model = $this->modelize($table)) &&\n      isset($model['keys']['PRIMARY']) &&\n      (\\count($model['keys']['PRIMARY']['columns']) === 1) &&\n      ($model['fields'][$model['keys']['PRIMARY']['columns'][0]]['extra'] === 'auto_increment');\n  }",
            "startLine": 1578,
            "endLine": 1584,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "modelize": {
            "name": "modelize",
            "summary": "Return the table's structure as an indexed array.",
            "description": "*\n```php\nx::dump($db->modelize(\"table_users\"));\n\/\/ (array) [keys] => Array ( [PRIMARY] => Array ( [columns] => Array ( [0] => userid [1] => userdataid ) [ref_db] => [ref_table] => [ref_column] => [unique] => 1 )     [table_users_userId_userdataId_info] => Array ( [columns] => Array ( [0] => userid [1] => userdataid [2] => info ) [ref_db] => [ref_table] => [ref_column] =>     [unique] => 0 ) ) [cols] => Array ( [userid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [userdataid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [info] => Array ( [0] => table_users_userId_userdataId_info ) ) [fields] => Array ( [userid] => Array ( [position] => 1 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [userdataid] => Array ( [position] => 2 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [info] => Array ( [position] => 3 [null] => 1 [key] => [default] => NULL [extra] => [signed] => 0 [maxlength] => 200 [type] => varchar ) )\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->modelize(\"table_users\"));\n\/\/ (array) [keys] => Array ( [PRIMARY] => Array ( [columns] => Array ( [0] => userid [1] => userdataid ) [ref_db] => [ref_table] => [ref_column] => [unique] => 1 )     [table_users_userId_userdataId_info] => Array ( [columns] => Array ( [0] => userid [1] => userdataid [2] => info ) [ref_db] => [ref_table] => [ref_column] =>     [unique] => 0 ) ) [cols] => Array ( [userid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [userdataid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [info] => Array ( [0] => table_users_userId_userdataId_info ) ) [fields] => Array ( [userid] => Array ( [position] => 1 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [userdataid] => Array ( [position] => 2 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [info] => Array ( [position] => 3 [null] => 1 [key] => [default] => NULL [extra] => [signed] => 0 [maxlength] => 200 [type] => varchar ) )"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table = NULL, $force = false)\n  {\n    $r      = [];\n    $tables = false;\n    if (empty($table) || ($table === '*')) {\n      $tables = $this->getTables($this->current);\n    }\n    elseif (\\is_string($table)) {\n      $tables = [$table];\n    }\n    elseif (\\is_array($table)) {\n      $tables = $table;\n    }\n\n    if (\\is_array($tables)) {\n      foreach ($tables as $t) {\n        if ($full = $this->tfn($t)) {\n          $r[$full] = $this->_get_cache($full, 'columns', $force);\n        }\n      }\n\n      if (\\count($r) === 1) {\n        return end($r);\n      }\n\n      return $r;\n    }\n\n    return null;\n  }",
            "startLine": 1599,
            "endLine": 1628,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "If set to true will force the modelization to reperform even if the cache exists"
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "fmodelize": {
            "name": "fmodelize",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table = '', $force = false)\n  {\n    if ($res = $this->modelize(...\\func_get_args())) {\n      foreach ($res['fields'] as $n => $f){\n        $res['fields'][$n]['name'] = $n;\n        $res['fields'][$n]['keys'] = [];\n        if (isset($res['cols'][$n])) {\n          foreach ($res['cols'][$n] as $key){\n            $res['fields'][$n]['keys'][$key] = $res['keys'][$key];\n          }\n        }\n      }\n\n      return $res['fields'];\n    }\n\n    return null;\n  }",
            "startLine": 1636,
            "endLine": 1653,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "find_references": {
            "name": "find_references",
            "summary": "find_references",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($column, $db = '')\n  {\n    $changed = false;\n    if ($db && ($db !== $this->current)) {\n      $changed = $this->current;\n      $this->change($db);\n    }\n\n    $column = $this->cfn($column);\n    $bits   = explode('.', $column);\n    if (\\count($bits) === 2) {\n      array_unshift($bits, $this->current);\n    }\n\n    if (\\count($bits) !== 3) {\n      return false;\n    }\n\n    $refs   = [];\n    $schema = $this->modelize();\n    $test   = function ($key) use ($bits) {\n      return ($key['ref_db'] === $bits[0]) && ($key['ref_table'] === $bits[1]) && ($key['ref_column'] === $bits[2]);\n    };\n    foreach ($schema as $table => $cfg){\n      foreach ($cfg['keys'] as $k){\n        if ($test($k)) {\n          $refs[] = $table.'.'.$k['columns'][0];\n        }\n      }\n    }\n\n    if ($changed) {\n      $this->change($changed);\n    }\n\n    return $refs;\n  }",
            "startLine": 1664,
            "endLine": 1700,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "find_relations": {
            "name": "find_relations",
            "summary": "find_relations",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($column, $db = '')\n  {\n    $changed = false;\n    if ($db && ($db !== $this->current)) {\n      $changed = $this->current;\n      $this->change($db);\n    }\n\n    $column = $this->cfn($column);\n    $bits   = explode('.', $column);\n    if (\\count($bits) === 2) {\n      array_unshift($bits, $db ?: $this->current);\n    }\n\n    if (\\count($bits) !== 3) {\n      return null;\n    }\n\n    $table  = $bits[1];\n    $refs   = [];\n    $schema = $this->modelize();\n    $test   = function ($key) use ($bits) {\n      return ($key['ref_db'] === $bits[0]) && ($key['ref_table'] === $bits[1]) && ($key['ref_column'] === $bits[2]);\n    };\n    foreach ($schema as $tf => $cfg){\n      $t = $this->tsn($tf);\n      if ($t !== $table) {\n        foreach ($cfg['keys'] as $k){\n          if ($test($k)) {\n            foreach ($cfg['keys'] as $k2){\n              \/\/ Is not the same table\n              if (!$test($k2)\n                  \/\/ Has a reference\n                  && !empty($k2['ref_column'])\n                  \/\/ and refers to a single column\n                  && (\\count($k['columns']) === 1)\n                  \/\/ A unique reference\n                  && (\\count($k2['columns']) === 1)\n                  \/\/ To a table with a primary\n                  && isset($schema[$this->tfn($k2['ref_table'])]['cols'][$k2['ref_column']])\n                  \/\/ which is a sole column\n                  && (\\count($schema[$this->tfn($k2['ref_table'])]['cols'][$k2['ref_column']]) === 1)\n                  \/\/ We retrieve the key name\n                  && ($key_name = $schema[$this->tfn($k2['ref_table'])]['cols'][$k2['ref_column']][0])\n                  \/\/ which is unique\n                  && !empty($schema[$this->tfn($k2['ref_table'])]['keys'][$key_name]['unique'])\n              ) {\n                if (!isset($refs[$t])) {\n                  $refs[$t] = ['column' => $k['columns'][0], 'refs' => []];\n                }\n\n                $refs[$t]['refs'][$k2['columns'][0]] = $k2['ref_table'].'.'.$k2['ref_column'];\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if ($changed) {\n      $this->change($changed);\n    }\n\n    return $refs;\n  }",
            "startLine": 1710,
            "endLine": 1774,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_primary": {
            "name": "get_primary",
            "summary": "Return primary keys of a table as a numeric array.",
            "description": "*\n```php\nx::dump($db-> get_primary('table_users'));\n\/\/ (array) [\"id\"]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db-> get_primary('table_users'));\n\/\/ (array) [\"id\"]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    if (($keys = $this->getKeys($table)) && isset($keys['keys']['PRIMARY'])) {\n      return $keys['keys']['PRIMARY']['columns'];\n    }\n\n    return [];\n  }",
            "startLine": 1788,
            "endLine": 1795,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_unique_primary": {
            "name": "get_unique_primary",
            "summary": "Return the unique primary key of the given table.",
            "description": "*\n```php\nx::dump($db->getUniquePrimary('table_users'));\n\/\/ (string) id\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getUniquePrimary('table_users'));\n\/\/ (string) id"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    if (($keys = $this->getKeys($table))\n        && isset($keys['keys']['PRIMARY'])\n        && (\\count($keys['keys']['PRIMARY']['columns']) === 1)\n    ) {\n      return $keys['keys']['PRIMARY']['columns'][0];\n    }\n\n    return null;\n  }",
            "startLine": 1809,
            "endLine": 1819,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_unique_keys": {
            "name": "get_unique_keys",
            "summary": "Return the unique keys of a table as a numeric array.",
            "description": "*\n```php\nx::dump($db->getUniqueKeys('table_users'));\n\/\/ (array) [\"userid\", \"userdataid\"]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getUniqueKeys('table_users'));\n\/\/ (array) [\"userid\", \"userdataid\"]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    $fields = [[]];\n    if ($ks = $this->getKeys($table)) {\n      foreach ($ks['keys'] as $k){\n        if ($k['unique']) {\n          return $k['columns'];\n        }\n      }\n    }\n\n    return [];\n  }",
            "startLine": 1833,
            "endLine": 1845,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "escape_value": {
            "name": "escape_value",
            "summary": "Return a string with quotes and percent escaped.",
            "description": "*\n```php\nx::dump($db->escapeValue(\"My father's job is interesting\");\n\/\/ (string) My  father\\'s  job  is  interesting\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->escapeValue(\"My father's job is interesting\");\n\/\/ (string) My  father\\'s  job  is  interesting"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($value, $esc = '\\'')\n  {\n    return str_replace(\n      '%', '\\\\%', $esc === '\"' ? Str::escapeDquotes($value) : Str::escapeSquotes($value)\n    );\n  }",
            "startLine": 1870,
            "endLine": 1875,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "value",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "esc",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "'",
                    "default_name": ""
                }
            ]
        },
        "set_last_insert_id": {
            "name": "set_last_insert_id",
            "summary": "Changes the value of last_insert_id (used by history).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id = '')\n  {\n    if ($id === '') {\n      if ($this->id_just_inserted) {\n        $id                     = $this->id_just_inserted;\n        $this->id_just_inserted = null;\n      }\n      else{\n        $id = $this->lastInsertId();\n        if (\\is_string($id) && Str::isInteger($id) && ((int)$id != PHP_INT_MAX)) {\n          $id = (int)$id;\n        }\n      }\n    }\n    else{\n      $this->id_just_inserted = $id;\n    }\n\n    $this->last_insert_id = $id;\n    return $this;\n  }",
            "startLine": 1889,
            "endLine": 1909,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The last inserted id"
                }
            ]
        },
        "parse_query": {
            "name": "parse_query",
            "summary": "Parses a SQL query and return an array.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($statement)\n  {\n    if ($this->_parser === null) {\n      $this->_parser = new \\PHPSQLParser\\PHPSQLParser();\n    }\n\n    $done = false;\n    try {\n      $r    = $this->_parser->parse($statement);\n      $done = 1;\n    }\n    catch (\\Exception $e){\n      $this->log('Error while parsing the query '.$statement);\n    }\n\n    if ($done) {\n      if (!$r || !count($r)) {\n        $this->log('Impossible to parse the query '.$statement);\n        return null;\n      }\n\n      if (isset($r['BRACKET']) && (\\count($r) === 1)) {\n        \/** @todo Is it impossible to parse queries with brackets ? *\/\n        \/\/throw new \\Exception('Bracket in the query '.$statement);\n        return null;\n      }\n\n      return $r;\n    }\n\n    return null;\n  }",
            "startLine": 1918,
            "endLine": 1949,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "statement",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "last": {
            "name": "last",
            "summary": "Return the last query for this connection.",
            "description": "*\n```php\nx::dump($db->last());\n\/\/ (string) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>\n<pre><code class=\"language-php\">x::dump($db-&gt;last());\n\/\/ (string) INSERT INTO `db_example.table_user` (`name`) VALUES (?)<\/code><\/pre>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->last_query;\n  }",
            "startLine": 1962,
            "endLine": 1965,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_last_cfg": {
            "name": "get_last_cfg",
            "summary": "Return the last config for this connection.",
            "description": "*\n```php\nx::dump($db->getLastCfg());\n\/\/ (array) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>\n<pre><code class=\"language-php\">x::dump($db-&gt;get_last_cfg());\n\/\/ (array) INSERT INTO `db_example.table_user` (`name`) VALUES (?)<\/code><\/pre>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->last_cfg;\n  }",
            "startLine": 1978,
            "endLine": 1981,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "last_id": {
            "name": "last_id",
            "summary": "Return the last inserted ID.",
            "description": "*\n```php\nx::dump($db->lastId());\n\/\/ (int) 26\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->lastId());\n\/\/ (int) 26"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->last_insert_id) {\n      return Str::isBuid($this->last_insert_id) ? bin2hex($this->last_insert_id) : $this->last_insert_id;\n    }\n\n    return false;\n  }",
            "startLine": 1994,
            "endLine": 2001,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "flush": {
            "name": "flush",
            "summary": "Deletes all the queries recorded and returns their (ex) number.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $num                = \\count($this->queries);\n    $this->queries      = [];\n    $this->list_queries = [];\n    return $num;\n  }",
            "startLine": 2009,
            "endLine": 2015,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": []
        },
        "raw_query": {
            "name": "raw_query",
            "summary": "Executes the original PDO query function",
            "description": "*\n```php\nx::dump($db->rawQuery());\n\/\/ (bool)\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->rawQuery());\n\/\/ (bool)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return parent::query(...\\func_get_args());\n  }",
            "startLine": 2027,
            "endLine": 2030,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "new_id": {
            "name": "new_id",
            "summary": "Generate a new casual id based on the max number of characters of id's column structure in the given table",
            "description": "*\n```php\nx::dump($db->newId('table_users', 18));\n\/\/ (int) 69991701\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->newId('table_users', 18));\n\/\/ (int) 69991701"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $min = 1)\n  {\n    $tab = $this->modelize($table);\n    if (\\count($tab['keys']['PRIMARY']['columns']) !== 1) {\n      die(\"Error! Unique numeric primary key doesn't exist\");\n    }\n\n    if (($id_field = $tab['keys']['PRIMARY']['columns'][0])\n        && ($maxlength = $tab['fields'][$id_field]['maxlength'] )\n        && ($maxlength > 1)\n    ) {\n      $max = (10 ** $maxlength) - 1;\n      if ($max >= mt_getrandmax()) {\n        $max = mt_getrandmax();\n      }\n\n      if (($max > $min) && ($table = $this->tfn($table, true))) {\n        $i = 0;\n        do {\n          $id = random_int($min, $max);\n          \/** @todo *\/\n          \/*\n          if ( strpos($tab['fields'][$id_field]['type'], 'char') !== false ){\n            $id = substr(md5('bbn'.$id), 0, random_int(1, 10 ** $maxlength));\n          }\n          *\/\n          $i++;\n        }\n        while (($i < 100) && $this->select($table, [$id_field], [$id_field => $id]));\n        return $id;\n      }\n    }\n\n    return null;\n  }",
            "startLine": 2046,
            "endLine": 2080,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name."
                },
                {
                    "name": "min",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": ""
                }
            ]
        },
        "rselect_random": {
            "name": "rselect_random",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $fields = [], array $where = [])\n  {\n    if ($this->check() && ($num = $this->count($table, $where))) {\n      $args = $this->_add_kind($this->_set_start($this->_set_limit_1(\\func_get_args()), random_int(0, $num - 1)));\n      if ($r = $this->_exec(...$args)) {\n        return $r->getRow();\n      }\n    }\n\n    return null;\n  }",
            "startLine": 2083,
            "endLine": 2093,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "select_random": {
            "name": "select_random",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $fields = [], array $where = [])\n  {\n    if ($this->check() && ($num = $this->count($table, $where))) {\n      $args = $this->_add_kind($this->_set_start($this->_set_limit_1(\\func_get_args()), random_int(0, $num - 1)));\n      if ($r = $this->_exec(...$args)) {\n        return $r->getObj();\n      }\n    }\n\n    return null;\n  }",
            "startLine": 2096,
            "endLine": 2106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "stdClass",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "random_value": {
            "name": "random_value",
            "summary": "Returns a random value fitting the requested column's type",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($col, $table)\n  {\n    $val = null;\n    if (($tab = $this->modelize($table)) && isset($tab['fields'][$col])) {\n      foreach ($tab['keys'] as $key => $cfg){\n        if ($cfg['unique']\n            && !empty($cfg['ref_column'])\n            && (\\count($cfg['columns']) === 1)\n            && ($col === $cfg['columns'][0])\n        ) {\n          return ($num = $this->count($cfg['ref_column'])) ? $this->selectOne(\n            [\n            'tables' [$cfg['ref_table']],\n            'fields' => [$cfg['ref_column']],\n            'start' => random_int(0, $num - 1)\n            ]\n          ) : null;\n        }\n      }\n\n      switch ($tab['fields'][$col]['type']){\n        case 'int':\n          if (($tab['fields'][$col]['maxlength'] === 1) && !$tab['fields'][$col]['signed']) {\n            $val = microtime(true) % 2 === 0 ? 1 : 0;\n          }\n          else {\n            $max = 10 ** $tab['fields'][$col]['maxlength'] - 1;\n            if ($max > mt_getrandmax()) {\n              $max = mt_getrandmax();\n            }\n\n            if ($tab['fields'][$col]['signed']) {\n              $max \/= 2;\n            }\n\n            $min = $tab['fields'][$col]['signed'] ? -$max : 0;\n            $val = random_int($min, $max);\n          }\n          break;\n        case 'float':\n        case 'double':\n        case 'decimal':\n          break;\n        case 'varchar':\n          break;\n        case 'text':\n          break;\n        case 'date':\n          break;\n        case 'datetime':\n          break;\n        case 'timestamp':\n          break;\n        case 'time':\n          break;\n        case 'year':\n          break;\n        case 'blob':\n          break;\n        case 'binary':\n          break;\n        case 'varbinary':\n          break;\n        case 'enum':\n          break;\n      }\n    }\n\n    return $val;\n  }",
            "startLine": 2117,
            "endLine": 2186,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "count_queries": {
            "name": "count_queries",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return \\count($this->queries);\n  }",
            "startLine": 2192,
            "endLine": 2195,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": []
        },
        "get_one": {
            "name": "get_one",
            "summary": "Executes the given query with given vars, and extracts the first cell's result.",
            "description": "*\n```php\nx::dump($db->getOne(\"SELECT name FROM table_users WHERE id>?\", 138));\n\/\/ (string) John\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getOne(\"SELECT name FROM table_users WHERE id>?\", 138));\n\/\/ (string) John"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    \/** @var db\\query $r *\/\n    if ($r = $this->query(...\\func_get_args())) {\n      return $r->fetchColumn(0);\n    }\n\n    return false;\n  }",
            "startLine": 2219,
            "endLine": 2227,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "get_var": {
            "name": "get_var",
            "summary": "Execute the given query with given vars, and extract the first cell's result.",
            "description": "(similar to {@link get_one()})\n   *\n```php\nx::dump($db->getVar(\"SELECT telephone FROM table_users WHERE id>?\", 1));\n\/\/ (int) 123554154\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>(similar to {@link get_one()})\n*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getVar(\"SELECT telephone FROM table_users WHERE id>?\", 1));\n\/\/ (int) 123554154"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->getOne(...\\func_get_args());\n  }",
            "startLine": 2243,
            "endLine": 2246,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "get_key_val": {
            "name": "get_key_val",
            "summary": "Return an array indexed on the first field of the request.",
            "description": "The value will be an array if the request has more than two fields.\n   *\n```php\nx::dump($db->getKeyVal(\"SELECT name,id_group FROM table_users\"));\n\/*\n(array)[\n     \"John\" => 1,\n     \"Michael\" => 1,\n     \"Barbara\" => 1\n       ]\n   *\nx::dump($db->getKeyVal(\"SELECT name, surname, id FROM table_users WHERE id > 2 \"));\n\/*\n(array)[\n        \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n        ],\n        \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n        ]\n       ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>The value will be an array if the request has more than two fields.\n*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getKeyVal(\"SELECT name,id_group FROM table_users\"));\n\/*\n(array)[\n     \"John\" => 1,\n     \"Michael\" => 1,\n     \"Barbara\" => 1\n       ]\n   *\nx::dump($db->getKeyVal(\"SELECT name, surname, id FROM table_users WHERE id > 2 \"));\n\/*\n(array)[\n        \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n        ],\n        \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n        ]\n       ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      if ($rows = $r->getRows()) {\n        return X::indexByFirstVal($rows);\n      }\n\n      return [];\n    }\n\n    return null;\n  }",
            "startLine": 2280,
            "endLine": 2291,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_col_array": {
            "name": "get_col_array",
            "summary": "Return an array with the values of single field resulting from the query.",
            "description": "*\n```php\nx::dump($db->getColArray(\"SELECT id FROM table_users\"));\n\/*\n(array)[1, 2, 3, 4]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getColArray(\"SELECT id FROM table_users\"));\n\/*\n(array)[1, 2, 3, 4]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($r = $this->getByColumns(...\\func_get_args())) {\n      return array_values(current($r));\n    }\n\n    return [];\n  }",
            "startLine": 2307,
            "endLine": 2314,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "select": {
            "name": "select",
            "summary": "Returns the first row resulting from the query as an object.",
            "description": "*\n```php\nx::dump($db->select('table_users', ['name', 'surname'], [['id','>','2']]));\n\/*\n(object){\n  \"name\": \"John\",\n  \"surname\": \"Smith\",\n}\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->select('table_users', ['name', 'surname'], [['id','>','2']]));\n\/*\n(object){\n  \"name\": \"John\",\n  \"surname\": \"Smith\",\n}"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], $start = 0)\n  {\n    $args = $this->_add_kind($this->_set_limit_1(\\func_get_args()));\n    if ($r = $this->_exec(...$args)) {\n      if (!is_object($r)) {\n        $this->log([$args, $this->processCfg($args)]);\n      }\n      else{\n        return $r->getObject();\n      }\n    }\n\n    return null;\n  }",
            "startLine": 2345,
            "endLine": 2358,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": [
                "stdClass",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "select_all": {
            "name": "select_all",
            "summary": "Return table's rows resulting from the query as an array of objects.",
            "description": "*\n```php\nx::dump($db->selectAll(\"tab_users\", [\"id\", \"name\", \"surname\"],[[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n       Object stdClass: df {\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         },\n       Object stdClass: df {\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n        }\n       ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->selectAll(\"tab_users\", [\"id\", \"name\", \"surname\"],[[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n       Object stdClass: df {\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         },\n       Object stdClass: df {\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n        }\n       ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0)\n  {\n    if ($r = $this->_exec(...$this->_add_kind(\\func_get_args()))) {\n      return $r->getObjects();\n    }\n\n    return null;\n  }",
            "startLine": 2389,
            "endLine": 2396,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"limit\" condition, default: 0"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "iselect": {
            "name": "iselect",
            "summary": "Return the first row resulting from the query as a numeric array.",
            "description": "*\n```php\nx::dump($db->iselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n         4,\n        \"Jack\",\n         \"Stewart\"\n       ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->iselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n         4,\n        \"Jack\",\n         \"Stewart\"\n       ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], $start = 0)\n  {\n    if ($r = $this->_exec(...$this->_add_kind($this->_set_limit_1(\\func_get_args())))) {\n      return $r->getIrow();\n    }\n\n    return null;\n  }",
            "startLine": 2419,
            "endLine": 2426,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "iselect_all": {
            "name": "iselect_all",
            "summary": "Return the searched rows as an array of numeric arrays.",
            "description": "*\n```php\nx::dump($db->iselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]],[\"id\" => \"ASC\"],2));\n\/*\n(array)[\n         [\n           2,\n           \"John\",\n           \"Smith\",\n         ],\n         [\n           3,\n           \"Thomas\",\n           \"Jones\",\n         ]\n       ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->iselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]],[\"id\" => \"ASC\"],2));\n\/*\n(array)[\n         [\n           2,\n           \"John\",\n           \"Smith\",\n         ],\n         [\n           3,\n           \"Thomas\",\n           \"Jones\",\n         ]\n       ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0)\n  {\n    if ($r = $this->_exec(...$this->_add_kind(\\func_get_args()))) {\n      return $r->getIrows();\n    }\n\n    return null;\n  }",
            "startLine": 2457,
            "endLine": 2464,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The fields's name"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "| boolean The \"order\" condition, default: false"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"limit\" condition, default: 0"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "rselect": {
            "name": "rselect",
            "summary": "Return the first row resulting from the query as an indexed array.",
            "description": "*\n```php\nx::dump($db->rselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [\"id\", \">\", 1], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         \"id\" => 4,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\"\n        ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->rselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [\"id\", \">\", 1], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         \"id\" => 4,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\"\n        ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], $start = 0)\n  {\n    if ($r = $this->_exec(...$this->_add_kind($this->_set_limit_1(\\func_get_args())))) {\n      return $r->getRow();\n    }\n\n    return null;\n  }",
            "startLine": 2487,
            "endLine": 2494,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "rselect_all": {
            "name": "rselect_all",
            "summary": "Return table's rows as an array of indexed arrays.",
            "description": "*\n```php\nx::dump($db->rselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         [\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         ],\n         [\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n         ]\n       ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->rselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         [\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         ],\n         [\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n         ]\n       ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0)\n  {\n    if ($r = $this->_exec(...$this->_add_kind(\\func_get_args()))) {\n      if (method_exists($r, 'get_rows')) {\n        return $r->getRows();\n      }\n\n      $this->log('ERROR IN RSELECT_ALL', $r);\n    }\n\n    return [];\n  }",
            "startLine": 2525,
            "endLine": 2536,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "condition, default: false"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"limit\" condition, default: 0"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "select_one": {
            "name": "select_one",
            "summary": "Return a single value",
            "description": "*\n```php\nx::dump($db->selectOne(\"tab_users\", \"name\", [[\"id\", \">\", 1]], [\"id\" => \"DESC\"], 2));\n (string) 'Michael'\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->selectOne(\"tab_users\", \"name\", [[\"id\", \">\", 1]], [\"id\" => \"DESC\"], 2));\n (string) 'Michael'"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $field = NULL, array $where = [], array $order = [], $start = 0)\n  {\n    if ($r = $this->_exec(...$this->_add_kind($this->_set_limit_1(\\func_get_args())))) {\n      if (method_exists($r, 'get_irow')) {\n        return ($a = $r->getIrow()) ? $a[0] : false;\n      }\n\n      $this->log('ERROR IN SELECT_ONE', $this->getLastCfg(), $r, $this->_add_kind($this->_set_limit_1(\\func_get_args())));\n    }\n\n    return false;\n  }",
            "startLine": 2554,
            "endLine": 2565,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "select_union": {
            "name": "select_union",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $union, array $fields = [], array $where = [], array $order = [], $start = 0)\n  {\n    $cfgs = [];\n    $sql  = 'SELECT ';\n    if (empty($fields)) {\n      $sql .= '* ';\n    }\n    else{\n      foreach ($fields as $i => $f){\n        if ($i) {\n          $sql .= ', ';\n        }\n\n        $sql .= $this->csn($f, true);\n      }\n    }\n\n    $sql .= ' FROM (('.PHP_EOL;\n    $vals = [];\n    $i    = 0;\n    foreach ($union as $u){\n      $cfg = $this->processCfg($this->_add_kind([$u]));\n      if ($cfg && $cfg['sql']) {\n        \/** @todo From here needs to analyze the where array to the light of the tables' config *\/\n        if (!empty($where)) {\n          if (empty($fields)) {\n            $fields = $cfg['fields'];\n          }\n\n          foreach ($fields as $k => $f){\n            if (isset($cfg['available_fields'][$f])) {\n              if ($cfg['available_fields'][$f] && ($t = $cfg['models'][$cfg['available_fields'][$f]])\n              ) {\n                die(var_dump($t['fields'][$cfg['fields'][$f] ?? $this->csn($f)]));\n              }\n            }\n          }\n        }\n\n        if ($i) {\n          $sql .= PHP_EOL.') UNION ('.PHP_EOL;\n        }\n\n        $sql .= $cfg['sql'];\n        foreach ($cfg['values'] as $v){\n          $vals[] = $v;\n        }\n\n        $i++;\n      }\n    }\n\n    $sql .= PHP_EOL.')) AS t';\n    return $this->getRows($sql, ...$vals);\n    \/\/echo nl2br($sql);\n    return [];\n  }",
            "startLine": 2568,
            "endLine": 2624,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "union",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "count": {
            "name": "count",
            "summary": "Return the number of records in the table corresponding to the $where condition (non mandatory).",
            "description": "*\n```php\nx::dump($db->count('table_users', ['name' => 'John']));\n\/\/ (int) 2\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->count('table_users', ['name' => 'John']));\n\/\/ (int) 2"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $where = [])\n  {\n    $args          = \\is_array($table) && (isset($table['tables']) || isset($table['table'])) ? $table : [\n      'tables' => [$table],\n      'where' => $where\n    ];\n    $args['count'] = true;\n    if (!empty($args['bbn_db_processed'])) {\n      unset($args['bbn_db_processed']);\n    }\n\n    if (\\is_object($r = $this->_exec($args))) {\n      $a = $r->getIrow();\n      return $a ? (int)$a[0] : null;\n    }\n\n    return null;\n  }",
            "startLine": 2639,
            "endLine": 2656,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "select_all_by_keys": {
            "name": "select_all_by_keys",
            "summary": "Return an array indexed on the first field of the request.",
            "description": "The value will be an array if the request has more than two fields.\nReturn the same value as \"get_key_val\".\n   *\n```php\nx::dump($db->selectAllByKeys(\"table_users\", [\"name\",\"id\",\"surname\"], [[\"id\", \">\", \"1\"]], [\"id\" => \"ASC\"]);\n\/*\n(array)[\n       \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n         ],\n       \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n       ]\n     ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>The value will be an array if the request has more than two fields.\nReturn the same value as &quot;get_key_val&quot;.\n*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->selectAllByKeys(\"table_users\", [\"name\",\"id\",\"surname\"], [[\"id\", \">\", \"1\"]], [\"id\" => \"ASC\"]);\n\/*\n(array)[\n       \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n         ],\n       \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n       ]\n     ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0)\n  {\n    if ($rows = $this->rselectAll($table, $fields, $where, $order, $limit, $start)) {\n      return X::indexByFirstVal($rows);\n    }\n\n    return $this->check() ? [] : null;\n  }",
            "startLine": 2687,
            "endLine": 2694,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The fields's name"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The $limit condition, default: 0"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The $limit condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "stat": {
            "name": "stat",
            "summary": "Return an array with the count of values corresponding to the where conditions.",
            "description": "*\n```php\nx::dump($db->stat('table_user', 'name', ['name' => '%n']));\n\/* (array)\n[\n [\n     \"num\" => 1,\n     \"name\" => \"alan\",\n ], [\n     \"num\" => 1,\n     \"name\" => \"karen\",\n ],\n]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->stat('table_user', 'name', ['name' => '%n']));\n\/* (array)\n[\n [\n     \"num\" => 1,\n     \"name\" => \"alan\",\n ], [\n     \"num\" => 1,\n     \"name\" => \"karen\",\n ],\n]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $column, array $where = [], array $order = [])\n  {\n    if ($this->check()) {\n      return $this->rselectAll(\n        [\n        'tables' => [$table],\n        'fields' => [\n          $column,\n          'num' => 'COUNT(*)'\n        ],\n        'where' => $where,\n        'order' => $order,\n        'group_by' => [$column]\n        ]\n      );\n    }\n\n    return null;\n  }",
            "startLine": 2720,
            "endLine": 2738,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The field's name."
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The \"where\" condition."
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition."
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "get_field_values": {
            "name": "get_field_values",
            "summary": "Return the unique values of a column of a table as a numeric indexed array.",
            "description": "*\n```php\nx::dump($db->getFieldValues(\"table_users\", \"surname\", [['id', '>', '2']], 1, 1));\n\/\/ (array) [\"Smiths\", \"White\"]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getFieldValues(\"table_users\", \"surname\", [['id', '>', '2']], 1, 1));\n\/\/ (array) [\"Smiths\", \"White\"]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $field = NULL, array $where = [], array $order = [])\n  {\n    return $this->getColumnValues($table, $field, $where, $order);\n  }",
            "startLine": 2755,
            "endLine": 2758,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "count_field_values": {
            "name": "count_field_values",
            "summary": "Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.",
            "description": "*\n```php\nx::dump($db->countFieldValues('table_users','surname',[['name','=','John']]));\n\/\/ (array) [\"num\" => 2, \"val\" => \"John\"]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->countFieldValues('table_users','surname',[['name','=','John']]));\n\/\/ (array) [\"num\" => 2, \"val\" => \"John\"]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $field = NULL, array $where = [], array $order = [])\n  {\n    if (\\is_array($table) && \\is_array($table['fields']) && count($table['fields'])) {\n      $args  = $table;\n      $field = array_values($table['fields'])[0];\n    }\n    else{\n      $args = [\n        'tables' => [$table],\n        'where' => $where,\n        'order' => $order\n      ];\n    }\n\n    $args = array_merge(\n      $args, [\n      'kind' => 'SELECT',\n      'fields' => [\n        'val' => $field,\n        'num' => 'COUNT(*)'\n      ],\n      'group_by' => [$field]\n      ]\n    );\n    return $this->rselectAll($args);\n  }",
            "startLine": 2775,
            "endLine": 2800,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "get_column_values": {
            "name": "get_column_values",
            "summary": "Return a numeric indexed array with the values of the unique column ($field) from the selected $table",
            "description": "*\n```php\nx::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n\/*\narray [\n   \"Smith\",\n   \"Jones\",\n   \"Williams\",\n   \"Taylor\"\n]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n\/*\narray [\n   \"Smith\",\n   \"Jones\",\n   \"Williams\",\n   \"Taylor\"\n]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $field = NULL, array $where = [], array $order = [], $limit = 0, $start = 0)\n  {\n    $res = null;\n    if ($this->check()) {\n      $res = [];\n      if (\\is_array($table) && isset($table['fields']) && \\is_array($table['fields']) && !empty($table['fields'][0])) {\n        array_splice($table['fields'], 0, 1, 'DISTINCT '.(string)$table['fields'][0]);\n      }\n      elseif (\\is_string($table) && \\is_string($field) && (stripos($field, 'DISTINCT') !== 0)) {\n        $field = 'DISTINCT '.$field;\n      }\n\n      if ($rows = $this->iselectAll($table, $field, $where, $order, $limit, $start)) {\n        foreach ($rows as $row){\n          $res[] = $row[0];\n        }\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 2823,
            "endLine": 2843,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "get_values_count": {
            "name": "get_values_count",
            "summary": "Return a string with the sql query to count equal values in a field of the table.",
            "description": "*\n```php\nx::dump($db->getValuesCount('table_users','name',['surname','=','smith']));\n\/*\n(string)\n  SELECT COUNT(*) AS num, `name` AS val FROM `db_example`.`table_users`\n    GROUP BY `name`\n    ORDER BY `name`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>\n<pre><code class=\"language-php\">x::dump($db-&gt;get_values_count('table_users','name',['surname','=','smith']));\n\/*\n(string)\n  SELECT COUNT(*) AS num, `name` AS val FROM `db_example`.`table_users`\n    GROUP BY `name`\n    ORDER BY `name`<\/code><\/pre>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $field, array $where, $order)\n  {\n    return $this->countFieldValues($table, $field, $where, $order);\n  }",
            "startLine": 2864,
            "endLine": 2867,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": true,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "insert": {
            "name": "insert",
            "summary": "Inserts row(s) in a table.",
            "description": "*\n<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"Ted\"],\n   [\"surname\" => \"McLow\"]\n ]);\n<\/code>\n   *\n<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"July\"],\n   [\"surname\" => \"O'neill\"]\n ], [\n   [\"name\" => \"Peter\"],\n   [\"surname\" => \"Griffin\"]\n ], [\n   [\"name\" => \"Marge\"],\n   [\"surname\" => \"Simpson\"]\n ]);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p><em>\n<code>\n$db-&gt;insert(&quot;table_users&quot;, [\n[&quot;name&quot; =&gt; &quot;Ted&quot;],\n[&quot;surname&quot; =&gt; &quot;McLow&quot;]\n]);\n<\/code>\n<\/em>\n<code>\n$db-&gt;insert(&quot;table_users&quot;, [\n[&quot;name&quot; =&gt; &quot;July&quot;],\n[&quot;surname&quot; =&gt; &quot;O'neill&quot;]\n], [\n[&quot;name&quot; =&gt; &quot;Peter&quot;],\n[&quot;surname&quot; =&gt; &quot;Griffin&quot;]\n], [\n[&quot;name&quot; =&gt; &quot;Marge&quot;],\n[&quot;surname&quot; =&gt; &quot;Simpson&quot;]\n]);\n<\/code><\/p>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $values = NULL, $ignore = false)\n  {\n    if (\\is_array($table) && isset($table['values'])) {\n      $values = $table['values'];\n    }\n\n    \/\/ Array of arrays\n    if (\\is_array($values)\n        && count($values)\n        && !x::isAssoc($values)\n        && \\is_array($values[0])\n    ) {\n      $res = 0;\n\n      foreach ($values as $v){\n        $res += $this->insert($table, $v, $ignore);\n      }\n\n      return $res;\n    }\n\n    $cfg         = \\is_array($table) ? $table : [\n      'tables' => [$table],\n      'fields' => $values,\n      'ignore' => $ignore\n    ];\n    $cfg['kind'] = 'INSERT';\n    return $this->_exec($cfg);\n  }",
            "startLine": 2908,
            "endLine": 2936,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The values to insert."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "If true, controls if the row is already existing and ignores it."
                },
                {
                    "name": "ignore",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "insert_update": {
            "name": "insert_update",
            "summary": "If not exist inserts row(s) in a table, else update.",
            "description": "*\n<code>\n$db->insertUpdate(\n \"table_users\",\n [\n   'id' => '12',\n   'name' => 'Frank'\n ]\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*\n<code>\n$db-&gt;insert_update(\n&quot;table_users&quot;,\n[\n'id' =&gt; '12',\n'name' =&gt; 'Frank'\n]\n);\n<\/code><\/p>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $values = NULL)\n  {\n    \/\/ Twice the arguments\n    if (\\is_array($table) && isset($table['values'])) {\n      $values = $table['values'];\n    }\n\n    if (!x::isAssoc($values)) {\n      $res = 0;\n      foreach ($values as $v){\n        $res += $this->insertUpdate($table, $v);\n      }\n\n      return $res;\n    }\n\n    $keys   = $this->getKeys($table);\n    $unique = [];\n    foreach ($keys['keys'] as $k){\n      \/\/ Checking each unique key\n      if ($k['unique']) {\n        $i = 0;\n        foreach ($k['columns'] as $c){\n          if (isset($values[$c])) {\n            $unique[$c] = $values[$c];\n            $i++;\n          }\n        }\n\n        \/\/ Only if the number of known field values matches the number of columns\n        \/\/ which are parts of the unique key\n        \/\/ If a value is null it won't pass isset and so won't be used\n        if (($i === \\count($k['columns'])) && $this->count($table, $unique)) {\n          \/\/ Removing unique matching fields from the values (as it is the where)\n          foreach ($unique as $f => $v){\n            unset($values[$f]);\n          }\n\n          \/\/ For updating\n          return $this->update($table, $values, $unique);\n        }\n      }\n    }\n\n    \/\/ No need to update, inserting\n    return $this->insert($table, $values);\n  }",
            "startLine": 2957,
            "endLine": 3003,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The values to insert."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "update": {
            "name": "update",
            "summary": "Updates row(s) in a table.",
            "description": "*\n<code>\n$db->update(\n \"table_users\",\n [\n   ['name' => 'Frank'],\n   ['surname' => 'Red']\n ],\n ['id' => '127']\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*\n<code>\n$db-&gt;update(\n&quot;table_users&quot;,\n[\n['name' =&gt; 'Frank'],\n['surname' =&gt; 'Red']\n],\n['id' =&gt; '127']\n);\n<\/code><\/p>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $values = NULL, array $where = NULL, $ignore = false)\n  {\n    $cfg         = \\is_array($table) ? $table : [\n      'tables' => [$table],\n      'where' => $where,\n      'fields' => $values,\n      'ignore' => $ignore\n    ];\n    $cfg['kind'] = 'UPDATE';\n    return $this->_exec($cfg);\n  }",
            "startLine": 3027,
            "endLine": 3037,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The new value(s)."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition."
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "If IGNORE should be added to the statement"
                },
                {
                    "name": "ignore",
                    "position": 3,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "update_ignore": {
            "name": "update_ignore",
            "summary": "If exist updates row(s) in a table, else ignore.",
            "description": "*\n<code>\n$db->updateIgnore(\n  \"table_users\",\n  [\n    ['name' => 'Frank'],\n    ['surname' => 'Red']\n  ],\n  ['id' => '20']\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*\n<code>\n$db-&gt;update_ignore(\n&quot;table_users&quot;,\n[\n['name' =&gt; 'Frank'],\n['surname' =&gt; 'Red']\n],\n['id' =&gt; '20']\n);\n<\/code><\/p>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $values = NULL, array $where = NULL)\n  {\n    return $this->update($table, $values, $where, true);\n  }",
            "startLine": 3060,
            "endLine": 3063,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition."
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "delete": {
            "name": "delete",
            "summary": "Deletes row(s) in a table.",
            "description": "*\n<code>\n$db->delete(\"table_users\", ['id' => '32']);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*\n<code>\n$db-&gt;delete(&quot;table_users&quot;, ['id' =&gt; '32']);\n<\/code><\/p>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $where = NULL, $ignore = false)\n  {\n    $cfg         = \\is_array($table) ? $table : [\n      'tables' => [$table],\n      'where' => $where,\n      'ignore' => $ignore\n    ];\n    $cfg['kind'] = 'DELETE';\n    return $this->_exec($cfg);\n  }",
            "startLine": 3079,
            "endLine": 3088,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The \"where\" condition."
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "default: false."
                },
                {
                    "name": "ignore",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "delete_ignore": {
            "name": "delete_ignore",
            "summary": "If exist deletess row(s) in a table, else ignore.",
            "description": "*\n<code>\n$db->deleteIgnore(\n \"table_users\",\n ['id' => '20']\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*\n<code>\n$db-&gt;delete_ignore(\n&quot;table_users&quot;,\n['id' =&gt; '20']\n);\n<\/code><\/p>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $where = NULL)\n  {\n    return $this->delete(\\is_array($table) ? array_merge($table, ['ignore' => true]) : $table, $where, true);\n  }",
            "startLine": 3106,
            "endLine": 3109,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The \"where\" condition."
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "insert_ignore": {
            "name": "insert_ignore",
            "summary": "If not exist inserts row(s) in a table, else ignore.",
            "description": "*\n<code>\n$db->insertIgnore(\n \"table_users\",\n [\n   ['id' => '19', 'name' => 'Frank'],\n   ['id' => '20', 'name' => 'Ted'],\n ]\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*\n<code>\n$db-&gt;insert_ignore(\n&quot;table_users&quot;,\n[\n['id' =&gt; '19', 'name' =&gt; 'Frank'],\n['id' =&gt; '20', 'name' =&gt; 'Ted'],\n]\n);\n<\/code><\/p>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $values = NULL)\n  {\n    return $this->insert(\\is_array($table) ? array_merge($table, ['ignore' => true]) : $table, $values, true);\n  }",
            "startLine": 3130,
            "endLine": 3133,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The row(s) values."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "truncate": {
            "name": "truncate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    return $this->delete($table, []);\n  }",
            "startLine": 3140,
            "endLine": 3143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fetch": {
            "name": "fetch",
            "summary": "Return an indexed array with the first result of the query or false if there are no results.",
            "description": "*\n```php\nx::dump($db->fetch(\"SELECT name FROM users WHERE id = 10\"));\n\/* (array)\n[\n \"name\" => \"john\",\n 0 => \"john\",\n]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->fetch(\"SELECT name FROM users WHERE id = 10\"));\n\/* (array)\n[\n \"name\" => \"john\",\n 0 => \"john\",\n]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($query)\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      return $r->fetch();\n    }\n\n    return false;\n  }",
            "startLine": 3170,
            "endLine": 3177,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fetchAll": {
            "name": "fetchAll",
            "summary": "Return an array of indexed array with all results of the query or false if there are no results.",
            "description": "*\n```php\nx::dump($db->fetchAll(\"SELECT 'surname', 'name', 'id' FROM users WHERE name = 'john'\"));\n\/* (array)\n [\n   [\n   \"surname\" => \"White\",\n   0 => \"White\",\n   \"name\" => \"Michael\",\n   1 => \"Michael\",\n   \"id\"  => 1,\n   2 => 1,\n   ],\n   [\n   \"surname\" => \"Smith\",\n   0 => \"Smith\",\n   \"name\" => \"John\",\n   1  =>  \"John\",\n   \"id\" => 2,\n   2 => 2,\n   ],\n ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->fetchAll(\"SELECT 'surname', 'name', 'id' FROM users WHERE name = 'john'\"));\n\/* (array)\n [\n   [\n   \"surname\" => \"White\",\n   0 => \"White\",\n   \"name\" => \"Michael\",\n   1 => \"Michael\",\n   \"id\"  => 1,\n   2 => 1,\n   ],\n   [\n   \"surname\" => \"Smith\",\n   0 => \"Smith\",\n   \"name\" => \"John\",\n   1  =>  \"John\",\n   \"id\" => 2,\n   2 => 2,\n   ],\n ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($query)\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      return $r->fetchAll();\n    }\n\n    return false;\n  }",
            "startLine": 3209,
            "endLine": 3216,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fetchColumn": {
            "name": "fetchColumn",
            "summary": "Transposition of the original fetchColumn method, but with the query included. Return an arra or false if no result",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($query, $num = 0)\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      return $r->fetchColumn($num);\n    }\n\n    return false;\n  }",
            "startLine": 3227,
            "endLine": 3234,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "num",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "fetchObject": {
            "name": "fetchObject",
            "summary": "Return an array with stdClass object or false if no result.",
            "description": "*\n```php\nx::dump($db->fetchObject(\"SELECT * FROM table_users WHERE name = 'john'\"));\n\/\/ stdClass Object {\n                   \"id\"  =>  1,\n                   \"name\"  =>  \"John\",\n                   \"surname\"  =>  \"Smith\",\n                   }\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->fetchObject(\"SELECT * FROM table_users WHERE name = 'john'\"));\n\/\/ stdClass Object {\n                   \"id\"  =>  1,\n                   \"name\"  =>  \"John\",\n                   \"surname\"  =>  \"Smith\",\n                   }"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($query)\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      return $r->fetchObject();\n    }\n\n    return false;\n  }",
            "startLine": 3252,
            "endLine": 3259,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "query": {
            "name": "query",
            "summary": "Executes a writing statement and return the number of affected rows or return a query object for the reading * statement",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($statement)\n  {\n    if ($this->check()) {\n      $args = \\func_get_args();\n      \/\/ If fancy is false we just use the regular PDO query function\n      if (!$this->_fancy) {\n        return parent::query(...$args);\n      }\n\n      \/\/ The function can be called directly with func_get_args()\n      while ((\\count($args) === 1) && \\is_array($args[0])){\n        $args = $args[0];\n      }\n\n      if (!empty($args[0]) && \\is_string($args[0])) {\n        \/\/ The first argument is the statement\n        $statement = trim(array_shift($args));\n\n        \/\/ Sending a hash as second argument from helper functions will bind it to the saved statement\n        if (count($args)\n            && \\is_string($args[0])\n            && isset($this->queries[$args[0]])\n        ) {\n          $hash      = is_string($this->queries[$args[0]]) ? $this->queries[$args[0]] : $args[0];\n          $hash_sent = array_shift($args);\n        }\n        else {\n          $hash = $this->_make_hash($statement);\n        }\n\n        $driver_options = [];\n        if (count($args)\n            && \\is_array($args[0])\n        ) {\n          \/\/ Case where drivers are arguments\n          if (!array_key_exists(0, $args[0])) {\n            $driver_options = array_shift($args);\n          }\n          \/\/ Case where values are in a single argument\n          elseif (\\count($args) === 1) {\n            $args = $args[0];\n          }\n        }\n\n        \/** @var array $params Will become the property last_params each time a query is executed *\/\n        $params     = [\n          'statement' => $statement,\n          'values' => [],\n          'last' => microtime(true)\n        ];\n        $num_values = 0;\n        foreach ($args as $i => $arg){\n          if (!\\is_array($arg)) {\n            $params['values'][] = $arg;\n            $num_values++;\n          }\n          elseif (isset($arg[2])) {\n            $params['values'][] = $arg[2];\n            $num_values++;\n          }\n        }\n\n        if (!isset($this->queries[$hash])) {\n          \/** @var int $placeholders The number of placeholders in the statement *\/\n          $placeholders = 0;\n          if ($sequences = $this->parseQuery($statement)) {\n            \/* Or looking for question marks *\/\n            $sequences = array_keys($sequences);\n            preg_match_all('\/(\\?)\/', $statement, $exp);\n            $placeholders = isset($exp[1]) && \\is_array($exp[1]) ? \\count($exp[1]) : 0;\n            while ($sequences[0] === 'OPTIONS'){\n              array_shift($sequences);\n            }\n\n            $params['kind']      = $sequences[0];\n            $params['union']     = isset($sequences['UNION']);\n            $params['write']     = \\in_array($params['kind'], self::$write_kinds, true);\n            $params['structure'] = \\in_array($params['kind'], self::$structure_kinds, true);\n          }\n          elseif (($this->engine === 'sqlite') && (strpos($statement, 'PRAGMA') === 0)) {\n            $params['kind'] = 'PRAGMA';\n          }\n          else{\n            die(\\defined('BBN_IS_DEV') && BBN_IS_DEV ? \"Impossible to parse the query $statement\" : 'Impossible to parse the query');\n          }\n\n          \/\/ This will add to the queries array\n          $this->_add_query(\n            $hash,\n            $statement,\n            $params['kind'],\n            $placeholders,\n            $driver_options\n          );\n          if (!empty($hash_sent)) {\n            $this->queries[$hash_sent] = $hash;\n          }\n        }\n        \/\/ The hash of the hash for retrieving a query based on the helper's config's hash\n        elseif (\\is_string($this->queries[$hash])) {\n          $hash = $this->queries[$hash];\n        }\n\n        $this->_update_query($hash);\n        $q =& $this->queries[$hash];\n        \/* If the number of values is inferior to the number of placeholders we fill the values with the last given value *\/\n        if (!empty($params['values']) && ($num_values < $q['placeholders'])) {\n          $params['values'] = array_merge(\n            $params['values'],\n            array_fill($num_values, $q['placeholders'] - $num_values, end($params['values']))\n          );\n          $num_values       = \\count($params['values']);\n        }\n\n        \/* The number of values must match the number of placeholders to bind *\/\n        if ($num_values !== $q['placeholders']) {\n          $this->error(\n            'Incorrect arguments count (your values: '.$num_values.', in the statement: '.$q['placeholders'].\")\\n\\n\"\n            .$statement.\"\\n\\n\".'start of values'.print_r($params['values'], 1).'Arguments:'\n            .print_r(\\func_get_args(), true)\n            .print_r($q, true)\n          );\n          exit;\n        }\n\n        if ($q['exe_time'] === 0) {\n          $time = $q['last'];\n        }\n\n        \/\/ That will always contains the parameters of the last query done\n\n        $this->addStatement($q['sql'], $params);\n        \/\/ If the statement is a structure modifier we need to clear the cache\n        if ($q['structure']) {\n          $tmp                = $q;\n          $this->queries      = [$hash => $tmp];\n          $this->list_queries = [[\n            'hash' => $hash,\n            'last' => $tmp['last']\n          ]];\n          unset($tmp);\n          \/** @todo Clear the cache *\/\n        }\n\n        try{\n          \/\/ This is a writing statement, it will execute the statement and return the number of affected rows\n          if ($q['write']) {\n            \/\/ A prepared query already exists for the writing\n            \/** @var db\\query *\/\n            if ($q['prepared']) {\n              $r = $q['prepared']->init($params['values'])->execute();\n            }\n            \/\/ If there are no values we can assume the statement doesn't need to be prepared and is just executed\n            elseif ($num_values === 0) {\n              \/\/ Native PDO function which returns the number of affected rows\n              $r = $this->exec($q['sql']);\n            }\n            \/\/ Preparing the query\n            else{\n              \/\/ Native PDO function which will use Db\\query as base class\n              \/** @var db\\query *\/\n              $q['prepared'] = $this->prepare($q['sql'], $q['options']);\n              $r             = $q['prepared']->execute();\n            }\n          }\n          \/\/ This is a reading statement, it will prepare the statement and return a query object\n          else{\n            if (!$q['prepared']) {\n              \/\/ Native PDO function which will use Db\\query as base class\n              $q['prepared'] = $this->prepare($q['sql'], $driver_options);\n            }\n            else{\n              \/\/ Returns the same db\\query object\n              $q['prepared']->init($params['values']);\n            }\n          }\n\n          if (!empty($time) && ($q['exe_time'] === 0)) {\n            $q['exe_time'] = microtime(true) - $time;\n          }\n        }\n        catch (\\PDOException $e){\n          $this->error($e);\n        }\n\n        if ($this->check()) {\n          \/\/ So if read statement returns the query object\n          if (!$q['write']) {\n            return $q['prepared'];\n          }\n\n          \/\/ If it is a write statement returns the number of affected rows\n          if ($q['prepared'] && $q['write']) {\n            $r = $q['prepared']->rowCount();\n          }\n\n          \/\/ If it is an insert statement we (try to) set the last inserted ID\n          if (($q['kind'] === 'INSERT') && $r) {\n            $this->setLastInsertId();\n          }\n\n          return $r ?? false;\n        }\n      }\n    }\n\n    return false;\n  }",
            "startLine": 3276,
            "endLine": 3483,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "query",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": [
                {
                    "name": "statement",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "tfn": {
            "name": "tfn",
            "summary": "Return table's simple name.",
            "description": "(similar to {@link table_simple_name()})\n   *\n```php\nx::dump($db->tsn(\"work_db.table_users\"));\n\/\/ (string) table_users\nx::dump($db->tsn(\"work_db.table_users\", true));\n\/\/ (string) `table_users`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>(similar to {@link table_simple_name()})\n*<\/p>\n<pre><code class=\"language-php\">x::dump($db-&gt;tsn(\"work_db.table_users\"));\n\/\/ (string) table_users\nx::dump($db-&gt;tsn(\"work_db.table_users\", true));\n\/\/ (string) `table_users`<\/code><\/pre>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $escaped = false)\n  {\n    return $this->tableFullName($table, $escaped);\n  }",
            "startLine": 3510,
            "endLine": 3513,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "tsn": {
            "name": "tsn",
            "summary": "Return table's simple name.",
            "description": "(similar to {@link table_simple_name()})\n   *\n```php\nx::dump($db->tsn(\"work_db.table_users\"));\n\/\/ (string) table_users\nx::dump($db->tsn(\"work_db.table_users\", true));\n\/\/ (string) `table_users`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>(similar to {@link table_simple_name()})\n*<\/p>\n<pre><code class=\"language-php\">x::dump($db-&gt;tsn(\"work_db.table_users\"));\n\/\/ (string) table_users\nx::dump($db-&gt;tsn(\"work_db.table_users\", true));\n\/\/ (string) `table_users`<\/code><\/pre>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $escaped = false)\n  {\n    return $this->tableSimpleName($table, $escaped);\n  }",
            "startLine": 3531,
            "endLine": 3534,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "cfn": {
            "name": "cfn",
            "summary": "Return column's full name.",
            "description": "(similar to {@link col_full_name()})\n   *\n```php\nx::dump($db->cfn(\"name\", \"table_users\"));\n\/\/ (string)  table_users.name\nx::dump($db->cfn(\"name\", \"table_users\", true));\n\/\/ (string) \\`table_users\\`.\\`name\\`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>(similar to {@link col_full_name()})\n*<\/p>\n<pre><code class=\"language-php\">x::dump($db-&gt;cfn(\"name\", \"table_users\"));\n\/\/ (string)  table_users.name\nx::dump($db-&gt;cfn(\"name\", \"table_users\", true));\n\/\/ (string) \\`table_users\\`.\\`name\\`<\/code><\/pre>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($col, $table = NULL, $escaped = false)\n  {\n    return $this->colFullName($col, $table, $escaped);\n  }",
            "startLine": 3553,
            "endLine": 3556,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name (escaped or not)."
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                },
                {
                    "name": "escaped",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "csn": {
            "name": "csn",
            "summary": "Return the column's simple name.",
            "description": "(similar to {@link col_simple_name()})\n   *\n```php\nx::dump($db->csn(\"table_users.name\"));\n\/\/ (string) name\nx::dump($db->csn(\"table_users.name\", true));\n\/\/ (string) `name`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>(similar to {@link col_simple_name()})\n*<\/p>\n<pre><code class=\"language-php\">x::dump($db-&gt;csn(\"table_users.name\"));\n\/\/ (string) name\nx::dump($db-&gt;csn(\"table_users.name\", true));\n\/\/ (string) `name`<\/code><\/pre>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($col, $escaped = false)\n  {\n    return $this->colSimpleName($col, $escaped);\n  }",
            "startLine": 3574,
            "endLine": 3577,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "get_connection": {
            "name": "get_connection",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg = [])\n  {\n    if ($this->language) {\n      return $this->language->getConnection($cfg);\n    }\n\n    return null;\n  }",
            "startLine": 3593,
            "endLine": 3600,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The user's options"
                }
            ]
        },
        "post_creation": {
            "name": "post_creation",
            "summary": "Actions to do once the PDO object has been created",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    \/\/ Obliged to do that  if we want to use foreign keys with SQLite\n    if ($this->language && !$this->engine) {\n      $this->language->postCreation();\n    }\n\n    return;\n  }",
            "startLine": 3608,
            "endLine": 3616,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "change": {
            "name": "change",
            "summary": "Changes the database used to the given one.",
            "description": "*\n```php\n$db = new Db();\nx::dump($db->change('db_example'));\n\/\/ (db)\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "$db = new Db();\nx::dump($db->change('db_example'));\n\/\/ (db)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($db)\n  {\n    if ($this->language->change($db)) {\n      $this->current = $db;\n    }\n\n    return $this;\n  }",
            "startLine": 3631,
            "endLine": 3638,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "escape": {
            "name": "escape",
            "summary": "Escapes names with the appropriate quotes (db, tables, columns, keys...)",
            "description": "*\n```php\nx::dump($db->escape(\"table_users\"));\n\/\/ (string) `table_users`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>\n<pre><code class=\"language-php\">x::dump($db-&gt;escape(\"table_users\"));\n\/\/ (string) `table_users`<\/code><\/pre>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($item)\n  {\n    return $this->language->escape($item);\n  }",
            "startLine": 3652,
            "endLine": 3655,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "table_full_name": {
            "name": "table_full_name",
            "summary": "Return table's full name.",
            "description": "*\n```php\nx::dump($db->tableFullName(\"table_users\"));\n\/\/ (String) db_example.table_users\nx::dump($db->tableFullName(\"table_users\", true));\n\/\/ (String) `db_example`.`table_users`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>\n<pre><code class=\"language-php\">x::dump($db-&gt;table_full_name(\"table_users\"));\n\/\/ (String) db_example.table_users\nx::dump($db-&gt;table_full_name(\"table_users\", true));\n\/\/ (String) `db_example`.`table_users`<\/code><\/pre>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $escaped = false)\n  {\n    return $this->language->tableFullName($table, $escaped);\n  }",
            "startLine": 3672,
            "endLine": 3675,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "is_table_full_name": {
            "name": "is_table_full_name",
            "summary": "Returns true if the string corresponds to the tipology of a table full name.",
            "description": "(similar to {@link table_full_name()})\n   *\n```php\nx::dump($db->tfn(\"table_users\"));\n\/\/ (String) db_example.table_users\nx::dump($db->tfn(\"table_users\", true));\n\/\/ (String) `db_example`.`table_users`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>(similar to {@link table_full_name()})\n*<\/p>\n<pre><code class=\"language-php\">x::dump($db-&gt;tfn(\"table_users\"));\n\/\/ (String) db_example.table_users\nx::dump($db-&gt;tfn(\"table_users\", true));\n\/\/ (String) `db_example`.`table_users`<\/code><\/pre>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    return $this->language->isTableFullName($table);\n  }",
            "startLine": 3692,
            "endLine": 3695,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "is_col_full_name": {
            "name": "is_col_full_name",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($col)\n  {\n    return $this->language->isColFullName($col);\n  }",
            "startLine": 3702,
            "endLine": 3705,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "table_simple_name": {
            "name": "table_simple_name",
            "summary": "Return table's simple name.",
            "description": "*\n```php\nx::dump($db->tableSimpleName(\"example_db.table_users\"));\n\/\/ (string) table_users\nx::dump($db->tableSimpleName(\"example.table_users\", true));\n\/\/ (string) `table_users`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>\n<pre><code class=\"language-php\">x::dump($db-&gt;table_simple_name(\"example_db.table_users\"));\n\/\/ (string) table_users\nx::dump($db-&gt;table_simple_name(\"example.table_users\", true));\n\/\/ (string) `table_users`<\/code><\/pre>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $escaped = false)\n  {\n    return $this->language->tableSimpleName($table, $escaped);\n  }",
            "startLine": 3722,
            "endLine": 3725,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "col_full_name": {
            "name": "col_full_name",
            "summary": "Return column's full name.",
            "description": "*\n```php\nx::dump($db->colFullName(\"name\", \"table_users\"));\n\/\/ (string)  table_users.name\nx::dump($db->colFullName(\"name\", \"table_users\", true));\n\/\/ (string) \\`table_users\\`.\\`name\\`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>\n<pre><code class=\"language-php\">x::dump($db-&gt;col_full_name(\"name\", \"table_users\"));\n\/\/ (string)  table_users.name\nx::dump($db-&gt;col_full_name(\"name\", \"table_users\", true));\n\/\/ (string) \\`table_users\\`.\\`name\\`<\/code><\/pre>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($col, $table = '', $escaped = false)\n  {\n    return $this->language->colFullName($col, $table, $escaped);\n  }",
            "startLine": 3743,
            "endLine": 3746,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name (escaped or not)"
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                },
                {
                    "name": "escaped",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "col_simple_name": {
            "name": "col_simple_name",
            "summary": "Return the column's simple name.",
            "description": "*\n```php\nx::dump($db->colSimpleName(\"table_users.name\"));\n\/\/ (string) name\nx::dump($db->colSimpleName(\"table_users.name\", true));\n\/\/ (string) `name`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>\n<pre><code class=\"language-php\">x::dump($db-&gt;col_simple_name(\"table_users.name\"));\n\/\/ (string) name\nx::dump($db-&gt;col_simple_name(\"table_users.name\", true));\n\/\/ (string) `name`<\/code><\/pre>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($col, $escaped = false)\n  {\n    return $this->language->colSimpleName($col, $escaped);\n  }",
            "startLine": 3763,
            "endLine": 3766,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "disable_keys": {
            "name": "disable_keys",
            "summary": "Disables foreign keys constraints.",
            "description": "*\n```php\nx::dump($db->disableKeys());\n\/\/ (db)\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->disableKeys());\n\/\/ (db)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->language->disableKeys();\n    return $this;\n  }",
            "startLine": 3779,
            "endLine": 3783,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "enable_keys": {
            "name": "enable_keys",
            "summary": "Enables foreign keys constraints.",
            "description": "*\n```php\nx::dump($db->enableKeys());\n\/\/ (db)\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->enableKeys());\n\/\/ (db)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->language->enableKeys();\n    return $this;\n  }",
            "startLine": 3796,
            "endLine": 3800,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "get_databases": {
            "name": "get_databases",
            "summary": "Return databases' names as an array.",
            "description": "*\n```php\nx::dump($db->getDatabases());\n\/*\n(array)[\n     \"db_customers\",\n     \"db_clients\",\n     \"db_empty\",\n     \"db_example\",\n     \"db_mail\"\n     ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getDatabases());\n\/*\n(array)[\n     \"db_customers\",\n     \"db_clients\",\n     \"db_empty\",\n     \"db_example\",\n     \"db_mail\"\n     ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_get_cache('', 'databases');\n  }",
            "startLine": 3820,
            "endLine": 3823,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_tables": {
            "name": "get_tables",
            "summary": "Return tables' names of a database as an array.",
            "description": "*\n```php\nx::dump($db->getTables('db_example'));\n\/*\n(array) [\n       \"clients\",\n       \"columns\",\n       \"cron\",\n       \"journal\",\n       \"dbs\",\n       \"examples\",\n       \"history\",\n       \"hosts\",\n       \"keys\",\n       \"mails\",\n       \"medias\",\n       \"notes\",\n       \"medias\",\n       \"versions\"\n       ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getTables('db_example'));\n\/*\n(array) [\n       \"clients\",\n       \"columns\",\n       \"cron\",\n       \"journal\",\n       \"dbs\",\n       \"examples\",\n       \"history\",\n       \"hosts\",\n       \"keys\",\n       \"mails\",\n       \"medias\",\n       \"notes\",\n       \"medias\",\n       \"versions\"\n       ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($database = '')\n  {\n    if (empty($database)) {\n      $database = $this->current;\n    }\n\n    return $this->_get_cache($database, 'tables');\n  }",
            "startLine": 3853,
            "endLine": 3860,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_columns": {
            "name": "get_columns",
            "summary": "Return colums' structure of a table as an array indexed with the fields names.",
            "description": "*\n```php\nx::dump($db->getColumns('table_users'));\n\/* (array)[\n           \"id\" => [\n             \"position\" => 1,\n             \"null\" => 0,\n             \"key\" => \"PRI\",\n             \"default\" => null,\n             \"extra\" => \"auto_increment\",\n             \"signed\" => 0,\n             \"maxlength\" => \"8\",\n             \"type\" => \"int\",\n           ],\n          \"name\" => [\n             \"position\" => 2,\n             \"null\" => 0,\n             \"key\" => null,\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n           \"surname\" => [\n             \"position\" => 3,\n             \"null\" => 0,\n             \"key\" => null,\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n           \"address\" => [\n             \"position\" => 4,\n             \"null\" => 0,\n             \"key\" => \"UNI\",\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n         ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getColumns('table_users'));\n\/* (array)[\n           \"id\" => [\n             \"position\" => 1,\n             \"null\" => 0,\n             \"key\" => \"PRI\",\n             \"default\" => null,\n             \"extra\" => \"auto_increment\",\n             \"signed\" => 0,\n             \"maxlength\" => \"8\",\n             \"type\" => \"int\",\n           ],\n          \"name\" => [\n             \"position\" => 2,\n             \"null\" => 0,\n             \"key\" => null,\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n           \"surname\" => [\n             \"position\" => 3,\n             \"null\" => 0,\n             \"key\" => null,\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n           \"address\" => [\n             \"position\" => 4,\n             \"null\" => 0,\n             \"key\" => \"UNI\",\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n         ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    if ($tmp = $this->_get_cache($table)) {\n      return $tmp['fields'];\n    }\n\n    return null;\n  }",
            "startLine": 3915,
            "endLine": 3922,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_keys": {
            "name": "get_keys",
            "summary": "Return the table's keys as an array indexed with the fields names.",
            "description": "*\n```php\nx::dump($db->getKeys(\"table_users\"));\n\/*\n(array)[\n     \"keys\" => [\n       \"PRIMARY\" => [\n         \"columns\" => [\n           \"id\",\n         ],\n         \"ref_db\" => null,\n         \"ref_table\" => null,\n         \"ref_column\" => null,\n         \"unique\" => 1,\n       ],\n       \"number\" => [\n         \"columns\" => [\n           \"number\",\n         ],\n         \"ref_db\" => null,\n         \"ref_table\" => null,\n         \"ref_column\" => null,\n        \"unique\" => 1,\n       ],\n     ],\n     \"cols\" => [\n       \"id\" => [\n         \"PRIMARY\",\n       ],\n       \"number\" => [\n         \"number\",\n       ],\n     ],\n]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getKeys(\"table_users\"));\n\/*\n(array)[\n     \"keys\" => [\n       \"PRIMARY\" => [\n         \"columns\" => [\n           \"id\",\n         ],\n         \"ref_db\" => null,\n         \"ref_table\" => null,\n         \"ref_column\" => null,\n         \"unique\" => 1,\n       ],\n       \"number\" => [\n         \"columns\" => [\n           \"number\",\n         ],\n         \"ref_db\" => null,\n         \"ref_table\" => null,\n         \"ref_column\" => null,\n        \"unique\" => 1,\n       ],\n     ],\n     \"cols\" => [\n       \"id\" => [\n         \"PRIMARY\",\n       ],\n       \"number\" => [\n         \"number\",\n       ],\n     ],\n]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    if ($tmp = $this->_get_cache($table)) {\n      return [\n        'keys' => $tmp['keys'],\n        'cols' => $tmp['cols']\n      ];\n    }\n\n    return null;\n  }",
            "startLine": 3966,
            "endLine": 3976,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_conditions": {
            "name": "get_conditions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $conditions, array $cfg = [], $is_having = false, $indent = 0)\n  {\n    return $this->language->getConditions($conditions, $cfg, $is_having, $indent);\n  }",
            "startLine": 3985,
            "endLine": 3988,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "conditions",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "is_having",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "having"
                },
                {
                    "name": "indent",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "get_select": {
            "name": "get_select",
            "summary": "Return SQL code for row(s) SELECT.",
            "description": "*\n```php\nx::dump($db->getSelect('table_users',['name','surname']));\n\/*\n(string)\n  SELECT\n   `table_users`.`name`,\n   `table_users`.`surname`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>\n<pre><code class=\"language-php\">x::dump($db-&gt;get_select('table_users',['name','surname']));\n\/*\n(string)\n  SELECT\n   `table_users`.`name`,\n   `table_users`.`surname`<\/code><\/pre>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    return $this->language->getSelect(...$this->_add_kind(\\func_get_args()));\n  }",
            "startLine": 4006,
            "endLine": 4009,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_insert": {
            "name": "get_insert",
            "summary": "Returns the SQL code for an INSERT statement.",
            "description": "*\n```php\nx::dump($db->getInsert([\n  'tables' => ['table_users'],\n  'fields' => ['name','surname']\n]));\n\/*\n(string)\n INSERT INTO `db_example`.`table_users` (\n             `name`, `surname`)\n             VALUES (?, ?)\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>\n<pre><code class=\"language-php\">x::dump($db-&gt;get_insert([\n  'tables' =&gt; ['table_users'],\n  'fields' =&gt; ['name','surname']\n]));\n\/*\n(string)\n INSERT INTO `db_example`.`table_users` (\n             `name`, `surname`)\n             VALUES (?, ?)<\/code><\/pre>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $cfg['kind'] = 'INSERT';\n    return $this->language->getInsert($this->processCfg($cfg));\n  }",
            "startLine": 4030,
            "endLine": 4034,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_update": {
            "name": "get_update",
            "summary": "Returns the SQL code for an UPDATE statement.",
            "description": "*\n```php\nx::dump($db->getUpdate([\n  'tables' => ['table_users'],\n  'fields' => ['name','surname']\n]));\n\/*\n(string)\n   UPDATE `db_example`.`table_users`\n   SET `table_users`.`name` = ?,\n       `table_users`.`surname` = ?\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>\n<pre><code class=\"language-php\">x::dump($db-&gt;get_update([\n  'tables' =&gt; ['table_users'],\n  'fields' =&gt; ['name','surname']\n]));\n\/*\n(string)\n   UPDATE `db_example`.`table_users`\n   SET `table_users`.`name` = ?,\n       `table_users`.`surname` = ?<\/code><\/pre>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $cfg['kind'] = 'UPDATE';\n    return $this->language->getUpdate($this->processCfg($cfg));\n  }",
            "startLine": 4055,
            "endLine": 4059,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_delete": {
            "name": "get_delete",
            "summary": "Returns the SQL code for a DELETE statement.",
            "description": "*\n```php\nx::dump($db->getDelete('table_users',['id'=>1]));\n\/\/ (string) DELETE FROM `db_example`.`table_users` * WHERE 1 AND `table_users`.`id` = ?\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>\n<pre><code class=\"language-php\">x::dump($db-&gt;get_delete('table_users',['id'=&gt;1]));\n\/\/ (string) DELETE FROM `db_example`.`table_users` * WHERE 1 AND `table_users`.`id` = ?<\/code><\/pre>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $cfg['kind'] = 'DELETE';\n    return $this->language->getDelete($this->processCfg($cfg));\n  }",
            "startLine": 4073,
            "endLine": 4077,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_join": {
            "name": "get_join",
            "summary": "Returns a string with the JOIN part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    return $this->language->getJoin($cfg);\n  }",
            "startLine": 4086,
            "endLine": 4089,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_where": {
            "name": "get_where",
            "summary": "Return a string with 'where' conditions.",
            "description": "*\n```php\nx::dump($db->getWhere(['id' => 9], 'table_users'));\n\/\/ (string) WHERE 1 AND `table_users`.`id` = ?\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>\n<pre><code class=\"language-php\">x::dump($db-&gt;get_where(['id' =&gt; 9], 'table_users'));\n\/\/ (string) WHERE 1 AND `table_users`.`id` = ?<\/code><\/pre>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    return $this->language->getWhere($cfg);\n  }",
            "startLine": 4103,
            "endLine": 4106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_group_by": {
            "name": "get_group_by",
            "summary": "Returns a string with the GROUP BY part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    return $this->language->getGroupBy($cfg);\n  }",
            "startLine": 4115,
            "endLine": 4118,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_having": {
            "name": "get_having",
            "summary": "Returns a string with the HAVING part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    return $this->language->getHaving($cfg);\n  }",
            "startLine": 4127,
            "endLine": 4130,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_order": {
            "name": "get_order",
            "summary": "Get a string starting with ORDER BY with corresponding parameters to $order.",
            "description": "*\n```php\nx::dump($db->getOrder(['name' => 'DESC' ],'table_users'));\n\/\/ (string) ORDER BY `name` DESC\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>\n<pre><code class=\"language-php\">x::dump($db-&gt;get_order(['name' =&gt; 'DESC' ],'table_users'));\n\/\/ (string) ORDER BY `name` DESC<\/code><\/pre>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    return $this->language->getOrder($cfg);\n  }",
            "startLine": 4144,
            "endLine": 4147,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_limit": {
            "name": "get_limit",
            "summary": "Get a string starting with LIMIT with corresponding parameters to $limit.",
            "description": "*\n```php\nx::dump($db->getLimit(3,1));\n\/\/ (string) LIMIT 1, 3\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getLimit(3,1));\n\/\/ (string) LIMIT 1, 3"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    return $this->language->getLimit($cfg);\n  }",
            "startLine": 4161,
            "endLine": 4164,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_create": {
            "name": "get_create",
            "summary": "Return SQL code for table creation.",
            "description": "*\n```php\nx::dump($db->getCreate(\"table_users\"));\n\/*\n(string)\n   CREATE TABLE `table_users` (\n     `userid` int(11) NOT NULL,\n     `userdataid` int(11) NOT NULL,\n     `info` char(200) DEFAULT NULL,\n      PRIMARY KEY (`userid`,`userdataid`),\n      KEY `table_users_userId_userdataId_info` (`userid`,`userdataid`,`info`)\n   ) ENGINE=InnoDB DEFAULT CHARSET=utf8\n   *\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>\n<pre><code class=\"language-php\">x::dump($db-&gt;get_create(\"table_users\"));\n\/*\n(string)\n   CREATE TABLE `table_users` (\n     `userid` int(11) NOT NULL,\n     `userdataid` int(11) NOT NULL,\n     `info` char(200) DEFAULT NULL,\n      PRIMARY KEY (`userid`,`userdataid`),\n      KEY `table_users_userId_userdataId_info` (`userid`,`userdataid`,`info`)\n   ) ENGINE=InnoDB DEFAULT CHARSET=utf8\n   *<\/code><\/pre>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $model = NULL)\n  {\n    return $this->language->getCreate($table, $model);\n  }",
            "startLine": 4186,
            "endLine": 4189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "get_create_table": {
            "name": "get_create_table",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $model = NULL)\n  {\n    return $this->language->getCreateTable($table, $model);\n  }",
            "startLine": 4192,
            "endLine": 4195,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "get_create_keys": {
            "name": "get_create_keys",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $model = NULL)\n  {\n    return $this->language->getCreateKeys($table, $model);\n  }",
            "startLine": 4198,
            "endLine": 4201,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "get_create_constraints": {
            "name": "get_create_constraints",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $model = NULL)\n  {\n    return $this->language->getCreateConstraints($table, $model);\n  }",
            "startLine": 4204,
            "endLine": 4207,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "create_constraints_sqlite": {
            "name": "create_constraints_sqlite",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $model = NULL)\n  {\n    return $this->language->createConstraintsSqlite(...\\func_get_args());\n  }",
            "startLine": 4210,
            "endLine": 4213,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "create_index": {
            "name": "create_index",
            "summary": "Creates an index on one or more column(s) of the table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $column, $unique = false, $length = NULL)\n  {\n    return $this->language->createIndex($table, $column, $unique);\n  }",
            "startLine": 4232,
            "endLine": 4235,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "unique",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "length",
                    "position": 3,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "delete_index": {
            "name": "delete_index",
            "summary": "Deletes index on a column of the table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $key)\n  {\n    return $this->language->deleteIndex($table, $key);\n  }",
            "startLine": 4252,
            "endLine": 4255,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The key's name."
                },
                {
                    "name": "key",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "create_user": {
            "name": "create_user",
            "summary": "Creates an user for a specific db.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($user = NULL, $pass = NULL, $db = NULL)\n  {\n    return $this->language->createUser($user, $pass, $db);\n  }",
            "startLine": 4272,
            "endLine": 4275,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "pass",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "delete_user": {
            "name": "delete_user",
            "summary": "Deletes a db user.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($user = NULL)\n  {\n    return $this->language->deleteUser($user);\n  }",
            "startLine": 4291,
            "endLine": 4294,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "get_users": {
            "name": "get_users",
            "summary": "Return an array including privileges of a specific db_user or all db_users.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($user = '', $host = '')\n  {\n    return $this->language->getUsers($user, $host);\n  }",
            "startLine": 4313,
            "endLine": 4316,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The host"
                },
                {
                    "name": "host",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "db_size": {
            "name": "db_size",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($database = '', $type = '')\n  {\n    return $this->language->dbSize($database, $type);\n  }",
            "startLine": 4324,
            "endLine": 4327,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "table_size": {
            "name": "table_size",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $type = '')\n  {\n    return $this->language->tableSize($table, $type);\n  }",
            "startLine": 4335,
            "endLine": 4338,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "status": {
            "name": "status",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table = '', $database = '')\n  {\n    return $this->language->status($table, $database);\n  }",
            "startLine": 4346,
            "endLine": 4349,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "database",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_uid": {
            "name": "get_uid",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    \/\/return hex2bin(str_replace('-', '', X::makeUid()));\n    return $this->language->getUid();\n  }",
            "startLine": 4355,
            "endLine": 4359,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "get_row": {
            "name": "get_row",
            "summary": "Return the first row resulting from the query as an array indexed with the fields' name.",
            "description": "*\n```php\nx::dump($db->getRow(\"SELECT id, name FROM table_users WHERE id > ? \", 2));;\n   *\n\/* (array)[\n       \"id\" => 3,\n       \"name\" => \"thomas\",\n       ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getRow(\"SELECT id, name FROM table_users WHERE id > ? \", 2));;\n   *\n\/* (array)[\n       \"id\" => 3,\n       \"name\" => \"thomas\",\n       ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      return $r->getRow();\n    }\n\n    return null;\n  }",
            "startLine": 4388,
            "endLine": 4395,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_rows": {
            "name": "get_rows",
            "summary": "Return an array that includes indexed arrays for every row resultant from the query.",
            "description": "*\n```php\nx::dump($db->getRows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2));\n\/* (array)[\n           [\n           \"id\" => 3,\n           \"name\" => \"john\",\n           ],\n           [\n           \"id\" => 4,\n           \"name\" => \"barbara\",\n           ],\n         ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getRows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2));\n\/* (array)[\n           [\n           \"id\" => 3,\n           \"name\" => \"john\",\n           ],\n           [\n           \"id\" => 4,\n           \"name\" => \"barbara\",\n           ],\n         ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      return $r->getRows();\n    }\n\n    return null;\n  }",
            "startLine": 4419,
            "endLine": 4426,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_irow": {
            "name": "get_irow",
            "summary": "Return a row as a numeric indexed array.",
            "description": "*\n```php\nx::dump($db->getIrow(\"SELECT id, name, surname FROM table_users WHERE id > ?\", 2));\n\/* (array) [\n             3,\n             \"john\",\n             \"brown\",\n            ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getIrow(\"SELECT id, name, surname FROM table_users WHERE id > ?\", 2));\n\/* (array) [\n             3,\n             \"john\",\n             \"brown\",\n            ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      return $r->getIrow();\n    }\n\n    return null;\n  }",
            "startLine": 4445,
            "endLine": 4452,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_irows": {
            "name": "get_irows",
            "summary": "Return an array of numeric indexed rows.",
            "description": "*\n```php\nx::dump($db->getIrows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2, 2));\n\/*\n(array)[\n        [\n         3,\n        \"john\"\n        ],\n        [\n        4,\n        \"barbara\"\n       ]\n      ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getIrows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2, 2));\n\/*\n(array)[\n        [\n         3,\n        \"john\"\n        ],\n        [\n        4,\n        \"barbara\"\n       ]\n      ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      return $r->getIrows();\n    }\n\n    return null;\n  }",
            "startLine": 4475,
            "endLine": 4482,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_by_columns": {
            "name": "get_by_columns",
            "summary": "Return an array indexed on the searched field's in which there are all the values of the column.",
            "description": "*\n```php\nx::dump($db->getByColumns(\"SELECT name, surname FROM table_users WHERE id > 2\"));\n\/*\n(array) [\n     \"name\" => [\n      \"John\",\n      \"Michael\"\n     ],\n     \"surname\" => [\n       \"Brown\",\n       \"Smith\"\n     ]\n    ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getByColumns(\"SELECT name, surname FROM table_users WHERE id > 2\"));\n\/*\n(array) [\n     \"name\" => [\n      \"John\",\n      \"Michael\"\n     ],\n     \"surname\" => [\n       \"Brown\",\n       \"Smith\"\n     ]\n    ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      return $r->getByColumns();\n    }\n\n    return null;\n  }",
            "startLine": 4506,
            "endLine": 4513,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_obj": {
            "name": "get_obj",
            "summary": "Return the first row resulting from the query as an object (similar to {@link get_object()}).",
            "description": "*\n```php\nx::dump($db->getObj(\"SELECT surname FROM table_users\"));\n\/*\n(obj){\n      \"name\" => \"Smith\"\n      }\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getObj(\"SELECT surname FROM table_users\"));\n\/*\n(obj){\n      \"name\" => \"Smith\"\n      }"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->getObject(\\func_get_args());\n  }",
            "startLine": 4529,
            "endLine": 4532,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "stdClass",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_object": {
            "name": "get_object",
            "summary": "Return the first row resulting from the query as an object.",
            "description": "Synonym of get_obj.\n   *\n```php\nx::dump($db->getObject(\"SELECT name FROM table_users\"));\n\/*\n(obj){\n      \"name\" => \"John\"\n      }\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Synonym of get_obj.\n*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getObject(\"SELECT name FROM table_users\"));\n\/*\n(obj){\n      \"name\" => \"John\"\n      }"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      return $r->getObject();\n    }\n\n    return null;\n  }",
            "startLine": 4549,
            "endLine": 4556,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "stdClass",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_objects": {
            "name": "get_objects",
            "summary": "Return an array of stdClass objects.",
            "description": "*\n```php\nx::dump($db->getObjects(\"SELECT name FROM table_users\"));\n   *\n\/*\n(array) [\n         Object stdClass: df {\n           \"name\" => \"John\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Michael\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Thomas\",\n         },\n         Object stdClass: df {\n           \"name\" => \"William\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Jake\",\n         },\n        ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "x::dump($db->getObjects(\"SELECT name FROM table_users\"));\n   *\n\/*\n(array) [\n         Object stdClass: df {\n           \"name\" => \"John\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Michael\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Thomas\",\n         },\n         Object stdClass: df {\n           \"name\" => \"William\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Jake\",\n         },\n        ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      return $r->getObjects();\n    }\n\n    return [];\n  }",
            "startLine": 4587,
            "endLine": 4594,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "create_table": {
            "name": "create_table",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->createTable(...\\func_get_args());\n  }",
            "startLine": 4597,
            "endLine": 4600,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "create_table_sqlite": {
            "name": "create_table_sqlite",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->createTableSqlite(...\\func_get_args());\n  }",
            "startLine": 4603,
            "endLine": 4606,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "create_database": {
            "name": "create_database",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($database)\n  {\n    return $this->language->createDatabase(...\\func_get_args());\n  }",
            "startLine": 4609,
            "endLine": 4612,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "drop_database": {
            "name": "drop_database",
            "summary": "Drops the given database",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($database)\n  {\n    return $this->language->dropDatabase($database);\n  }",
            "startLine": 4621,
            "endLine": 4624,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "enable_last": {
            "name": "enable_last",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->_last_enabled = true;\n  }",
            "startLine": 4627,
            "endLine": 4630,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "disable_last": {
            "name": "disable_last",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->_last_enabled = false;\n  }",
            "startLine": 4633,
            "endLine": 4636,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "get_real_last_params": {
            "name": "get_real_last_params",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->last_real_params;\n  }",
            "startLine": 4639,
            "endLine": 4642,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "real_last": {
            "name": "real_last",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->last_real_query;\n  }",
            "startLine": 4645,
            "endLine": 4648,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_last_params": {
            "name": "get_last_params",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->last_params;\n  }",
            "startLine": 4651,
            "endLine": 4654,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_last_values": {
            "name": "get_last_values",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->last_params ? $this->last_params['values'] : null;\n  }",
            "startLine": 4657,
            "endLine": 4660,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_query_values": {
            "name": "get_query_values",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $res = [];\n    if (!empty($cfg['values'])) {\n      foreach ($cfg['values'] as $i => $v) {\n        \/\/ Transforming the values if needed\n        if (($cfg['values_desc'][$i]['type'] === 'binary')\n            && ($cfg['values_desc'][$i]['maxlength'] === 16)\n            && Str::isUid($v)\n        ) {\n          $res[] = hex2bin($v);\n        }\n        elseif (\\is_string($v) && ((            ($cfg['values_desc'][$i]['type'] === 'date')\n            && (\\strlen($v) < 10)) || (            ($cfg['values_desc'][$i]['type'] === 'time')\n            && (\\strlen($v) < 8)) || (            ($cfg['values_desc'][$i]['type'] === 'datetime')\n            && (\\strlen($v) < 19))            )\n        ) {\n          $res[] = $v.'%';\n        }\n        elseif (!empty($cfg['values_desc'][$i]['operator'])) {\n          switch ($cfg['values_desc'][$i]['operator']){\n            case 'contains':\n            case 'doesnotcontain':\n              $res[] = '%'.$v.'%';\n              break;\n            case 'startswith':\n              $res[] = $v.'%';\n              break;\n            case 'endswith':\n              $res[] = '%'.$v;\n              break;\n            default:\n              $res[] = $v;\n          }\n        }\n        else{\n          $res[] = $v;\n        }\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 4663,
            "endLine": 4705,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "prepare": {
            "name": "prepare",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "prepare",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "statement",
                        "position": 0,
                        "type": null,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "options",
                        "position": 1,
                        "type": null,
                        "required": false,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "statement",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "options",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "beginTransaction": {
            "name": "beginTransaction",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "beginTransaction",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "commit": {
            "name": "commit",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "commit",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "rollBack": {
            "name": "rollBack",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "rollBack",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "inTransaction": {
            "name": "inTransaction",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "inTransaction",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "setAttribute": {
            "name": "setAttribute",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": {
                "name": "setAttribute",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "attribute",
                        "position": 0,
                        "type": null,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "value",
                        "position": 1,
                        "type": null,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "attribute",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 1,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "exec": {
            "name": "exec",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "exec",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "query",
                        "position": 0,
                        "type": null,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "lastInsertId": {
            "name": "lastInsertId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "lastInsertId",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "seqname",
                        "position": 0,
                        "type": null,
                        "required": false,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "seqname",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "errorCode": {
            "name": "errorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "errorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "errorInfo": {
            "name": "errorInfo",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "errorInfo",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getAttribute": {
            "name": "getAttribute",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "getAttribute",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "attribute",
                        "position": 0,
                        "type": null,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "attribute",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "quote": {
            "name": "quote",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "quote",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "string",
                        "position": 0,
                        "type": null,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "paramtype",
                        "position": 1,
                        "type": null,
                        "required": false,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "string",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "paramtype",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getAvailableDrivers": {
            "name": "getAvailableDrivers",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "PDO",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "",
            "startLine": false,
            "endLine": false,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": true,
            "isUserDefined": false,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getAvailableDrivers",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "PDO",
                "static": true,
                "visibility": "public",
                "final": false,
                "code": "",
                "startLine": false,
                "endLine": false,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": true,
                "isUserDefined": false,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "get_instance": {
            "name": "get_instance",
            "summary": "Returns the instance of the singleton or null.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$retriever_instance;\n  }",
            "startLine": 42,
            "endLine": 45,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "retriever_exists": {
            "name": "retriever_exists",
            "summary": "Returns true if an instance as been initiated.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$retriever_exists;\n  }",
            "startLine": 52,
            "endLine": 55,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        }
    },
    "properties": null,
    "staticProperties": {
        "write_kinds": [
            "INSERT",
            "UPDATE",
            "DELETE",
            "DROP",
            "ALTER",
            "CREATE"
        ],
        "structure_kinds": [
            "DROP",
            "ALTER",
            "CREATE"
        ],
        "engines": {
            "mysql": "nf nf-dev-mysql",
            "pgsql": "nf nf-dev-postgresql",
            "sqlite": "nf nf-dev-sqllite"
        },
        "_has_error_all": false,
        "retriever_instance": {},
        "retriever_exists": true
    },
    "constants": [],
    "numMethods": 175,
    "numProperties": 0,
    "numConstants": 100,
    "numStaticProperties": 6,
    "interfaceNames": [
        "bbn\\Db\\Actions",
        "bbn\\Db\\Api",
        "bbn\\Db\\Engines"
    ],
    "isInterface": false,
    "traitNames": [
        "bbn\\Models\\Tts\\Cache",
        "bbn\\Models\\Tts\\Retriever"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "PDO",
    "isSubclassOf": false,
    "defaultProperties": {
        "write_kinds": [
            "INSERT",
            "UPDATE",
            "DELETE",
            "DROP",
            "ALTER",
            "CREATE"
        ],
        "structure_kinds": [
            "DROP",
            "ALTER",
            "CREATE"
        ],
        "engines": {
            "mysql": "nf nf-dev-mysql",
            "pgsql": "nf nf-dev-postgresql",
            "sqlite": "nf nf-dev-sqllite"
        },
        "_has_error_all": false,
        "retriever_instance": {},
        "retriever_exists": true,
        "_last_enabled": true,
        "_parser": null,
        "_cache": [],
        "_fancy": 1,
        "_has_error": false,
        "_triggers": {
            "SELECT": {
                "before": [],
                "after": []
            },
            "INSERT": {
                "before": [],
                "after": []
            },
            "UPDATE": {
                "before": [],
                "after": []
            },
            "DELETE": {
                "before": [],
                "after": []
            }
        },
        "_triggers_disabled": false,
        "connection_code": null,
        "hash": null,
        "language": false,
        "cache_renewal": 3600,
        "list_queries": [],
        "max_queries": 50,
        "length_queries": 60,
        "last_insert_id": null,
        "id_just_inserted": null,
        "hash_contour": "__BBN__",
        "last_query": null,
        "last_params": {
            "sequences": false,
            "values": false
        },
        "last_real_query": null,
        "last_real_params": {
            "sequences": false,
            "values": false
        },
        "last_cfg": null,
        "last_prepared": null,
        "queries": [],
        "cfgs": [],
        "qte": null,
        "last_error": false,
        "engine": null,
        "host": null,
        "username": null,
        "current": null,
        "on_error": "stop_all",
        "_cache_prefix": null,
        "cache_engine": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn",
    "shortName": "db",
    "summary": "Half ORM half DB management, the simplest class for data queries.",
    "description": "*\nHello world!",
    "description_parts": [
        {
            "type": "text",
            "content": "<p>*\nHello world!<\/p>"
        }
    ]
}