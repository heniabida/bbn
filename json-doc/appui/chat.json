{
    "doc": {
        "description": "Class chat",
        "tags": {
            "package": "bbn\\appui"
        }
    },
    "name": "bbn\\appui\\chat",
    "namespace": true,
    "traits": [],
    "interfaces": [],
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/appui\/chat.php",
    "startLine": 17,
    "endLine": 392,
    "contentConstructor": {
        "file": "bbn\\appui\\chat",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "chat constructor.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\chat",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\db $db, bbn\\user $user)\n  {\n    if ( defined('BBN_DATA_PATH') && $user->check_session() ){\n      $this->db = $db;\n      $this->user = $user;\n    }\n  }",
            "startLine": 36,
            "endLine": 42,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "user",
                    "position": 1,
                    "type": "bbn\\user",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "check": {
            "name": "check",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\chat",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->db && $this->user;\n  }",
            "startLine": 47,
            "endLine": 50,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "create": {
            "name": "create",
            "summary": "Creates a new chat with the current userr and another participant.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\chat",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $users, $public = 0)\n  {\n    if ( $this->check() ){\n      $join = '';\n      $where = '';\n      $values = [$this->user->get_id(), $public];\n      foreach ( $users as $i => $u ){\n        $join .= \"JOIN bbn_chats_users AS u$i ON u$i.id_chat = bbn_chats.id\".PHP_EOL;\n        $where .= \"AND u$i.id_user = ?\".PHP_EOL;\n        $values[] = $u;\n      }\n      $sql = <<<SQL\nSELECT id\nFROM bbn_chats\n  $join\nWHERE creator = ?\nAND public = ? \n$where\nSQL;\n      if ( ($id_chat = $this->db->get_one($sql, $values)) && (count($users) === $this->db->count('bbn_chat_users', ['id_chat' => $id_chat])) ){\n        return $id_chat;\n      }\n      if ( $this->db->insert('bbn_chats', [\n        'creator' => $this->user->get_id(),\n        'creation' => date('Y-m-d H:i:s'),\n        'public' => $public ? 1 : 0\n      ]) ){\n        $id_chat = $this->db->last_id();\n        $this->db->insert('bbn_chats_users', [\n          'id_chat' => $id_chat,\n          'id_user' => $this->user->get_id(),\n          'entrance' => microtime(true),\n          'admin' => 1\n        ]);\n        foreach ( $users as $user ){\n          $this->db->insert_ignore('bbn_chats_users', [\n            'id_chat' => $id_chat,\n            'id_user' => $user,\n            'entrance' => microtime(true),\n            'admin' => 0\n          ]);\n        }\n        return $id_chat;\n      }\n    }\n    return null;\n  }",
            "startLine": 59,
            "endLine": 105,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "users",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "public",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "add_user": {
            "name": "add_user",
            "summary": "Adds the given user to the given chat (if the current user is admin of this chat).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\chat",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_chat, $id_user)\n  {\n    if ( $this->is_admin($id_chat) ){\n      return (bool)$this->db->insert_ignore('bbn_chats_users', [\n        'id_chat' => $id_chat,\n        'id_user' => $id_user,\n        'entrance' => microtime(true),\n        'admin' => 0\n      ]);\n    }\n    return false;\n  }",
            "startLine": 114,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_chat",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "user"
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "make_admin": {
            "name": "make_admin",
            "summary": "Makes the given participant an admin of the given chat provided the current user is admin of this chat.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\chat",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_chat, $id_user)\n  {\n    if ( $this->is_admin($id_chat) ){\n      return (bool)$this->db->update_ignore('bbn_chats_users', [\n        'admin' => 1\n      ], [\n        'id_chat' => $id_chat,\n        'id_user' => $id_user,\n      ]);\n    }\n    return false;\n  }",
            "startLine": 134,
            "endLine": 145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_chat",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "user"
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "is_participant": {
            "name": "is_participant",
            "summary": "Checks whether the given user is participant of the given chat.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\chat",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_chat, $id_user = NULL)\n  {\n    if ( $this->check() ){\n      return (bool)$this->db->count('bbn_chats_users', [\n        'id_chat' => $id_chat,\n        'id_user' => $id_user ?: $this->user->get_id()\n      ]);\n    }\n    return null;\n  }",
            "startLine": 154,
            "endLine": 163,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_chat",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "user"
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "info": {
            "name": "info",
            "summary": "Gets information about the given chat.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\chat",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_chat)\n  {\n    if ( $this->check() ){\n      return $this->db->rselect('bbn_chats', [], ['id' => $id_chat]) ?: null;\n    }\n    return null;\n  }",
            "startLine": 171,
            "endLine": 177,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_chat",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_participants": {
            "name": "get_participants",
            "summary": "Returns the participants of the given chat as an array of id_user.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\chat",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_chat)\n  {\n    if ( $this->check() ){\n      return $this->db->get_field_values('bbn_chats_users', 'id_user', ['id_chat' => $id_chat]);\n    }\n    return null;\n  }",
            "startLine": 185,
            "endLine": 191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_chat",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "talk": {
            "name": "talk",
            "summary": "Sends a new message from the current user in the given chat.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\chat",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_chat, $message)\n  {\n    if ( $this->check() && ($chat = $this->info($id_chat)) && !$chat['blocked'] ){\n      $users = $this->get_participants($id_chat);\n      if ( \\in_array($this->user->get_id(), $users, true) ){\n        $time = microtime(true);\n        $st = bbn\\util\\enc::crypt(json_encode(['time' => $time, 'user' => $this->user->get_id(), 'message' => $message]));\n        $day = date('Y-m-d');\n        foreach ( $users as $user ){\n          $dir = BBN_DATA_PATH.'users\/'.$user.'\/chat\/'.$id_chat.'\/'.$day;\n          if ( bbn\\file\\dir::create_path($dir) ){\n            file_put_contents($dir.'\/'.$time.'.msg', $st);\n          }\n        }\n        return $this->db->update('bbn_chats', ['last_message' => $time], ['id' => $id_chat]);\n      }\n    }\n    return null;\n  }",
            "startLine": 200,
            "endLine": 218,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_chat",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "message",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "is_admin": {
            "name": "is_admin",
            "summary": "Checks whether the current user is an admin of the given chat or not.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\chat",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_chat)\n  {\n    if ( $this->check() && ($chat = $this->info($id_chat)) && !$chat['blocked'] ){\n      return (bool)$this->db->count('bbn_chats_users', [\n        'id_chat' => $id_chat,\n        'id_user' => $this->user->get_id(),\n        'admin' => 1\n      ]);\n    }\n    return null;\n  }",
            "startLine": 226,
            "endLine": 236,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_chat",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "block": {
            "name": "block",
            "summary": "Close a chat by setting blocked to 1.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\chat",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_chat)\n  {\n    if ( $this->is_admin($id_chat) ){\n      return (bool)$this->db->update('bbn_chats', ['blocked' => 1], ['id' => $id_chat]);\n    }\n    return false;\n  }",
            "startLine": 244,
            "endLine": 250,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_chat",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_chats": {
            "name": "get_chats",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\chat",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ( $this->check() ){\n      return $this->db->get_field_values('bbn_chats_users', 'id_chat', ['id_user' => $this->user->get_id()]);\n    }\n  }",
            "startLine": 252,
            "endLine": 257,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_chat_by_users": {
            "name": "get_chat_by_users",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\chat",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $users)\n  {\n    if ( $this->check() && count($users) ){\n      $cfg = [\n        'tables' => ['bbn_chats'],\n        'fields' => ['bbn_chats.id'],\n        'join' => [],\n        'where' => ['blocked' => 1]\n      ];\n      foreach ( $users as $i => $u ){\n        $cfg['join'][] = [\n          'table' => 'bbn_chats_users',\n          'alias' => 'u'.($i+1),\n          'on' => [\n            'conditions' => [\n              [\n                'field' => 'bbn_chats.id',\n                'exp' => 'u'.($i+1).'.id_chat'\n              ]\n            ]\n          ]\n        ];\n        $cfg['where']['u'.($i+1).'.id_user'] = $u;\n      }\n      $id_chat = false;\n      $ids = $this->db->get_column_values($cfg);\n      if ( count($ids) ){\n        foreach ( $ids as $id ){\n          if ( count($this->get_participants($id)) === (count($users) + 1) ){\n            $id_chat = $id;\n            break;\n          }\n        }\n      }\n      if ( !$id_chat ){\n        $id_chat = $this->create($users);\n      }\n      return $id_chat ?: null;\n    }\n    return null;\n  }",
            "startLine": 260,
            "endLine": 300,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "users",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_messages": {
            "name": "get_messages",
            "summary": "Returns messages from the given chat sent after $last.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\chat",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_chat, $last = NULL, $day = NULL)\n  {\n    $res = ['success' => false, 'last' => null, 'messages' => []];\n    if ( $this->check() ){\n      $dir = BBN_DATA_PATH.'users\/'.$this->user->get_id().'\/chat\/'.$id_chat.'\/'.($day ?: date('Y-m-d'));\n      if ( $this->is_participant($id_chat) && is_dir($dir) ){\n        $res['success'] = true;\n        $files = bbn\\file\\dir::get_files($dir);\n        foreach ( $files as $file ){\n          $time = (float)basename($file, '.msg');\n          if ( (!$last || x::compare_floats($time, $last, '>')) && ($st = file_get_contents($file)) ){\n            $enc = bbn\\util\\enc::crypt('test');\n            $res['messages'][] = json_decode(bbn\\util\\enc::decrypt($st), true);\n          }\n        }\n        if ( isset($time) ){\n          $res['last'] = $time;\n        }\n      }\n    }\n    return $res;\n  }",
            "startLine": 309,
            "endLine": 330,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_chat",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "last",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "day",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "get_old_messages": {
            "name": "get_old_messages",
            "summary": "Returns messages from the given chat for a specific day.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\chat",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_chat, $day)\n  {\n    return $this->get_messages($id_chat, null, $day);\n  }",
            "startLine": 339,
            "endLine": 342,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_chat",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "day",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_active_chats": {
            "name": "get_active_chats",
            "summary": "*",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\chat",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n      $t =& $this;\n      $d = new \\DateTime();\n      $d->sub(new \\DateInterval('PT20M'));\n      if ( $chats = array_filter($chats, function($c) use($d, $t){\n        return ($m = $t->get_messages($c, $d->getTimestamp())) && !empty($m['messages']);\n      }) ){\n        return array_map(function($c) use($d, $t){\n          return [\n            'id' => $c,\n            'messages' => ($m = $t->get_messages($c)) ? $m['messages'] : [],\n            'partecipants' => $t->get_participants($c),\n            'has_old' => $t->has_old_messages($c, $d->getTimestamp()-1)\n          ];\n        }, $chats);\n      }\n    }\n    return [];\n  }",
            "startLine": 347,
            "endLine": 366,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "has_old_messages": {
            "name": "has_old_messages",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\chat",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_chat, $moment)\n  {\n    if ( $this->check() ){\n      $cdir = BBN_DATA_PATH.'users\/'.$this->user->get_id().'\/chat\/'.$id_chat.'\/';\n      if ( $this->is_participant($id_chat) && is_dir($cdir) ){\n        $dir = $cdir . date('Y-m-d', $moment);\n        $files = \\bbn\\file\\dir::get_files($dir);\n        foreach ( $files as $file ){\n          $time = (float)basename($file, '.msg');\n          if ( x::compare_floats($time, $moment, '<') && ($st = file_get_contents($file)) ){\n            return true;\n          }\n        }\n        $dirs = \\bbn\\file\\dir::get_dirs($cdir);\n        foreach ( $dirs as $d ){\n          if ( (basename($d) < date('Y-m-d', $moment)) && !empty(\\bbn\\file\\dir::get_files($d)) ){\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }",
            "startLine": 368,
            "endLine": 390,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_chat",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "moment",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": [],
    "constants": null,
    "numMethods": 17,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 0,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "db": null,
        "user": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\appui",
    "shortName": "chat",
    "summary": "Class chat"
}