{
    "doc": {
        "description": "Class observer",
        "tags": {
            "package": "bbn\\appui"
        }
    },
    "name": "bbn\\appui\\observer",
    "namespace": true,
    "traits": [],
    "interfaces": [],
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/appui\/observer.php",
    "startLine": 17,
    "endLine": 537,
    "contentConstructor": {
        "file": "bbn\\appui\\observer",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "observer constructor.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\observer",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\db $db)\n  {\n    $user = \\bbn\\user::get_instance();\n    $this->id_user = $user ? $user->get_id() : null;\n    if (defined('BBN_EXTERNAL_USER_ID') && ($this->id_user === BBN_EXTERNAL_USER_ID)) {\n      $this->id_user = null;\n    }\n    parent::__construct($db);\n  }",
            "startLine": 207,
            "doc": {
                "description": "observer constructor.",
                "params": [
                    {
                        "tag": "param",
                        "type": "bbn\\db",
                        "name": "$db"
                    }
                ],
                "return": ""
            },
            "endLine": 215,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "__construct",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\db",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bbn\\db $db)\n  {\n  }",
                "startLine": 27,
                "doc": null,
                "endLine": 29,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\db",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "check_result": {
            "name": "check_result",
            "summary": "Confronts the current result with the one kept in database.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\observer",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    if ( $d = $this->get($id) ){\n      $t = new bbn\\util\\timer();\n      $t->start();\n      $res = $this->_exec($d['request'], $d['params']);\n      $duration = (int)ceil($t->stop() * 1000);\n      if ( $res !== $d['result'] ){\n        $this->db->update('bbn_observers', [\n          'result' => $res,\n          'duration' => $duration\n        ], [\n          'id' => $id\n        ]);\n        return false;\n      }\n      return true;\n    }\n  }",
            "startLine": 223,
            "doc": {
                "description": "Confronts the current result with the one kept in database.",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id"
                    }
                ],
                "return": ""
            },
            "endLine": 241,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "add": {
            "name": "add",
            "summary": "Adds a new observer and returns its id or the id of an existing one.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\observer",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    if (\n      $this->id_user &&\n      (null !== $cfg['request']) &&\n      $this->check()\n    ){\n      $t = new bbn\\util\\timer();\n      $t->start();\n      if ( is_string($cfg['request']) ){\n        $params = self::sanitize_params($cfg['params'] ?? []);\n        $request = $cfg['request'];\n      }\n      else if ( is_array($cfg['request']) ){\n        $params = null;\n        $request = $cfg['request'];\n      }\n      else{\n        return null;\n      }\n      $res = $this->_exec($request, $params);\n      $duration = (int)ceil($t->stop() * 1000);\n      if ( is_array($request) ){\n        $request = json_encode($request);\n      }\n      $id_alias = $this->_get_id($request, $params);\n      \/\/die(var_dump($id_alias, $this->db->last(), $request, $params));\n      \/\/ If it is a public observer it will be the id_alias and the main observer\n      if (\n        !$id_alias &&\n        !empty($cfg['public']) &&\n        $this->db->insert('bbn_observers', [\n          'request' => $request,\n          'params' => $params ?: null,\n          'name' => $cfg['name'] ?? null,\n          'duration' => $duration,\n          'id_user' => null,\n          'public' => 1,\n          'result' => $res\n        ])\n      ){\n        $id_alias = $this->db->last_id();\n      }\n      \/\/ Getting the ID of the observer corresponding to current user\n      if ( $id_obs = $this->_get_id_from_user($request, $params) ){\n        \/\/\n        $this->check_result($id_obs);\n        return $id_obs;\n      }\n      else if ( $id_alias ){\n        if ( $this->db->insert('bbn_observers', [\n          'id_user' => $this->id_user,\n          'public' => 0,\n          'id_alias' => $id_alias,\n          'next' => null,\n          'result' => $res\n        ]) ){\n          return $this->db->last_id();\n        }\n      }\n      else{\n        if ( $this->db->insert('bbn_observers', [\n          'request' => $request,\n          'params' => $params ?: null,\n          'name' => $cfg['name'] ?? null,\n          'duration' => $duration,\n          'id_user' => $this->id_user,\n          'public' => 0,\n          'result' => $res\n        ]) ){\n          return $this->db->last_id();\n        }\n      }\n    }\n    return null;\n  }",
            "startLine": 249,
            "doc": {
                "description": "Adds a new observer and returns its id or the id of an existing one.",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "endLine": 324,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get": {
            "name": "get",
            "summary": "Returns an observer with its alias properties if there is one (except id and result).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\observer",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    if ( $this->check() ){\n      $d = $this->db->rselect('bbn_observers', [], [\n        'id' => $id\n      ]);\n      if ( !$d['id_alias'] ){\n        return $d;\n      }\n      if ($alias = $this->db->rselect('bbn_observers', [], [\n        'id' => $d['id_alias']\n      ])) {\n        $alias['id'] = $d['id'];\n        $alias['result'] = $d['result'];\n        $alias['id_alias'] = $d['id_alias'];\n        return $alias;\n      }\n    }\n    return null;\n  }",
            "startLine": 332,
            "doc": {
                "description": "Returns an observer with its alias properties if there is one (except id and result).",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id"
                    }
                ],
                "return": ""
            },
            "endLine": 351,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_result": {
            "name": "get_result",
            "summary": "Returns the result of an observer's request from its UID.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\observer",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    if ( $this->check() ){\n      return $this->db->get_one(<<<MYSQL\nSELECT IFNULL(ro.`result`, o.`result`)\nFROM bbn_observers AS o\n  LEFT JOIN bbn_observers AS ro\n    ON ro.id = o.id_alias\nWHERE o.id = ?\nMYSQL\n        ,\n        hex2bin($id));\n    }\n  }",
            "startLine": 359,
            "doc": {
                "description": "Returns the result of an observer's request from its UID.",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id"
                    }
                ],
                "return": ""
            },
            "endLine": 372,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_list": {
            "name": "get_list",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\observer",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_user = NULL)\n  {\n    $field = $id_user ? 'o.id_user' : 'public';\n    $sql = <<<MYSQL\nSELECT o.id, o.id_alias,\nIFNULL(ro.request, o.request) AS request, IFNULL(ro.params, o.params) AS params,\nIFNULL(ro.id_user, o.id_user) AS id_user, IFNULL(ro.public, o.public) AS public,\nIFNULL(ro.frequency, o.frequency) AS frequency, IFNULL(ro.result, o.result) AS result,\nIFNULL(ro.next, o.next) AS next\nFROM bbn_observers AS o\n  LEFT JOIN bbn_observers AS ro\n    ON o.id_alias = ro.id\nWHERE $field = ?\nAND ((o.next < NOW() AND o.next IS NOT NULL)\nOR (ro.next < NOW() AND ro.next IS NOT NULL))\nMYSQL;\n    return $this->db->get_rows($sql, $id_user ? hex2bin($id_user) : 1);\n  }",
            "startLine": 380,
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "user"
                    }
                ],
                "return": ""
            },
            "endLine": 397,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "user"
                }
            ]
        },
        "user_delete": {
            "name": "user_delete",
            "summary": "Deletes the given observer for the current user",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\observer",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    if ( property_exists($this, 'user') && $this->check() ){\n      return $this->db->delete('bbn_observers', ['id' => $id, 'id_user' => $this->user]);\n    }\n    return 0;\n  }",
            "startLine": 404,
            "doc": {
                "description": "Deletes the given observer for the current user",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "endLine": 410,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "observe": {
            "name": "observe",
            "summary": "Checks the observers, execute their requests if interval is reached, it will stop when it finds differences in the",
            "description": "results, and returns the observers to be updated (meant to be executed from a cron task), indexed by id_user.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "results, and returns the observers to be updated (meant to be executed from a cron task), indexed by id_user."
                }
            ],
            "file": "bbn\\appui\\observer",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ( $this->check() ){\n      $rows = $this->db->rselect_all([\n        'table' => 'bbn_observers',\n        'fields' => ['id', 'id_user', 'request', 'params', 'result'],\n        'where' => [\n          'conditions' => [\n            [\n              'field' => 'id_alias',\n              'operator' => 'isnull'\n            ], [\n              'field' => 'next',\n              'operator' => '<',\n              'exp' => 'NOW()'\n            ]\n          ]\n        ]\n      ]);\n      $diff = [];\n      foreach ( $rows as $d ){\n        if ($this->check_observer($d)) {\n          \/\/ Aliases are the IDs of the observers aliases of the current row\n          $aliases = $this->db->rselect_all('bbn_observers', ['id', 'id_user', 'request', 'params', 'result'], ['id_alias' => $d['id']]);\n          if ( \\bbn\\str::is_json($d['request']) ){\n            $d['request'] = json_decode($d['request'], true);\n            $real_result = $this->_exec_array($d['request']);\n          }\n          else{\n            $real_result = $this->_exec($d['request'], $d['params']);\n          }\n          \/\/ If the result is different we update the table\n          if ( $real_result !== $d['result'] ){\n            echo '+';\n            $this->db->update('bbn_observers', ['result' => $real_result], ['id' => $d['id']]);\n            \/\/ And if a user is attached to the observer we add it to the result\n            if ( $d['id_user'] ){\n              if ( !isset($diff[$d['id_user']]) ){\n                $diff[$d['id_user']] = [];\n              }\n              $diff[$d['id_user']][] = [\n                'id' => $d['id'],\n                'result' => $real_result\n              ];\n            }\n            \/\/ For each alias we add the entry for the corresponding user...\n            foreach ( $aliases as $a ){\n              \/\/ ...If the result differs\n              if ( $real_result !== $a['result'] ){\n                $this->db->update('bbn_observers', ['result' => $real_result], ['id' => $a['id']]);\n                if ( !isset($diff[$a['id_user']]) ){\n                  $diff[$a['id_user']] = [];\n                }\n                $diff[$a['id_user']][] = [\n                  'id' => $a['id'],\n                  'result' => $real_result\n                ];\n              }\n            }\n          }\n        }\n        \/\/ And we update the next time of execution\n        $this->_update_next($d['id']);\n      }\n      echo '.';\n      $this->delete_old();\n      $this->db->flush();\n      if ( count($diff) ){\n        bbn\\x::dump('Returning diff!', $diff);\n        return $diff;\n      }\n      if ( ob_get_contents() ){\n        ob_end_flush();\n      }\n      return true;\n    }\n    bbn\\x::dump('Canceling observer: '.date('H:i:s Y-m-d'));\n    return false;\n  }",
            "startLine": 458,
            "doc": {
                "description": "Checks the observers, execute their requests if interval is reached, it will stop when it finds differences in the\nresults, and returns the observers to be updated (meant to be executed from a cron task), indexed by id_user.",
                "params": [],
                "return": ""
            },
            "endLine": 536,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
            "startLine": 45,
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).",
                "params": [],
                "return": ""
            },
            "endLine": 50,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                "startLine": 45,
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).",
                    "params": [],
                    "return": ""
                },
                "endLine": 50,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
            "startLine": 56,
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).",
                "params": [],
                "return": ""
            },
            "endLine": 61,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                "startLine": 56,
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).",
                    "params": [],
                    "return": ""
                },
                "endLine": 61,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "get_error": {
            "name": "get_error",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 72,
            "doc": null,
            "endLine": 74,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "get_error",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n  }",
                "startLine": 72,
                "doc": null,
                "endLine": 74,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "get_errors": {
            "name": "get_errors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 76,
            "doc": null,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "get_errors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n  }",
                "startLine": 76,
                "doc": null,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\t\t\t$ar = \\func_get_args();\n\t\t\t$cn = bbn\\str::encode_filename(str_replace('\\\\', '_', \\get_class($this)));\n\t\t\tforeach ( $ar as $a ){\n\t\t\t\tbbn\\x::log($a, $cn);\n\t\t\t}\n\t\t}\n  }",
            "startLine": 80,
            "doc": null,
            "endLine": 88,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\t\t\t$ar = \\func_get_args();\n\t\t\t$cn = bbn\\str::encode_filename(str_replace('\\\\', '_', \\get_class($this)));\n\t\t\tforeach ( $ar as $a ){\n\t\t\t\tbbn\\x::log($a, $cn);\n\t\t\t}\n\t\t}\n  }",
                "startLine": 80,
                "doc": null,
                "endLine": 88,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $this->log([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]);\n    die(var_dump([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]));\n  }",
            "startLine": 95,
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$arguments"
                    }
                ],
                "return": ""
            },
            "endLine": 99,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $this->log([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]);\n    die(var_dump([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]));\n  }",
                "startLine": 95,
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$name"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$arguments"
                        }
                    ],
                    "return": ""
                },
                "endLine": 99,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "is_debug": {
            "name": "is_debug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 104,
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "is_debug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n  }",
                "startLine": 104,
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "endLine": 106,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "set_debug": {
            "name": "set_debug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($debug)\n  {\n  }",
            "startLine": 112,
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "endLine": 114,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "set_debug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($debug)\n  {\n  }",
                "startLine": 112,
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "endLine": 114,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": null,
    "constants": null,
    "numMethods": 16,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 0,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\models\\cls\\db",
    "isSubclassOf": false,
    "defaultProperties": {
        "path": null,
        "time_done": false,
        "id_user": null,
        "db": null,
        "errors": [],
        "error": false,
        "debug": false,
        "log": []
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\appui",
    "shortName": "observer"
}