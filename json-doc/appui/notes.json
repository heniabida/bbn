{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\appui\\notes",
    "namespace": true,
    "traits": [
        "bbn\\models\\tts\\references",
        "bbn\\models\\tts\\optional",
        "bbn\\models\\tts\\dbconfig"
    ],
    "interfaces": [],
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/appui\/notes.php",
    "startLine": 17,
    "endLine": 818,
    "contentConstructor": {
        "file": "bbn\\appui\\notes",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\db $db)\n  {\n    parent::__construct($db);\n    self::_init_class_cfg(self::$default_class_cfg);\n    self::optional_init();\n  }",
            "startLine": 84,
            "endLine": 89,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "__construct",
                "summary": "Constructor.",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\db",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bbn\\db $db)\n  {\n      $this->db = $db;\n  }",
                "startLine": 37,
                "endLine": 40,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\db",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_media_instance": {
            "name": "get_media_instance",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!$this->medias) {\n      $this->medias = new medias($this->db);\n    }\n    return $this->medias;\n  }",
            "startLine": 91,
            "endLine": 97,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "insert": {
            "name": "insert",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($title, $content, $type = NULL, $private = false, $locked = false, $parent = NULL, $alias = NULL)\n  {\n        $cf =& $this->class_cfg;\n    if (is_null($type)) {\n      $type = self::get_option_id('personal', 'types');\n    }\n    if (($usr = bbn\\user::get_instance()) \n        && $this->db->insert(\n          $cf['table'], [\n          $cf['arch']['notes']['id_parent'] => $parent,\n                $cf['arch']['notes']['id_alias'] => $alias,\n          $cf['arch']['notes']['id_type'] => $type,\n          $cf['arch']['notes']['private'] => !empty($private) ? 1 : 0,\n          $cf['arch']['notes']['locked'] => !empty($locked) ? 1 : 0,\n          $cf['arch']['notes']['creator'] => $usr->get_id()\n          ]\n        ) \n        && ($id_note = $this->db->last_id()) \n        && $this->insert_version($id_note, $title, $content)\n    ) {\n      return $id_note;\n    }\n    return false;\n  }",
            "startLine": 99,
            "endLine": 122,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 7,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "title",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 3,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "locked",
                    "position": 4,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "parent",
                    "position": 5,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "alias",
                    "position": 6,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "insert_version": {
            "name": "insert_version",
            "summary": "Adds a new version to the given note.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_note, $title, $content)\n  {\n    if ($this->check() && ($usr = bbn\\user::get_instance()) && ($note = $this->get($id_note))) {\n      $cf =& $this->class_cfg;\n      $latest = $note['version'] ?? 0;\n      if (!$latest || ($note['content'] !== $content) || ($note['title'] !== $title)) {\n        $next = $latest + 1;\n      }\n      if (isset($next) && $this->db->insert(\n        $cf['tables']['versions'], [\n        $cf['arch']['versions']['id_note'] => $id_note,\n        $cf['arch']['versions']['version'] => $next,\n        $cf['arch']['versions']['title'] => $title,\n        $cf['arch']['versions']['content'] => $content,\n        $cf['arch']['versions']['id_user'] => $usr->get_id(),\n        $cf['arch']['versions']['creation'] => date('Y-m-d H:i:s')\n        ]\n      )\n      ) {\n        return $next;\n      }\n      return $latest;\n    }\n    return null;\n  }",
            "startLine": 132,
            "endLine": 156,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "update": {
            "name": "update",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id, $title, $content, $private = NULL, $locked = NULL)\n  {\n    $ok = null;\n    if ($old = $this->db->rselect('bbn_notes', [], ['id' => $id])) {  \n      bbn\\x::hdump('update',$old, $id, $title, $content);    \n      $ok = 0;\n      $new = [];\n      if (!\\is_null($private) && ($private != $old['private'])) {\n        $new['private'] = $private;\n      }\n      if (!\\is_null($locked) && ($locked != $old['locked'])) {\n        $new['locked'] = $locked;\n      }\n      if (!empty($new)) {\n        $ok = $this->db->update('bbn_notes', $new, ['id' => $id]);\n      }\n      if ($old_v = $this->get($id)) {\n        $changed = false;\n        $new_v = [\n          'title' => $old_v['title'],\n          'content' => $old_v['content']\n        ];\n        if ($title !== $old_v['title']) {\n          $changed = true;\n          $new_v['title'] = $title;\n        }\n        if ($content !== $old_v['content']) {\n          $changed = true;\n          $new_v['content'] = $content;\n        }\n        if (!empty($changed)) {         \n          $ok = $this->insert_version($id, $new_v['title'], $new_v['content']);    \n        }\n      }\n    }\n    return $ok;\n  }",
            "startLine": 158,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 3,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 3,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "locked",
                    "position": 4,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "latest": {
            "name": "latest",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    $cf =& $this->class_cfg;\n    return $this->db->select_one(\n      $cf['tables']['versions'], 'MAX('.$cf['arch']['versions']['version'].')', [\n      $cf['arch']['versions']['id_note'] => $id\n      ]\n    );\n  }",
            "startLine": 196,
            "endLine": 204,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get": {
            "name": "get",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id, $version = NULL, $simple = false)\n  {\n    $cf =& $this->class_cfg;\n    if (!\\is_int($version)) {\n      $version = $this->latest($id) ?: 1;\n    }\n    if ($res = $this->db->rselect(\n      $cf['tables']['notes'], [], [\n      $cf['arch']['notes']['id'] => $id\n      ]\n    )\n    ) {\n      if ($tmp = $this->db->rselect(\n        $cf['tables']['versions'], [], [\n        $cf['arch']['versions']['id_note'] => $id,\n        $cf['arch']['versions']['version'] => $version\n        ]\n      )\n      ) {\n        $res = array_merge($res, $tmp);\n      }\n      if ($simple) {\n        unset($res[$cf['arch']['versions']['content']]);\n      }\n      else {\n        if ($medias = $this->db->get_column_values(\n          $cf['tables']['nmedias'], $cf['arch']['nmedias']['id_media'], [\n          $cf['arch']['nmedias']['id_note'] => $id,\n          $cf['arch']['nmedias']['version'] => $version\n          ]\n        ) \n        ) {\n          $media = $this->get_media_instance();\n          $res['medias'] = [];\n          foreach ($medias as $m) {\n            $res['medias'][] = $media->get_media($m, true);\n          }\n        }\n      }\n      return $res;\n    }\n    return null;\n  }",
            "startLine": 206,
            "endLine": 248,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "simple",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "get_full": {
            "name": "get_full",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id, $version = NULL)\n  {\n    $cf =& $this->class_cfg;\n    if (!\\is_int($version)) {\n      $version = $this->latest($id);\n    }\n    if ($res = $this->db->rselect(\n      [\n      'table' => $cf['table'],\n      'fields' => [\n        $cf['arch']['notes']['id'],\n        $cf['arch']['notes']['id_parent'],\n        $cf['arch']['notes']['id_alias'],\n        $cf['arch']['notes']['id_type'],\n        $cf['arch']['notes']['private'],\n        $cf['arch']['notes']['locked'],\n        $cf['arch']['notes']['pinned'],\n        $cf['arch']['versions']['version'],\n        $cf['arch']['versions']['title'],\n        $cf['arch']['versions']['content'],\n        $cf['arch']['versions']['id_user'],\n        $cf['arch']['versions']['creation']\n      ],\n      'join' => [[\n        'table' => $cf['tables']['versions'],\n        'on' => [\n          'conditions' => [[\n            'field' => $cf['arch']['versions']['id_note'],\n            'exp' => $cf['arch']['notes']['id'],\n          ], [\n            'field' => $cf['arch']['versions']['version'],\n            'value' => $version\n          ]]\n        ]\n      ]],\n      'where' => [\n        'conditions' => [[\n          'field' => $cf['arch']['notes']['id'],\n          'value' => $id\n        ]]\n      ]\n      ]\n    ) \n    ) {\n      $res['medias'] = $this->get_medias($id, $version);\n      return $res;\n    }\n    return null;\n  }",
            "startLine": 250,
            "endLine": 298,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "get_by_type": {
            "name": "get_by_type",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($type = NULL, $id_user = false, $limit = 0, $start = 0)\n  {\n    $db =& $this->db;\n    $cf =& $this->class_cfg;\n    $res = [];\n    if (!\\bbn\\str::is_uid($type)) {\n      $type = $type = self::get_option_id(is_null($type) ? 'personal' : $type, 'types');\n    }\n    if (\\bbn\\str::is_uid($type) && is_int($limit) && is_int($start)) {\n      $where = [[\n        'field' => $db->cfn($cf['arch']['notes']['id_type'], $cf['table']),\n        'value' => $type\n      ], [\n        'field' => $db->cfn($cf['arch']['notes']['active'], $cf['table']),\n        'value' => 1\n      ], [\n        'field' => 'versions2.'.$cf['arch']['versions']['version'],\n        'operator' => 'isnull'\n      ]];\n      if (\\bbn\\str::is_uid($id_user)) {\n        $where[] = [\n          'field' => $db->cfn($cf['arch']['notes']['creator'], $cf['table']),\n          'value' => $id_user\n        ];\n      }\n      $notes = $db->rselect_all(\n        [\n        'table' => $cf['table'],\n        'fields' => [\n          'versions1.'.$cf['arch']['versions']['id_note'],\n          'versions1.'.$cf['arch']['versions']['version'],\n          'versions1.'.$cf['arch']['versions']['title'],\n          'versions1.'.$cf['arch']['versions']['content'],\n          'versions1.'.$cf['arch']['versions']['id_user'],\n          'versions1.'.$cf['arch']['versions']['creation']\n        ],\n        'join' => [[\n          'table' => $cf['tables']['versions'],\n          'type' => 'left',\n          'alias' => 'versions1',\n          'on' => [\n            'conditions' => [[\n              'field' => $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n              'exp' => 'versions1.'.$cf['arch']['versions']['id_note']\n            ]]\n          ]\n        ], [\n          'table' => $cf['tables']['versions'],\n          'type' => 'left',\n          'alias' => 'versions2',\n          'on' => [\n            'conditions' => [[\n              'field' => $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n              'exp' => 'versions2.'.$cf['arch']['versions']['id_note']\n            ], [\n              'field' => 'versions1.'.$cf['arch']['versions']['version'],\n              'operator' => '<',\n              'exp' => 'versions2.'.$cf['arch']['versions']['version']\n            ]]\n          ]\n        ]],\n        'where' => [\n          'conditions' => $where\n        ],\n        'group_by' => $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n        'order' => [[\n          'field' => 'versions1.'.$cf['arch']['versions']['version'],\n          'dir' => 'DESC'\n        ], [\n          'field' => 'versions1.'.$cf['arch']['versions']['creation'],\n          'dir' => 'DESC'\n        ]],\n        'limit' => $limit,\n        'start' => $start\n        ]\n      );\n      foreach ($notes as $note){\n        if ($medias = $db->get_column_values(\n          $cf['tables']['nmedias'], $cf['arch']['nmedias']['id_media'], [\n          $cf['arch']['nmedias']['id_note'] => $note[$cf['arch']['versions']['id_note']],\n          $cf['arch']['nmedias']['version'] => $note[$cf['arch']['versions']['version']],\n          ]\n        ) \n        ) {\n          $note['medias'] = [];\n          foreach ($medias as $m){\n            if ($med = $db->rselect($cf['tables']['medias'], [], [$cf['arch']['medias']['id'] => $m])) {\n              if (\\bbn\\str::is_json($med[$cf['arch']['medias']['content']])) {\n                $med[$cf['arch']['medias']['content']] = json_decode($med[$cf['arch']['medias']['content']]);\n              }\n              $version['medias'][] = $med;\n            }\n          }\n        }\n        $res[] = $note;\n      }\n      \\bbn\\x::sort_by($res, $cf['arch']['versions']['creation'], 'DESC');\n      return $res;\n    }\n    return false;\n  }",
            "startLine": 300,
            "endLine": 400,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "get_versions": {
            "name": "get_versions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    if (\\bbn\\str::is_uid($id)) {\n      $cf =& $this->class_cfg;\n      return $this->db->rselect_all(\n        [\n        'table' => $cf['tables']['versions'],\n        'fields' => [\n          $cf['arch']['versions']['version'],\n          $cf['arch']['versions']['id_user'],\n          $cf['arch']['versions']['creation'],\n        ],\n        'where' => [\n          'conditions' => [[\n            'field' => $cf['arch']['versions']['id_note'],\n            'value' => $id\n          ]]\n        ],\n        'order' => [[\n          'field' => $cf['arch']['versions']['version'],\n          'dir' => 'DESC'\n        ]]\n        ]\n      );\n    }\n    return null;\n  }",
            "startLine": 402,
            "endLine": 428,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "count_by_type": {
            "name": "count_by_type",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($type = NULL, $id_user = false)\n  {\n    $db =& $this->db;\n    $cf =& $this->class_cfg;\n    if (!\\bbn\\str::is_uid($type)) {\n      $type = $type = self::get_option_id(is_null($type) ? 'personal' : $type, 'types');\n    }\n    if (\\bbn\\str::is_uid($type)) {\n      $where = [[\n        'field' => $cf['arch']['notes']['active'],\n        'value' => 1\n      ], [\n        'field' => $cf['arch']['notes']['id_type'],\n        'value' => $type\n      ]];\n      if (!empty($id_user) && \\bbn\\str::is_uid($id_user)) {\n        $where[] = [\n          'field' => $cf['arch']['notes']['creator'],\n          'value' => $id_user\n        ];\n      }\n      return $db->select_one(\n        [\n        'table' => $cf['table'],\n        'fields' => ['COUNT(DISTINCT '.$cf['arch']['notes']['id'].')'],\n        'where' => [\n          'conditions' => $where\n        ]\n        ]\n      );\n    }\n    return false;\n  }",
            "startLine": 430,
            "endLine": 462,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "add_media": {
            "name": "add_media",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_note, $name, array $content = NULL, $title = '', $type = 'file', $private = false)\n  {\n    $cf =& $this->class_cfg;\n    $media = $this->get_media_instance();\n    \/\/ Case where we give also the version (i.e. not the latest)\n    if (\\is_array($id_note) && (count($id_note) === 2)) {\n      $version = $id_note[1];\n      $id_note = $id_note[0];\n    }\n    else{\n      $version = $this->latest($id_note) ?: 1;\n    }\n    \n    if ($this->exists($id_note) \n        && ($id_media = $media->insert($name, $content, $title, $type, $private)) \n        && $this->add_media_to_note($id_media, $id_note, $version)\n    ) {\n      return $id_media;\n    }\n  \n    return null;\n  }",
            "startLine": 464,
            "endLine": 485,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 2,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 4,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "file",
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 5,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "add_media_to_note": {
            "name": "add_media_to_note",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_media, $id_note, $version)\n  {\n    if ($usr = bbn\\user::get_instance()) {\n      $cf =& $this->class_cfg;\n      return $this->db->insert(\n        $cf['tables']['nmedias'], [\n        $cf['arch']['nmedias']['id_note'] => $id_note,\n        $cf['arch']['nmedias']['version'] => $version,\n        $cf['arch']['nmedias']['id_media'] => $id_media,\n        $cf['arch']['nmedias']['id_user'] => $usr->get_id(),\n        $cf['arch']['nmedias']['creation'] => date('Y-m-d H:i:s')\n        ]\n      );\n    }\n    return null;\n  }",
            "startLine": 487,
            "endLine": 502,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_note",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 2,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "remove_media": {
            "name": "remove_media",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_media, $id_note, $version = false)\n  {\n    $cf =& $this->class_cfg;\n    if ($this->db->select_one($cf['tables']['medias'], $cf['arch']['medias']['id'], [$cf['arch']['medias']['id'] => $id_media])\n        && $this->exists($id_note)\n    ) {\n      $filter = [\n        $cf['arch']['nmedias']['id_note'] => $id_note,\n        $cf['arch']['nmedias']['version'] => $version ?: $this->latest($id_note),\n        $cf['arch']['nmedias']['id_media'] => $id_media\n      ];\n      if ($version === true) {\n        unset($filter[$cf['arch']['nmedias']['version']]);\n      }\n      return $this->db->delete($cf['tables']['nmedias'], $filter);\n    }\n    return null;\n  }",
            "startLine": 504,
            "endLine": 521,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_note",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "media2version": {
            "name": "media2version",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_media, $id_note, $version = false)\n  {\n    $cf =& $this->class_cfg;\n    return !empty($id_media) &&\n      $this->db->select_one($cf['tables']['medias'], $cf['arch']['medias']['id'], [$cf['arch']['medias']['id'] => $id_media]) &&\n      $this->exists($id_note) &&\n      $this->db->insert(\n        $cf['tables']['nmedias'], [\n        $cf['arch']['nmedias']['id_note'] => $id_note,\n        $cf['arch']['nmedias']['version'] => $version ?: $this->latest($id_note),\n        $cf['arch']['nmedias']['id_media'] => $id_media,\n        $cf['arch']['nmedias']['id_user'] => \\bbn\\user::get_instance()->get_id(),\n        $cf['arch']['nmedias']['creation'] => date('Y-m-d H:i:s')\n        ]\n      );\n  }",
            "startLine": 523,
            "endLine": 538,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_note",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "get_medias": {
            "name": "get_medias",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_note, $version = false, $type = false)\n  {\n    $ret = [];\n    $media = $this->get_media_instance();\n    $cf =& $this->class_cfg;\n    if ($this->exists($id_note)) {\n      $filter = [\n            $cf['arch']['nmedias']['id_note'] => $id_note,\n            $cf['arch']['nmedias']['version'] => $version ?: $this->latest($id_note),\n      ];\n      if ($version === true) {\n        unset($filter[$cf['arch']['nmedias']['version']]);\n      }\n      if ($medias = $this->db->get_column_values($cf['tables']['nmedias'], $cf['arch']['nmedias']['id_media'], $filter)) {\n        foreach ($medias as $m){\n          $ret[] = $media->get_media($m, true);\n        }\n      }\n    }\n      return $ret;\n  }",
            "startLine": 540,
            "endLine": 560,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "has_medias": {
            "name": "has_medias",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_note, $version = false, $id_media = '')\n  {\n    $cf =& $this->class_cfg;\n    if ($this->exists($id_note)) {\n      $where = [\n      $cf['arch']['nmedias']['id_note'] => $id_note,\n      $cf['arch']['nmedias']['version'] => $version ?: $this->latest($id_note)\n      ];\n      if (!empty($id_media) && \\bbn\\str::is_uid($id_media)) {\n        $where[$cf['arch']['nmedias']['id_media']] = $id_media;\n      }\n      return !!$this->db->count($cf['tables']['nmedias'], $where);\n    }\n    return null;\n  }",
            "startLine": 562,
            "endLine": 576,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "id_media",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "browse": {
            "name": "browse",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($cfg)\n  {\n    if (isset($cfg['limit']) && ($user = bbn\\user::get_instance())) {\n      \/** @var bbn\\db $db *\/\n      $db =& $this->db;\n      $cf =& $this->class_cfg;\n      $grid_cfg = [\n        'table' => $cf['table'],\n        'fields' => [\n          $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n          $db->cfn($cf['arch']['notes']['id_parent'], $cf['table']),\n          $db->cfn($cf['arch']['notes']['id_alias'], $cf['table']),\n          $db->cfn($cf['arch']['notes']['id_type'], $cf['table']),\n          $db->cfn($cf['arch']['notes']['private'], $cf['table']),\n          $db->cfn($cf['arch']['notes']['locked'], $cf['table']),\n          $db->cfn($cf['arch']['notes']['pinned'], $cf['table']),\n          $db->cfn($cf['arch']['notes']['creator'], $cf['table']),\n          $db->cfn($cf['arch']['notes']['active'], $cf['table']),\n          'first_version.'.$cf['arch']['versions']['creation'],\n          'last_version.'.$cf['arch']['versions']['title'],\n          'last_version.'.$cf['arch']['versions']['content'],\n          'last_version.'.$cf['arch']['versions']['id_user'],\n          'last_edit' => 'last_version.'.$cf['arch']['versions']['creation']\n        ],\n        'join' => [[\n          'table' => $cf['tables']['versions'],\n          'alias' => 'versions',\n          'on' => [\n            'logic' => 'AND',\n            'conditions' => [[\n              'field' => 'versions.'.$cf['arch']['versions']['id_note'],\n              'operator' => '=',\n              'exp' => $db->cfn($cf['arch']['notes']['id'], $cf['table'])\n            ]]\n          ]\n        ], [\n          'table' => $cf['tables']['versions'],\n          'alias' => 'last_version',\n          'on' => [\n            'logic' => 'AND',\n            'conditions' => [[\n              'field' => 'last_version.'.$cf['arch']['versions']['id_note'],\n              'operator' => '=',\n              'exp' => $db->cfn($cf['arch']['notes']['id'], $cf['table'])\n            ]]\n          ]\n        ], [\n          'table' => $cf['tables']['versions'],\n          'alias' => 'test_version',\n          'type' => 'left',\n          'on' => [\n            'logic' => 'AND',\n            'conditions' => [[\n              'field' => 'test_version.'.$cf['arch']['versions']['id_note'],\n              'operator' => '=',\n              'exp' => $db->cfn($cf['arch']['notes']['id'], $cf['table'])\n            ], [\n              'field' => 'last_version.'.$cf['arch']['versions']['version'],\n              'operator' => '<',\n              'exp' => 'test_version.'.$cf['arch']['versions']['version']\n            ]]\n          ]\n        ], [\n          'table' => $cf['tables']['versions'],\n          'alias' => 'first_version',\n          'on' => [\n            'logic' => 'AND',\n            'conditions' => [[\n              'field' => 'first_version.'.$cf['arch']['versions']['id_note'],\n              'operator' => '=',\n              'exp' => $db->cfn($cf['arch']['notes']['id'], $cf['table'])\n            ], [\n              'field' => 'first_version.'.$cf['arch']['versions']['version'],\n              'operator' => '=',\n              'value' => 1\n            ]]\n          ]\n        ]],\n        'filters' => [[\n          'field' => $db->cfn($cf['arch']['notes']['active'], $cf['table']),\n          'operator' => '=',\n          'value' => 1\n        ], [\n          'field' => 'test_version.'.$cf['arch']['versions']['version'],\n          'operator' => 'isnull'\n        ]],\n        'group_by' => $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n        'order' => [[\n          'field' => 'last_edit',\n          'dir' => 'DESC'\n        ]]\n      ];\n      if (!empty($cfg['fields'])) {\n        $grid_cfg['fields'] = bbn\\x::merge_arrays($grid_cfg['fields'], $cfg['fields']);\n        unset($cfg['fields']);\n      }\n      if (!empty($cfg['join'])) {\n        $grid_cfg['join'] = bbn\\x::merge_arrays($grid_cfg['join'], $cfg['join']);\n        unset($cfg['join']);\n      }\n      $grid = new grid($this->db, $cfg, $grid_cfg);\n      return $grid->get_datatable();\n    }\n  }",
            "startLine": 578,
            "endLine": 681,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "count": {
            "name": "count",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($user = bbn\\user::get_instance()) {\n      $cf =& $this->class_cfg;\n      $db =& $this->db;\n      $sql = \"\n      SELECT COUNT(DISTINCT {$db->cfn($cf['arch']['notes']['id'], $cf['tables']['notes'], 1)})\n      FROM {$db->tsn($cf['tables']['notes'], 1)}\n        JOIN {$db->tsn($cf['tables']['versions'], 1)}\n          ON {$db->cfn($cf['arch']['notes']['id'], $cf['tables']['notes'], 1)} = {$db->cfn($cf['arch']['versions']['id_note'], $cf['tables']['versions'], 1)}\n      WHERE {$db->cfn($cf['arch']['notes']['creator'], $cf['tables']['notes'], 1)} = ?\n      OR {$db->cfn($cf['arch']['versions']['id_user'], $cf['tables']['versions'], 1)} = ?\";\n      return $db->get_one($sql, $user->get_id(), $user->get_id());\n    }\n  }",
            "startLine": 683,
            "endLine": 697,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "remove": {
            "name": "remove",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id, $keep = false)\n  {\n    if (\\bbn\\str::is_uid($id)) {\n      $cf =& $this->class_cfg;\n      if (empty($keep)) {\n        if ($medias = $this->get_medias($id, true)) {\n          foreach ($medias as $m) {\n            $this->remove_media($m['id'], $id, true);\n          }\n        }\n        $this->db->delete($cf['tables']['versions'], [$cf['arch']['versions']['id_note'] => $id]);\n        return $this->db->delete($cf['table'], [$cf['arch']['notes']['id'] => $id]);\n      }\n      else {\n        return $this->db->update($cf['table'], [$cf['arch']['notes']['active'] => 0], [$cf['arch']['notes']['id'] => $id]);\n      }\n    }\n    return false;\n  }",
            "startLine": 704,
            "endLine": 722,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The note's uid"
                },
                {
                    "name": "keep",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "Set it to true if you want change active property to 0 instead of delete the row from db"
                }
            ]
        },
        "copy": {
            "name": "copy",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id, $version = NULL, $private = NULL)\n  {\n    if ($note = $this->get_full($id, $version)) {\n      if ($private === null) {\n        $private = $note['private'];\n      }\n      $id_note = $this->insert($note['title'], $note['content'], $note['type'], $private);\n      foreach ($note['medias'] as $m){\n        $this->add_media_to_note($m['id'], $id, $note['version']);\n      }\n      return $id_note;\n    }\n  }",
            "startLine": 724,
            "endLine": 736,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "get_medias_notes": {
            "name": "get_medias_notes",
            "summary": "Selects from db all medias that have the property content not null and a correspondant existing file.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($start, $limit)\n  {\n    $res = [];\n    $cf =& $this->class_cfg;\n    $all = $this->db->rselect_all(\n      [\n      'table'=> $cf['tables']['medias'],\n      'fields' => $cf['arch']['medias'],\n      'where' => [\n      'conditions'=> [[\n        'field' => $cf['arch']['medias']['private'],\n        'value' => 0\n      ],[\n        'field' => $cf['arch']['medias']['content'],\n        'operator' => 'isnotnull'\n      ]]\n      ],\n      'start'  => $start,\n      'limit' => $limit\n      ]\n    );\n    if (!empty($all)) {\n      $root = \\bbn\\mvc::get_data_path('appui-note').'media\/';\n      foreach ($all as $i => $a) {\n        if (bbn\\str::is_json($a['content']) && ($media_obj = $this->get_media_instance())) {\n          $content = json_decode($a['content'], true);\n          $path = $root.$content['path'].'\/';  \n          $full_path =  $path.$a['id'].'\/'.$a['name'];  \n          if (file_exists($full_path)) {\n            $all[$i]['notes'] = $this->get_media_notes($a['id']);\n            \/\/if the media is an image it takes the thumb 60, 60 for src\n            if ($media_obj->is_image($full_path) && ($thumb = $media_obj->get_thumbs($full_path))) {\n              $all[$i]['is_image'] = true;\n            }\n            $res[] = $all[$i];\n            \n          }\n        }\n      }\n    }\n    return $res;\n  }",
            "startLine": 745,
            "endLine": 786,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "start",
                    "position": 0,
                    "type": "int",
                    "required": true,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 1,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_media_notes": {
            "name": "get_media_notes",
            "summary": "returns all the notes linked to the media",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_media)\n  {\n      $notes = [];\n    $cms = new \\bbn\\appui\\cms($this->db);\n    $ids = $this->db->rselect_all(\n      $this->class_cfg['tables']['nmedias'], [\n        $this->class_cfg['arch']['nmedias']['id_note'],\n        $this->class_cfg['arch']['nmedias']['version']\n      ], \n      [\n        $this->class_cfg['arch']['nmedias']['id_media'] => $id_media\n      ]\n    );   \n    \n    if (!empty($ids)) {\n      foreach($ids as $i){\n        $tmp = $this->get($i['id_note']);\n        $tmp['is_published'] = $cms->is_published($i['id_note']);\n        $notes[] = $tmp;\n              \/\/return $notes;\n      }\n    }\n    return $notes;\n  }",
            "startLine": 794,
            "endLine": 817,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
            "startLine": 45,
            "endLine": 50,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                "startLine": 45,
                "endLine": 50,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
            "startLine": 56,
            "endLine": 61,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                "startLine": 56,
                "endLine": 61,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "get_error": {
            "name": "get_error",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 72,
            "endLine": 74,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "get_error",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n  }",
                "startLine": 72,
                "endLine": 74,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "get_errors": {
            "name": "get_errors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 76,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "get_errors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n  }",
                "startLine": 76,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\t\t\t$ar = \\func_get_args();\n\t\t\t$cn = bbn\\str::encode_filename(str_replace('\\\\', '_', \\get_class($this)));\n\t\t\tforeach ( $ar as $a ){\n\t\t\t\tbbn\\x::log($a, $cn);\n\t\t\t}\n\t\t}\n  }",
            "startLine": 80,
            "endLine": 88,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\t\t\t$ar = \\func_get_args();\n\t\t\t$cn = bbn\\str::encode_filename(str_replace('\\\\', '_', \\get_class($this)));\n\t\t\tforeach ( $ar as $a ){\n\t\t\t\tbbn\\x::log($a, $cn);\n\t\t\t}\n\t\t}\n  }",
                "startLine": 80,
                "endLine": 88,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $this->log([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]);\n    die(var_dump([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]));\n  }",
            "startLine": 95,
            "endLine": 99,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $this->log([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]);\n    die(var_dump([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]));\n  }",
                "startLine": 95,
                "endLine": 99,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": null,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": null,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "is_debug": {
            "name": "is_debug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 104,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "is_debug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n  }",
                "startLine": 104,
                "endLine": 106,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "set_debug": {
            "name": "set_debug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($debug)\n  {\n  }",
            "startLine": 112,
            "endLine": 114,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "set_debug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($debug)\n  {\n  }",
                "startLine": 112,
                "endLine": 114,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_references": {
            "name": "get_references",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return [\n      'select' => $this->references_select,\n      'join' => $this->references_join\n    ];\n  }",
            "startLine": 52,
            "endLine": 58,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "get_option_root": {
            "name": "get_option_root",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::optional_init();\n    return self::$option_root_id;\n  }",
            "startLine": 145,
            "endLine": 149,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "get_appui_root": {
            "name": "get_appui_root",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::optional_init();\n    return self::$option_appui_id;\n  }",
            "startLine": 152,
            "endLine": 156,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "get_options_object": {
            "name": "get_options_object",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $o = bbn\\appui\\options::get_instance();\n    if (!$o) {\n      throw new \\Exception(_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "startLine": 159,
            "endLine": 167,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bbn\\appui\\options"
            ],
            "parent": false,
            "arguments": []
        },
        "get_option_id": {
            "name": "get_option_id",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::get_options_object()->from_code(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 176,
            "endLine": 179,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "get_options_ids": {
            "name": "get_options_ids",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return array_flip(\n      array_filter(\n        self::get_options_object()->get_codes(...self::_treat_args(func_get_args())), function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "startLine": 182,
            "endLine": 191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "get_options_tree": {
            "name": "get_options_tree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::get_options_object()->full_tree(...self::_treat_args(func_get_args()))) ? $tree['items'] : [];\n  }",
            "startLine": 194,
            "endLine": 197,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "get_options": {
            "name": "get_options",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::get_options_object()->full_options(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 200,
            "endLine": 203,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "get_option": {
            "name": "get_option",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::get_options_object()->option(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 206,
            "endLine": 209,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "get_options_text_value": {
            "name": "get_options_text_value",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::get_option_id(...func_get_args())) ? self::get_options_object()->text_value_options($id) : [];\n  }",
            "startLine": 212,
            "endLine": 215,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "get_appui_option_id": {
            "name": "get_appui_option_id",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::get_options_object()->from_code(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 224,
            "endLine": 227,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_appui_options_ids": {
            "name": "get_appui_options_ids",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return array_flip(\n      array_filter(\n        self::get_options_object()->get_codes(\n          ...self::_treat_args(func_get_args(), true)\n        ),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "startLine": 230,
            "endLine": 242,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "get_appui_options_tree": {
            "name": "get_appui_options_tree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::get_options_object()->full_tree(...self::_treat_args(func_get_args(), true)) ) ? $tree['items'] : [];\n  }",
            "startLine": 245,
            "endLine": 248,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "get_appui_options": {
            "name": "get_appui_options",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::get_options_object()->full_options(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 251,
            "endLine": 254,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_appui_option": {
            "name": "get_appui_option",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::get_options_object()->option(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 257,
            "endLine": 260,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "get_appui_options_text_value": {
            "name": "get_appui_options_text_value",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::get_appui_option_id(...func_get_args())) ? self::get_options_object()->text_value_options($id) : [];\n  }",
            "startLine": 263,
            "endLine": 266,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "exists": {
            "name": "exists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    $res = $this->db->count(\n      $this->class_table, [\n      $this->class_cfg['arch'][$this->class_table_index]['id'] => $id\n      ]\n    );\n    return (bool)$res;\n  }",
            "startLine": 61,
            "endLine": 69,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_class_cfg": {
            "name": "get_class_cfg",
            "summary": "Return the",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->class_cfg;\n  }",
            "startLine": 75,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "get_fields": {
            "name": "get_fields",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\appui\\notes",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->fields;\n  }",
            "startLine": 80,
            "endLine": 83,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        }
    },
    "properties": null,
    "staticProperties": {
        "default_class_cfg": {
            "errors": {
                "19": "wrong fingerprint"
            },
            "table": "bbn_notes",
            "tables": {
                "notes": "bbn_notes",
                "versions": "bbn_notes_versions",
                "nmedias": "bbn_notes_medias",
                "medias": "bbn_medias"
            },
            "arch": {
                "notes": {
                    "id": "id",
                    "id_parent": "id_parent",
                    "id_alias": "id_alias",
                    "id_type": "id_type",
                    "private": "private",
                    "locked": "locked",
                    "pinned": "pinned",
                    "creator": "creator",
                    "active": "active"
                },
                "versions": {
                    "id_note": "id_note",
                    "version": "version",
                    "title": "title",
                    "content": "content",
                    "id_user": "id_user",
                    "creation": "creation"
                },
                "nmedias": {
                    "id": "id",
                    "id_media": "id_media",
                    "id_note": "id_note",
                    "version": "version",
                    "id_user": "id_user",
                    "comment": "comment",
                    "creation": "creation"
                },
                "medias": {
                    "id": "id",
                    "id_user": "id_user",
                    "type": "type",
                    "name": "name",
                    "title": "title",
                    "content": "content",
                    "private": "private"
                }
            },
            "paths": {
                "medias": "media\/"
            }
        },
        "optional_is_init": false,
        "option_root_id": null,
        "option_appui_id": null
    },
    "constants": null,
    "numMethods": 50,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 4,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\models\\tts\\references",
        "bbn\\models\\tts\\optional",
        "bbn\\models\\tts\\dbconfig"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\models\\cls\\db",
    "isSubclassOf": false,
    "defaultProperties": {
        "default_class_cfg": {
            "errors": {
                "19": "wrong fingerprint"
            },
            "table": "bbn_notes",
            "tables": {
                "notes": "bbn_notes",
                "versions": "bbn_notes_versions",
                "nmedias": "bbn_notes_medias",
                "medias": "bbn_medias"
            },
            "arch": {
                "notes": {
                    "id": "id",
                    "id_parent": "id_parent",
                    "id_alias": "id_alias",
                    "id_type": "id_type",
                    "private": "private",
                    "locked": "locked",
                    "pinned": "pinned",
                    "creator": "creator",
                    "active": "active"
                },
                "versions": {
                    "id_note": "id_note",
                    "version": "version",
                    "title": "title",
                    "content": "content",
                    "id_user": "id_user",
                    "creation": "creation"
                },
                "nmedias": {
                    "id": "id",
                    "id_media": "id_media",
                    "id_note": "id_note",
                    "version": "version",
                    "id_user": "id_user",
                    "comment": "comment",
                    "creation": "creation"
                },
                "medias": {
                    "id": "id",
                    "id_user": "id_user",
                    "type": "type",
                    "name": "name",
                    "title": "title",
                    "content": "content",
                    "private": "private"
                }
            },
            "paths": {
                "medias": "media\/"
            }
        },
        "optional_is_init": false,
        "option_root_id": null,
        "option_appui_id": null,
        "medias": null,
        "db": null,
        "errors": [],
        "error": false,
        "debug": false,
        "log": [],
        "references": null,
        "references_select": "",
        "references_join": "",
        "options": null,
        "class_cfg": null,
        "fields": null,
        "class_table": null,
        "class_table_index": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\appui",
    "shortName": "notes",
    "summary": ""
}