{
    "doc": {
        "description": "A permission system linked to options, User classes and preferences.\nFrom the moment a user or a group has a preference on an item, it is considered to have a permission. Deleting a permission deletes the preference",
        "tags": {
            "copyright": "BBN Solutions",
            "since": "Nov 24, 2016, 13:23:12 +0000",
            "category": "Authentication",
            "license": "http:\/\/opensource.org\/licenses\/MIT MIT",
            "version": "0.1",
            "todo": "Store the deleted preferences? And restore them if the a permission is re-given"
        }
    },
    "name": "bbn\\User\\Permissions",
    "namespace": true,
    "traits": [
        "bbn\\Models\\Tts\\Retriever",
        "bbn\\Models\\Tts\\Optional",
        "bbn\\Models\\Tts\\Current"
    ],
    "interfaces": [],
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
    "startLine": 25,
    "endLine": 764,
    "contentConstructor": {
        "file": "bbn\\User\\Permissions",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "permissions constructor.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $routes = NULL)\n  {\n    if (!($this->opt = bbn\\Appui\\Option::getInstance())) {\n      die('Impossible to construct permissions: you need to instantiate options before');\n    }\n\n    if (!($this->user = bbn\\User::getInstance())) {\n      die('Impossible to construct permissions: you need to instantiate user before');\n    }\n\n    if (!($this->pref = Preferences::getInstance())) {\n      die('Impossible to construct permissions: you need to instantiate preferences before');\n    }\n\n    if ($routes) {\n      foreach ($routes as $url => $plugin) {\n        $plugin['url']   = $url;\n        $this->plugins[] = $plugin;\n      }\n    }\n\n    self::retrieverInit($this);\n    self::optionalInit();\n    $this->db = bbn\\Db::getInstance();\n  }",
            "startLine": 50,
            "endLine": 74,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "routes",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "fromPath": {
            "name": "fromPath",
            "summary": "Returns the option's ID corresponds to the given path.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path, $type = 'access')\n  {\n    $parent = null;\n    $root   = false;\n    if (($type === 'access') && $this->plugins && !empty($path)) {\n      foreach ($this->plugins as $plugin) {\n        if (strpos($path, $plugin['url'].'\/') === 0) {\n          if (strpos($plugin['name'], 'appui-') === 0) {\n            $root = $this->opt->fromCode(\n              'access',\n              'permissions',\n              substr($plugin['name'], 6),\n              BBN_APPUI\n            );\n            $path = substr($path, strlen($plugin['url']));\n          }\n          elseif ($plugin['name']) {\n            $root = $this->opt->fromCode(\n              $plugin['name'],\n              'plugins',\n              'permissions',\n              BBN_APPUI\n            );\n          }\n          break;\n        }\n      }\n    }\n\n    if (!$root) {\n      $root = $this->opt->fromCode($type, self::$option_root_id);\n    }\n\n    if (!$root) {\n      throw new \\Exception(dgettext(X::tDom(), \"Impossible to find the permission code\"));\n    }\n\n    $parts  = explode('\/', $path);\n    $parent = $root;\n    foreach ($parts as $i => $p){\n      $is_not_last = $i < (\\count($parts) - 1);\n      if (!empty($p)) {\n        $prev_parent = $parent;\n        \/\/ Adds a slash for each bit of the path except the last one\n        $parent = $this->opt->fromCode($p.($is_not_last ? '\/' : ''), $prev_parent);\n        \/\/ If not found looking for a subpermission\n        if (!$parent && $is_not_last) {\n          $parent = $this->opt->fromCode($p, $prev_parent);\n        }\n      }\n    }\n\n    return $parent ?: null;\n  }",
            "startLine": 84,
            "endLine": 137,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": ""
                }
            ]
        },
        "toPath": {
            "name": "toPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option)\n  {\n    $p    = [];\n    $bits = $this->opt->getCodePath($id_option);\n    if (empty($bits) || (count($bits) < 4)) {\n      return null;\n    }\n\n    $bits = array_reverse($bits);\n    if (array_shift($bits) !== 'appui') {\n      return null;\n    }\n\n    $root   = array_shift($bits);\n    $ok     = false;\n    $prefix = '';\n    \/\/ Main application\n    if ($root === 'permissions') {\n      if (array_shift($bits) !== 'access') {\n        throw new \\Exception(\"The permission should be under access\");\n      }\n\n      $ok = true;\n    }\n    \/\/ Plugins\n    elseif ($plugin = X::getRow($this->plugins, ['name' => 'appui-'.$root])) {\n      if ((array_shift($bits) !== 'permissions') || (array_shift($bits) !== 'access')) {\n        throw new \\Exception(\"The permission should be under permissions\/access of the plugin\");\n      }\n\n      $prefix = $plugin['url'].'\/';\n      $ok     = true;\n    }\n\n    if ($ok) {\n      return $prefix.X::join($bits, '');\n    }\n\n    return null;\n  }",
            "startLine": 140,
            "endLine": 179,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "options": {
            "name": "options",
            "summary": "Returns the result of Appui\\Option::options filtered with only the ones authorized to the current user.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option = NULL, $type = 'access')\n  {\n    if (($id_option = $this->_get_id_option($id_option, $type))\n        && ($os = $this->opt->options(\\func_get_args()))\n    ) {\n      $res = [];\n      foreach ($os as $o){\n        if ($this->pref->has($o['id'])) {\n          $res[] = $o;\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "startLine": 189,
            "endLine": 205,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": ""
                }
            ]
        },
        "fullOptions": {
            "name": "fullOptions",
            "summary": "Returns the result of Appui\\Option::full_options filtered with only the ones authorized to the current user.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option = NULL, $type = 'access')\n  {\n    if (($id_option = $this->_get_id_option($id_option, $type))\n        && ($os = $this->opt->fullOptions(\\func_get_args()))\n    ) {\n      $res = [];\n      foreach ($os as $o){\n        \/* if ( ($ids = $this->pref->retrieveIds($o['id'])) && ($cfg = $this->pref->get($ids[0])) ){\n          $res[] = X::mergeArrays($o, $cfg);\n        } *\/\n        if ($this->has($o['id'], $type)) {\n          $res[] = X::mergeArrays($o, $this->pref->getByOption($o['id']) ?: []);\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "startLine": 215,
            "endLine": 234,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": ""
                }
            ]
        },
        "getAll": {
            "name": "getAll",
            "summary": "Returns the full list of permissions existing in the given option",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option = NULL, $type = 'access')\n  {\n    if ($id_option = $this->_get_id_option($id_option, $type)) {\n      return $this->pref->options($id_option ?: $this->getCurrent());\n    }\n\n    return null;\n  }",
            "startLine": 244,
            "endLine": 251,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": ""
                }
            ]
        },
        "getFull": {
            "name": "getFull",
            "summary": "Returns the full list of permissions existing in the given option with all the current user's preferences",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option = NULL, $type = 'access')\n  {\n    if ($id_option = $this->_get_id_option($id_option, $type)) {\n      return $this->pref->fullOptions($id_option ?: $this->getCurrent());\n    }\n\n    return null;\n  }",
            "startLine": 261,
            "endLine": 268,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": ""
                }
            ]
        },
        "get": {
            "name": "get",
            "summary": "Returns an option combined with its sole\/first permission",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option = NULL, $type = 'access', $force = false)\n  {\n    \/*\n    if ( $all = $this->getAll($id_option, $type) ){\n      $r = [];\n      foreach ( $all as $a ){\n        if ( $this->has($a['id'], '', $force) ){\n          $r[] = $a;\n        }\n      }\n      return $r;\n    }\n    *\/\n    if (($id_option = $this->_get_id_option($id_option, $type))\n        && $this->has($id_option, $type, $force)\n    ) {\n      return $this->pref->option($id_option);\n    }\n\n    return null;\n  }",
            "startLine": 279,
            "endLine": 299,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "has": {
            "name": "has",
            "summary": "Checks if a user and\/or a group has a permission.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option = NULL, $type = 'access', $force = false)\n  {\n    if (!$force && $this->user && $this->user->isDev()) {\n      return true;\n    }\n\n    if ($id_option = $this->_get_id_option($id_option, $type)) {\n      $option = $this->opt->option($id_option);\n      if (!empty($option['public'])) {\n        return true;\n      }\n\n      return $this->pref->has($id_option, $force);\n    }\n\n    return false;\n  }",
            "startLine": 310,
            "endLine": 326,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "hasDeep": {
            "name": "hasDeep",
            "summary": "Checks if a user and\/or a group has a permission for the given option or for its childern.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option = NULL, $type = 'access', $force = false)\n  {\n    if (!$force && $this->user && $this->user->isDev()) {\n      return true;\n    }\n\n    if ($this->has($id_option, $type, $force)) {\n      return true;\n    }\n\n    if (($id_option = $this->_get_id_option($id_option, $type))\n        && ($options = $this->opt->fullOptions($id_option))\n    ) {\n      foreach ($options as $option){\n        if ($this->hasDeep($option['id'], $type, $force)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }",
            "startLine": 337,
            "endLine": 358,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "is": {
            "name": "is",
            "summary": "Checks if an option corresponds to the given path.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path, $type = 'access')\n  {\n    return $this->fromPath($path, $type);\n  }",
            "startLine": 368,
            "endLine": 371,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": ""
                }
            ]
        },
        "customize": {
            "name": "customize",
            "summary": "Adapts a given array of options' to user's permissions",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $arr)\n  {\n    $res = [];\n    if (isset($arr[0])) {\n      foreach ($arr as $a){\n        if (isset($a['id']) && $this->has($a['id'])) {\n          $res[] = $a;\n        }\n      }\n    }\n    elseif (isset($arr['items'])) {\n      $res = $arr;\n      unset($res['items']);\n      foreach ($arr['items'] as $a){\n        if (isset($a['id']) && $this->has($a['id'])) {\n          if (!isset($res['items'])) {\n            $res['items'] = [];\n          }\n\n          $res['items'][] = $a;\n        }\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 380,
            "endLine": 405,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "arr",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "add": {
            "name": "add",
            "summary": "Grants a new permission to a user or a group",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option, $type = 'access')\n  {\n    if ($id_option = $this->_get_id_option($id_option, $type)) {\n      return $this->pref->setByOption($id_option, []);\n    }\n\n    return null;\n  }",
            "startLine": 414,
            "endLine": 421,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": ""
                }
            ]
        },
        "remove": {
            "name": "remove",
            "summary": "Deletes a preference for a path or an ID.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option, $type = 'access')\n  {\n    if ($id_option = $this->_get_id_option($id_option, $type)) {\n      return $this->pref->delete($id_option);\n    }\n\n    return null;\n  }",
            "startLine": 431,
            "endLine": 438,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": ""
                }
            ]
        },
        "readOption": {
            "name": "readOption",
            "summary": "Checks if the category represented by the given option ID is readable by the current user",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option = NULL)\n  {\n    if (bbn\\Str::isUid($id_option)) {\n      $root        = self::getOptionId('options');\n      $id_to_check = $this->opt->fromCode('opt'.$id_option, $root);\n      return $this->has($id_to_check, 'options');\n    }\n\n    return null;\n  }",
            "startLine": 447,
            "endLine": 456,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "writeOption": {
            "name": "writeOption",
            "summary": "Checks if the category represented by the given option ID is writable by the current user",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option)\n  {\n    if (bbn\\Str::isUid($id_option)) {\n      $root        = self::getOptionId('opt'.$id_option, 'options');\n      $id_to_check = $this->opt->fromCode('write', $root);\n      return $this->has($id_to_check, 'options');\n    }\n\n    return null;\n  }",
            "startLine": 465,
            "endLine": 474,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "updateAll": {
            "name": "updateAll",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($routes)\n  {\n    $res = ['total' => false];\n    \/** @var int The option's ID of the permissions' root $id_permission (permissions, appui) *\/\n    if ($id_permission = $this->getOptionRoot()) {\n      \/** @var int The option's ID of the permissions on options $id_option *\/\n      $id_option = $this->getOptionId('options');\n      if (!$id_option) {\n        $id_option = $this->opt->add(\n          [\n          'id_parent' => $id_permission,\n          'code' => 'options',\n          'text' => dgettext(X::tDom(), \"Options\"),\n          'cfg' => [\n            'icon' => 'nf nf-fa-cogs'\n          ]\n          ]\n        );\n      }\n\n      \/** @var int The option's ID of the permissions on pages (controllers) $id_page *\/\n      $id_page = $this->getOptionId('access');\n      if (!$id_page) {\n        $id_page = $this->opt->add(\n          [\n          'id_parent' => $id_permission,\n          'code' => 'access',\n          'text' => dgettext(X::tDom(), \"Access\"),\n          'cfg' => [\n            'icon' => 'nf nf-fa-files'\n          ]\n          ]\n        );\n      }\n\n      \/** @var int The option's ID of the permissions on pages (controllers) $id_page *\/\n      $id_plugins = $this->getOptionId('plugins');\n      if (!$id_plugins) {\n        $id_plugins = $this->opt->add(\n          [\n            'id_parent' => $id_permission,\n            'code' => 'plugins',\n            'text' => dgettext(X::tDom(), \"Plugins\"),\n            'cfg' => [\n              'icon' => 'nf nf-fa-plug'\n            ]\n          ]\n        );\n      }\n\n      \n\n      \/** @todo Add the possibility to do it for another project? *\/\n      $fs = new bbn\\File\\System();\n      $all = [];\n      $fn = function ($a) {\n        return !empty($a['num'])\n          || ((substr($a['name'], -4) === '.php')\n              && (basename($a['name']) !== '_ctrl.php'));\n      };\n\n      $res['total'] = 0;\n      if ($id_page\n          && ($root = bbn\\Mvc::getAppPath().'mvc\/public')\n          && ($all = $fs->getTree($root, '', false, $fn))\n      ) {\n        $all = $this->_treat($all);\n        usort($all, [$this, '_sort']);\n        array_walk($all, [$this, '_walk']);\n        foreach ($all as $i => &$it){\n          $it['cfg']     = json_encode(['order' => $i + 1]);\n          $res['total'] += $this->_add($it, $id_page);\n        }\n        unset($it);\n      }\n\n      if (!empty($routes)) {\n        foreach ($routes as $url => $route) {\n          $root = false;\n          if (strpos($route['name'], 'appui-') === 0) {\n            $root = $this->opt->fromCode('access', 'permissions', substr($route['name'], 6), 'appui');\n          }\n          else {\n            if (!($root = $this->opt->fromCode($route['name'], $id_plugins))) {\n              $root = $this->opt->add(['text' => $route['name'], 'code' => $route['name'], 'id_parent' => $id_plugins]);\n            }\n          }\n          if (!$root) {\n            continue;\n            throw new \\Exception(sprintf(dgettext(X::tDom(), \"Impossible to find the appui plugin %s\"), substr($route['name'], 6)));\n          }\n\n          if ($all = $fs->getTree(\n            $route['path'].'\/src\/mvc\/public',\n            '',\n            false,\n            $fn\n          )\n          ) {\n            $all = $this->_treat($all);\n            usort($all, [$this, '_sort']);\n            array_walk($all, [$this, '_walk']);\n            foreach ($all as $i => &$it){\n              $it['cfg']     = json_encode(['order' => $i + 1]);\n              $res['total'] += $this->_add($it, $root);\n            }\n            unset($it);\n          }\n        }\n      }\n\n      \/\/ $id_option must be set to generate the option's permissions\n      if ($id_option && ($permissions = $this->opt->findPermissions($this->opt->getRoot(), true))) {\n        foreach ($permissions as $p){\n          $p['code']      = 'opt'.$p['id'];\n          $p['id_alias']  = $p['id'];\n          $p['id_parent'] = $id_option;\n          $p['type']      = 'option';\n          unset($p['id']);\n          if (!empty($p['items'])) {\n            $p['items'] = $this->_treat_options($p['items']);\n          }\n\n          $res['total'] += $this->opt->add($p, true, true);\n          if (!empty($p['items'])) {\n            unset($p['items']);\n          }\n\n          $p['id_parent'] = $this->opt->fromCode($p['code'], $id_option);\n          $p['code']      = 'write';\n          $p['text']      = '\u00c9criture';\n          $res['total']  += $this->opt->add($p, true, true);\n        }\n      }\n\n      $this->opt->deleteCache();\n    }\n\n    return $res;\n\n  }",
            "startLine": 477,
            "endLine": 617,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "routes",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 51,
            "endLine": 58,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 51,
                "endLine": 58,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 65,
            "endLine": 72,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 65,
                "endLine": 72,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->error;\n  }",
            "startLine": 86,
            "endLine": 89,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->error;\n  }",
                "startLine": 86,
                "endLine": 89,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 92,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\n  }",
                "startLine": 92,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "startLine": 98,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "startLine": 98,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        dgettext(X::tDom(), \"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
            "startLine": 115,
            "endLine": 126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        dgettext(X::tDom(), \"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
                "startLine": 115,
                "endLine": 126,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": null,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": null,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
            "startLine": 132,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
                "startLine": 132,
                "endLine": 135,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($debug)\n  {\n    $this->debug = $debug;\n  }",
            "startLine": 142,
            "endLine": 145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($debug)\n  {\n    $this->debug = $debug;\n  }",
                "startLine": 142,
                "endLine": 145,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getInstance": {
            "name": "getInstance",
            "summary": "Returns the instance of the singleton or null.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$retriever_instance;\n  }",
            "startLine": 42,
            "endLine": 45,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "retrieverExists": {
            "name": "retrieverExists",
            "summary": "Returns true if an instance as been initiated.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$retriever_exists;\n  }",
            "startLine": 52,
            "endLine": 55,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "startLine": 145,
            "endLine": 149,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getAppuiRoot": {
            "name": "getAppuiRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::optionalInit();\n    return self::$option_appui_id;\n  }",
            "startLine": 152,
            "endLine": 156,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $o = bbn\\Appui\\Option::getInstance();\n    if (!$o) {\n      throw new \\Exception(dgettext(X::tDom(), \"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "startLine": 159,
            "endLine": 167,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bbn\\Appui\\Option"
            ],
            "parent": false,
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 176,
            "endLine": 179,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...self::_treat_args(func_get_args())), function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "startLine": 182,
            "endLine": 191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args()))) ? $tree['items'] : [];\n  }",
            "startLine": 194,
            "endLine": 197,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 200,
            "endLine": 203,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 206,
            "endLine": 209,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::getOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "startLine": 212,
            "endLine": 215,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionId": {
            "name": "getAppuiOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 224,
            "endLine": 227,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsIds": {
            "name": "getAppuiOptionsIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(\n          ...self::_treat_args(func_get_args(), true)\n        ),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "startLine": 230,
            "endLine": 242,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsTree": {
            "name": "getAppuiOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args(), true)) ) ? $tree['items'] : [];\n  }",
            "startLine": 245,
            "endLine": 248,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptions": {
            "name": "getAppuiOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 251,
            "endLine": 254,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOption": {
            "name": "getAppuiOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 257,
            "endLine": 260,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsTextValue": {
            "name": "getAppuiOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::getAppuiOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "startLine": 263,
            "endLine": 266,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "setCurrent": {
            "name": "setCurrent",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option)\n  {\n    self::_set_current($id_option);\n  }",
            "startLine": 29,
            "endLine": 32,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ]
        },
        "getCurrent": {
            "name": "getCurrent",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$current;\n  }",
            "startLine": 37,
            "endLine": 40,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        }
    },
    "properties": null,
    "staticProperties": {
        "retriever_instance": {},
        "retriever_exists": true,
        "optional_is_init": true,
        "option_root_id": "05c471dc025011e8beb3005056014c9f",
        "option_appui_id": "05c471dc025011e8beb3005056014c9f",
        "current": "f8bf3120194711eb83ae0050560a97cd"
    },
    "constants": null,
    "numMethods": 44,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 6,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\Models\\Tts\\Retriever",
        "bbn\\Models\\Tts\\Optional",
        "bbn\\Models\\Tts\\Current"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Basic",
    "isSubclassOf": false,
    "defaultProperties": {
        "retriever_instance": {},
        "retriever_exists": true,
        "optional_is_init": true,
        "option_root_id": "05c471dc025011e8beb3005056014c9f",
        "option_appui_id": "05c471dc025011e8beb3005056014c9f",
        "current": "f8bf3120194711eb83ae0050560a97cd",
        "opt": null,
        "pref": null,
        "user": null,
        "db": null,
        "plugins": [],
        "errors": [],
        "error": false,
        "debug": false,
        "log": [],
        "options": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\User",
    "shortName": "Permissions",
    "summary": "A permission system linked to options, User classes and preferences.",
    "description": "From the moment a user or a group has a preference on an item, it is considered to have a permission. Deleting a permission deletes the preference",
    "description_parts": [
        {
            "type": "text",
            "content": "<p>From the moment a user or a group has a preference on an item, it is considered to have a permission. Deleting a permission deletes the preference<\/p>"
        }
    ]
}