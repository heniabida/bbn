{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\cdn\\library",
    "namespace": true,
    "traits": [
        "bbn\\cdn\\common"
    ],
    "interfaces": [],
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/cdn\/library.php",
    "startLine": 9,
    "endLine": 312,
    "contentConstructor": {
        "file": "bbn\\cdn\\library",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cdn\\library",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\db $db, $lang = 'en', $latest = false)\n  {\n    $this->lang = $lang;\n    if ( $latest !== false ){\n      $this->latest = 1;\n    }\n  }",
            "startLine": 23,
            "doc": null,
            "endLine": 29,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "lang",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "en",
                    "default_name": ""
                },
                {
                    "name": "latest",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "info": {
            "name": "info",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cdn\\library",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($library)\n  {\n    $lib = array_shift($params);\n    $cfg = [\n      'table' => 'libraries',\n      'fields' => [\n        'libraries.name', 'libraries.fname', 'libraries.title',\n        'libraries.latest', 'libraries.website', 'libraries.last_update',\n        'libraries.last_check'\n      ],\n      'where' => [\n        'libraries.name' => $lib\n      ]\n    ];\n    if ( isset($params[0]) && ($params[0] !== 'latest') ){\n      $cfg['fields']['id'] = 'IFNULL(v1.id, v2.id)';\n      $cfg['fields']['version'] = 'IFNULL(v1.name, v2.name)';\n      $cfg['fields']['content'] = 'IFNULL(v1.content, v2.content)';\n      $cfg['fields']['internal'] = 'IFNULL(v1.internal, v2.internal)';\n      $cfg['join'] =\n      [\n        [\n          'table' => 'versions',\n          'alias' => 'v1',\n          'type' => 'left',\n          'on' => [\n            'conditions' => [\n              [\n                'field' => 'v1.library',\n                'operator' => '=',\n                'exp' => 'libraries.name'\n              ], [\n                'field' => 'v1.name',\n                'operator' => 'LIKE',\n                'value' => $lib\n              ]\n            ]\n          ]\n        ], [\n          'table' => 'versions',\n          'alias' => 'v2',\n          'type' => 'left',\n          'on' => [\n            'conditions' => [\n              [\n                'field' => 'v2.library',\n                'operator' => '=',\n                'exp' => 'libraries.name'\n              ], [\n                'field' => 'v2.name',\n                'operator' => '=',\n                'exp' => 'libraries.latest'\n              ]\n            ]\n          ]\n        ]\n      ];\n    }\n    else{\n      $cfg['fields'][] = 'versions.id';\n      $cfg['fields']['version'] = 'versions.name';\n      $cfg['fields'][] = 'versions.content';\n      $cfg['fields'][] = 'versions.internal';\n      $cfg['join'] = [\n        [\n          'table' => 'versions',\n          'type' => 'left',\n          'on' => [\n            'conditions' => [\n              [\n                'field' => 'versions.library',\n                'operator' => '=',\n                'exp' => 'libraries.name'\n              ], [\n                'field' => 'versions.name',\n                'operator' => '=',\n                'exp' => 'libraries.latest'\n              ]\n            ]\n          ]\n        ]\n      ];\n    }\n    \/\/ We take all the info from the database\n    if ( $info = $this->db->rselect($cfg) ){\n      \/\/ Most of the info is in the JSON field, content\n      $info['content'] = json_decode($info['content']);\n      \/\/ The files from which the content will be prepended to corresponding files\n      $info['prepend'] = [];\n      \/\/ If there are theme files we want to add them to the list of files\n      if ( !empty($info['content']->theme_files) && isset($info['content']->files) ){\n        \/\/ Parameters of the library sent through the URL\n        if ( !empty($params[1]) ){\n          $ths = explode('!', $params[1]);\n        }\n        else if ( isset($info['content']->default_theme) ){\n          $ths = [$info['content']->default_theme];\n        }\n        if ( !empty($ths) ){\n          foreach ( $ths as $th ){\n            if ( !empty($info['content']->theme_prepend) ){\n              foreach ( $info['content']->theme_files as $tf ){\n                foreach ( $info['content']->files as $f ){\n                  \/** @todo Remove!!! *\/\n                  if ( substr($f, -4) === 'less' ){\n                    if ( bbn\\x::indexOf($tf, '%s') > -1 ){\n                      $info['prepend'][$f][] = sprintf(str_replace('%s', '%1$s', $tf), $th);\n                    }\n                    else{\n                      $info['prepend'][$f][] = $tf;\n                    }\n                  }\n                }\n              }\n            }\n            else{\n              foreach ( $info['content']->theme_files as $tf ){\n                if ( bbn\\x::indexOf($tf, '%s') > -1 ){\n                  $info['content']->files[] = sprintf(str_replace('%s', '%1$s', $tf), $th);\n                }\n                else{\n                  $info['content']->files[] = $tf;\n                }\n              }\n            }\n          }\n        }\n      }\n      if ( !isset($ths) && isset($info['content']->themes) ){\n        if ( isset($params[1], $info['content']->themes->$params[1]) ){\n          $info['theme'] = $params[1];\n        }\n        else if ( isset($info['content']->default_theme) ){\n          $info['theme'] = $info['content']->default_theme;\n        }\n        if ( isset($info['theme'], $info['content']->themes->{$info['theme']}) ){\n          if ( !is_array($info['content']->themes->{$info['theme']}) ){\n            $info['content']->themes->$info['theme'] = [$info['content']->themes->$info['theme']];\n          }\n          $info['content']->files = array_merge($info['content']->files, $info['content']->themes->$info['theme']);\n        }\n      }\n      return $info;\n    }\n    return false;\n  }",
            "startLine": 59,
            "doc": null,
            "endLine": 204,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "library",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "add": {
            "name": "add",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cdn\\library",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($library, $has_dep = 1)\n  {\n  \n      if ( !isset($this->libs[$info['name']][$info['internal']]) ){\n        $last = $this->db->last();\n        if ( $has_dep ){\n          \/\/ Adding dependencies\n          $dependencies = $this->get_dependencies($info['id']);\n          \/\/bbn\\x::dump($dependencies, $info);\n          if ( !empty($dependencies) ){\n            foreach ( $dependencies as $dep ){\n              $this->add($dep);\n            }\n          }\n        }\n\n        if ( !isset($this->libs[$info['name']]) ){\n          $this->libs[$info['name']] = [];\n        }\n\n        $this->libs[$info['name']][$info['internal']] = [\n            'version' => $info['version'],\n            'prepend' => [],\n            'files' => []\n        ];\n        $files =& $this->libs[$info['name']][$info['internal']]['files'];\n        $prepend =& $this->libs[$info['name']][$info['internal']]['prepend'];\n        $path = 'lib\/'.$info['name'].'\/'.$info['version'].'\/';\n        \n        \n        \/\/ From here, adding files (no matter the type) to $this->libs array for each library\n        \/\/ Adding language files if they must be prepent\n        if ( ($this->lang !== 'en') && isset($info['content']->lang, $info['content']->prepend_lang) ){\n          foreach ( $info['content']->lang as $lang ){\n            $files[] = sprintf($path.$lang, $this->lang);\n          }\n        }\n\n        if ( isset($info['content']->files) && is_array($info['content']->files) ){\n          \/\/ Adding each files - no matter the type\n          foreach ( $info['content']->files as $f ){\n            if ( isset($this->info['theme']) && strpos($f, '%s') ){\n              $f = sprintf($f, $this->info['theme']);\n            }\n            if ( isset($info['prepend'][$f]) ){\n              $prepend[$path.$f] = [];\n              foreach ( $info['prepend'][$f] as $p ){\n                $prepend[$path.$f][] = $path.$p;\n              }\n            }\n            $files[] = $path.$f;\n          }\n        }\n        else{\n          die(\\bbn\\x::dump(\"Error!\", $info, $last));\n        }\n        \n        \/\/ Adding language files at the end (default way)\n        if ( ($this->lang !== 'en') && isset($info['content']->lang) && !isset($info['content']->prepend_lang) ){\n          if ( is_string($info['content']->lang) ){\n            $info['content']->lang = [$info['content']->lang];\n          }\n          if ( is_array($info['content']->lang) ){\n            foreach ( $info['content']->lang as $lang ){\n              array_push($files, sprintf($path.$lang, $this->lang));\n            }\n          }\n          else{\n            die(\"Problem with the language file for $info[name]\");\n          }\n        }\n\n        \n      }\n    }\n    return $this;\n  }",
            "startLine": 206,
            "doc": null,
            "endLine": 282,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "library",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "has_dep",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": ""
                }
            ]
        },
        "get_config": {
            "name": "get_config",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cdn\\library",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n      'libraries' => [],\n      'prepend' => []\n    ];\n    foreach ( $this->libs as $lib_name => $lib ){\n      ksort($lib);\n      $lib = current($lib);\n      $res['libraries'][$lib_name] = (string) $lib['version'];\n      if ( isset($lib['prepend']) ){\n        $res['prepend'] = array_merge($res['prepend'], $lib['prepend']);\n      }\n      foreach ( $lib['files'] as $f ){\n        $ext = bbn\\str::file_ext($f);\n        foreach ( self::$types as $type => $extensions  ){\n          if ( in_array($ext, $extensions) ){\n            if ( !isset($res[$type]) ){\n              $res[$type] = [];\n            }\n            if ( !in_array($f, $res[$type]) ){\n              $res[$type][] = $f;\n            }\n          }\n        }\n      }\n    }\n    return $res;\n  }",
            "startLine": 284,
            "doc": null,
            "endLine": 311,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        }
    },
    "properties": {
        "libs": {
            "visibility": "public"
        },
        "js": {
            "visibility": "public"
        },
        "css": {
            "visibility": "public"
        },
        "lang": {
            "visibility": "public",
            "value": "en"
        },
        "theme": {
            "visibility": "public"
        },
        "vars": {
            "visibility": "public"
        },
        "types": {
            "static": true,
            "visibility": "public",
            "value": {
                "js": [
                    "js",
                    "coffee"
                ],
                "css": [
                    "css",
                    "less",
                    "sass",
                    "scss"
                ],
                "html": [
                    "html",
                    "php"
                ],
                "lang": [
                    "lang"
                ]
            }
        }
    },
    "staticProperties": null,
    "constants": null,
    "numMethods": 4,
    "numProperties": 7,
    "numConstants": 0,
    "numStaticProperties": 0,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\cdn\\common"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "types": {
            "js": [
                "js",
                "coffee"
            ],
            "css": [
                "css",
                "less",
                "sass",
                "scss"
            ],
            "html": [
                "html",
                "php"
            ],
            "lang": [
                "lang"
            ]
        },
        "latest": 1,
        "db": null,
        "libs": [],
        "js": [],
        "css": [],
        "lang": "en",
        "theme": false,
        "vars": [],
        "prefix": "",
        "fpath": "",
        "furl": ""
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\cdn",
    "shortName": "library"
}