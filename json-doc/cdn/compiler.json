{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\cdn\\compiler",
    "namespace": true,
    "traits": [
        "bbn\\cdn\\common"
    ],
    "interfaces": [],
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/cdn\/compiler.php",
    "startLine": 8,
    "endLine": 476,
    "contentConstructor": {
        "file": "bbn\\cdn\\compiler",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cdn\\compiler",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($cfg)\n  {\n    $this->_set_prefix();\n    $this->cfg = $cfg;\n  }",
            "startLine": 21,
            "endLine": 25,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "minify": {
            "name": "minify",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cdn\\compiler",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($st, $lang)\n  {\n    $st = trim($st);\n    if ( $st ){\n      try {\n        if ( $lang === 'js' ){\n          $tmp = JShrink\\Minifier::minify($st, ['flaggedComments' => false]);\n        }\n        else if ( $lang === 'css' ){\n          $tmp = CssMin::minify($st);\n        }\n      }\n      catch (\\Exception $e){\n        $this->set_error(\"Error during $lang minification with string - {$e->getMessage()}\");\n        \/\/die('Error during $lang minification with string - '.$e->getMessage());\n      }\n    }\n    return $tmp ?: $st;\n  }",
            "startLine": 27,
            "endLine": 45,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "lang",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_content": {
            "name": "get_content",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cdn\\compiler",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($file, $test = false)\n  {\n      $ext = bbn\\str::file_ext($file[0]);\n      $minified = false;\n      $c = '';\n      foreach ( $file as $f ){\n        $has_content = false;\n        if ( !is_file($this->fpath.$f) ){\n          return false;\n        }\n        foreach ( self::$min_suffixes as $s ){\n          if ( strpos($f, $s.'.') ){\n            $minified = true;\n            if ( $test && file_exists($this->fpath.str_replace($s.'.', '.', $f)) ){\n              $c .= PHP_EOL.file_get_contents($this->fpath.str_replace($s.'.', '.', $f));\n              $has_content = true;\n            }\n            break;\n          }\n        }\n        if ( !$has_content ){\n          $c .= PHP_EOL.file_get_contents($this->fpath.$f);\n        }\n        if ( !empty($c) ){\n          $c = trim($c);\n        }\n      }\n    }\n    else{\n      $ext = bbn\\str::file_ext($file);\n      $minified = false;\n      if ( !is_file($this->fpath.$file) ){\n        return false;\n      }\n      foreach ( self::$min_suffixes as $s ){\n        if ( strpos($file, $s.'.') ){\n          $minified = true;\n          if ( $test && file_exists($this->fpath.str_replace($s.'.', '.', $file)) ){\n            $c = file_get_contents($this->fpath.str_replace($s.'.', '.', $file));\n          }\n          break;\n        }\n      }\n      if ( !isset($c) ){\n        $c = file_get_contents($this->fpath.$file);\n      }\n      if ( \\is_string($c) ){\n        $c = trim($c);\n      }\n    }\n    if ( $c ){\n      switch ( $ext ){\n\n        case 'js':\n          if ( !$test && !$minified ){\n            $c = $this->minify($c, 'js');\n          }\n          break;\n\n        case 'css':\n          if ( !$test && !$minified ){\n            $c = $this->minify($c, 'css');\n          }\n          break;\n\n        case 'coffee':\n          try {\n            $tmp = \\CoffeeScript\\Compiler::compile($c);\n            if ( $tmp && !$test ){\n              $c = $this->minify($c, 'js');\n            }\n          }\n          catch (\\Exception $e){\n            $this->set_error(\"Error during CoffeeScript compilation with file $file: \".$e->getMessage());\n            die(\"Compilation error with file $file : \".$e->getMessage());\n          }\n          break;\n\n        case 'less':\n          $less = new \\lessc();\n          $less->setImportDir([\\dirname($this->fpath.$file)]);\n          if ( is_file(\\dirname($this->fpath.$file).'\/_def.less') ){\n            $c = file_get_contents((\\dirname($this->fpath.$file).'\/_def.less')).$c;\n          }\n          try {\n            $c = $less->compile($c);\n            if ( $c && !$test ){\n              $c = $this->minify($c, 'css');\n            }\n          }\n          catch ( \\Exception $e ){\n            $this->set_error(\"Error during LESS compilation with file $file :\".$e->getMessage());\n            die($e->getMessage());\n          }\n          break;\n\n        case 'scss':\n          try{\n            $scss = new \\Leafo\\ScssPhp\\Compiler();\n            $scss->setImportPaths([\\dirname($this->fpath.$file)]);\n            if ( is_file(\\dirname($this->fpath.$file).'\/_def.scss') ){\n              $c = file_get_contents((\\dirname($this->fpath.$file).'\/_def.scss')).$c;\n            }\n            $c = $scss->compile($c);\n            if ( $c && !$test ){\n              $c = $this->minify($c, 'css');\n            }\n          }\n          catch ( \\Exception $e ){\n            $this->set_error(\"Error during SCSS compilation with file $file :\".$e->getMessage());\n            die($e->getMessage());\n          }\n          break;\n\n        case 'sass':\n          $sass = new \\SassParser([\n            'cache' => false,\n            'syntax' => 'sass'\n          ]);\n          try {\n            $c = $sass->toCss($c, false);\n            if ( $c && !$test ){\n              $c = $this->minify($c, 'css');\n            }\n          }\n          catch ( \\Exception $e ){\n            $this->set_error(\"Error during SASS compilation with file $file :\".$e->getMessage());\n            die($e->getMessage());\n          }\n          break;\n      }\n      if ( !$this->check() ){\n        die(\"File $file \\n{$this->get_error()}\");\n      }\n      return $c;\n    }\n    return false;\n  }",
            "startLine": 47,
            "endLine": 184,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "test",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "js_links": {
            "name": "js_links",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cdn\\compiler",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $files, $test = false)\n  {\n    $num_files = \\count($files);\n    if (  $num_files ){\n      $url = $this->furl.'?files=%s&';\n      $params = [];\n      \/\/ The v parameter is passed between requests (to refresh)\n      if ( !empty($this->cfg['params']['v']) ){\n        $params['v'] = $this->cfg['params']['v'];\n      }\n      \/\/ The test parameter also (for minification)\n      if ( $test ){\n        $params['test'] = 1;\n      }\n      $url .= http_build_query($params);\n      $files_json = json_encode($files);\n            $code .= <<<JS\n  .then(function(){\n    return new Promise(function(bbn_resolve, bbn_reject){\n      var files = $files_json,\n          rFiles = [];\n      for ( var i = 0; i < files.length; i++ ){\n        if ( bbnLoadFile(files[i]) ){\n          rFiles.push(files[i]);\n        }\n      }\n      if ( !rFiles.length ){\n        bbn_resolve();\n        return;\n      }\n      var script = document.createElement(\"script\");\n      script.type = \"text\/javascript\";\n      script.src = \"$url\".replace(\"%s\", rFiles.join(\",\"));\n      script.onload = function(){\n        bbn_resolve();\n      };\n      script.onerror = function(){\n        bbn_reject();\n      };\n      document.getElementsByTagName(\"head\")[0].appendChild(script);\n    })\n  })\nJS;\n    }\n    return $code;\n  }",
            "startLine": 186,
            "endLine": 231,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "files",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "test",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "has_links": {
            "name": "has_links",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cdn\\compiler",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($css)\n  {\n  }",
            "startLine": 233,
            "endLine": 235,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "css",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "css_links": {
            "name": "css_links",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cdn\\compiler",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $files, $test = false, $prepend_files = [], $root = '')\n  {\n    $num_files = \\count($files);\n    if ( $num_files ){\n      $dirs = [];\n      $prepended = [];\n      $unprepended = [];\n      for ( $i = 0; $i < $num_files; $i++ ){\n        if ( is_file($this->fpath.$files[$i]) ){\n          if ( isset($prepend_files[$files[$i]]) ){\n            foreach ( $prepend_files[$files[$i]] as $p ){\n              if ( !isset($prepended[$p]) ){\n                $prepended[$p] = [];\n              }\n              $prepended[$p][] = $files[$i];\n            }\n          }\n          else{\n            $unprepended[] = $files[$i];\n          }\n        }\n      }\n      \/\/die(var_dump($files, $num_files, $prepended));\n      foreach ( $prepended as $prep => $arr ){\n        $dir = dirname($arr[0]);\n        $files_json = [str_replace($dir, '', $prep)];\n        foreach ( $arr as $ar ){\n          $files_json[] = str_replace($dir, '', $ar);\n        }\n        \\bbn\\x::log($files_json);\n        $files_json = json_encode($files_json);\n        $url = $this->furl.'~~~BBN~~~';\n        $params = [];\n        \/\/ The v parameter is passed between requests (to refresh)\n        if ( !empty($this->cfg['params']['v']) ){\n          $params['v'] = $this->cfg['params']['v'];\n        }\n        \/\/ The test parameter also (for minification)\n        if ( $test ){\n          $params['test'] = 1;\n        }\n        $url .= http_build_query($params);\n        $jsdir = $dir === '.' ? '' : $dir.'\/';\n        $code .= <<<JS\n.then(function(){\n  return new Promise(function(bbn_resolve, bbn_reject){\n    var dir = \"$jsdir\",\n        files = $files_json,\n        url = \"$url\",\n        rFiles = [];\n    for ( var i = 0; i < files.length; i++ ){\n      if ( bbnLoadFile(dir + files[i]) ){\n        rFiles.push(files[i]);\n      }\n    }\n    if ( !rFiles.length ){\n      bbn_resolve();\n      return;\n    }\n    var css = document.createElement(\"link\");\n    css.rel = \"stylesheet\";\n    css.href = url.replace('~~~BBN~~~', dir + '?grouped=1&f=' + rFiles.join(\",\") + '&');\n    css.onload = function(){\n      bbn_resolve();\n    };\n    css.onerror = function(){\n      bbn_reject();\n    };\n    document.getElementsByTagName(\"head\")[0].appendChild(css);\n  })\n})\nJS;\n      }\n      foreach ( $unprepended as $file ){\n        $css = $this->get_content($file, false);\n        if ( $this->has_links($css) ){\n          if ($root) {\n            if ( !isset($dirs[$root]) ){\n              $dirs[$root] = [];\n            }\n            $dirs[$root][] = substr($file, strlen($root));\n          }\n          else {\n            if ( !isset($dirs[\\dirname($file)]) ){\n              $dirs[\\dirname($file)] = [];\n            }\n            $dirs[\\dirname($file)][] = basename($file);\n          }\n        }\n        else{\n          if ( !isset($dirs['.']) ){\n            $dirs['.'] = [];\n          }\n          $dirs['.'][] = $file;\n        }\n      }\n      if ( \\count($dirs) ){\n        foreach ( $dirs as $dir => $dfiles ){\n          if ( \\count($dfiles) ){\n            $files_json = json_encode($dfiles);\n\n            $url = $this->furl.'~~~BBN~~~';\n\n            $params = [];\n            \/\/ The v parameter is passed between requests (to refresh)\n            if ( !empty($this->cfg['params']['v']) ){\n              $params['v'] = $this->cfg['params']['v'];\n            }\n            \/\/ The test parameter also (for minification)\n            if ( $test ){\n              $params['test'] = 1;\n            }\n            $url .= http_build_query($params);\n            $jsdir = $dir === '.' ? '' : $dir.'\/';\n            $code .= <<<JS\n            \n  .then(function(){\n    return new Promise(function(bbn_resolve, bbn_reject){\n      var dir = \"$jsdir\",\n          files = $files_json,\n          url = \"$url\",\n          rFiles = [];\n      for ( var i = 0; i < files.length; i++ ){\n        if ( bbnLoadFile(dir + files[i]) ){\n          rFiles.push(files[i]);\n        }\n      }\n      if ( !rFiles.length ){\n        bbn_resolve();\n        return;\n      }\n      var css = document.createElement(\"link\");\n      css.rel = \"stylesheet\";\n      css.href = url.replace('~~~BBN~~~', dir + '?f=' + rFiles.join(\",\") + '&');\n      css.onload = function(){\n        bbn_resolve();\n      };\n      css.onerror = function(){\n        bbn_reject();\n      };\n      document.getElementsByTagName(\"head\")[0].appendChild(css);\n    })\n  })\nJS;\n          }\n        }\n        \/\/$code .= \";\\nreturn promise;\\n})()\";\n        if ( !$test ){\n          $code = $this->minify($code, 'js');\n        }\n      }\n    }\n    return $code;\n  }",
            "startLine": 237,
            "endLine": 390,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "files",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "test",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "prepend_files",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "root",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "css_content": {
            "name": "css_content",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cdn\\compiler",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($css)\n  {\n    \/\/$css = bbn\\str::escape_squotes($css);\n    $code = bbn\\str::genpwd(25, 20);\n    $head = $code.'2';\n    $style = $code.'3';\n    return <<<JS\n  let $code = `$css`,\n      $head = document.head || document.getElementsByTagName('head')[0],\n      $style = document.createElement('style');\n  $style.type = 'text\/css';\n  if ( $style.styleSheet ){\n    $style.styleSheet.cssText = $code;\n  }\n  else {\n    $style.appendChild(document.createTextNode($code));\n  }\n  return $head.appendChild($style);\nJS;\n\n  }",
            "startLine": 392,
            "endLine": 412,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "css",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "compile": {
            "name": "compile",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cdn\\compiler",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $files, $test = false)\n  {\n      \/** @var string $insert_precode Will be used in the sprintf on $precode *\/\n      $insert_precode = '';\n      \/** @var string $code Will contain all the code to add to our file *\/\n      $code = '';\n      \/** @var array $codes Will contain the raw content of each files *\/\n      $codes = [];\n      \/\/ Mix of CSS and javascript: the JS adds the CSS to the head before executing\n      foreach ( $files as $f ){\n        if ( $c = $this->get_content($f, $test) ){\n          $e = bbn\\str::file_ext($f);\n          foreach ( self::$types as $type => $exts ){\n            foreach ( $exts as $ext ){\n              if ( $ext === $e ){\n                $mode = $type;\n                break;\n              }\n            }\n          }\n          $codes[$mode ?? $e][] = [\n            'code' => $c,\n            'file' => basename($f),\n            'dir' => \\dirname($f)\n          ];\n        }\n        else{\n          \/\/die(\"I can't find the file $f !\");\n        }\n      }\n      return $codes;\n    }\n  }",
            "startLine": 414,
            "endLine": 446,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "files",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "test",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "group_compile": {
            "name": "group_compile",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\cdn\\compiler",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($files, $test = false)\n  {\n      \/** @var array $codes Will contain the raw content of each files *\/\n      $codes = [];\n      \/\/ Mix of CSS and javascript: the JS adds the CSS to the head before executing\n      if ( $c = $this->get_content($files, $test) ){\n        $e = bbn\\str::file_ext($files[0]);\n        foreach ( self::$types as $type => $exts ){\n          foreach ( $exts as $ext ){\n            if ( $ext === $e ){\n              $mode = $type;\n              break;\n            }\n          }\n        }\n        $codes[$mode ?? $e][] = [\n          'code' => $c,\n          'file' => basename(end($files)),\n          'dir' => \\dirname(end($files))\n        ];\n      }\n      else{\n        throw new \\Exception(\"Impossible to get content from $f\");\n      }\n      return $codes;\n    }\n  }",
            "startLine": 448,
            "endLine": 474,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "files",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "test",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
            "startLine": 45,
            "endLine": 50,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                "startLine": 45,
                "endLine": 50,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
            "startLine": 56,
            "endLine": 61,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                "startLine": 56,
                "endLine": 61,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "get_error": {
            "name": "get_error",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 72,
            "endLine": 74,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "get_error",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n  }",
                "startLine": 72,
                "endLine": 74,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "get_errors": {
            "name": "get_errors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 76,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "get_errors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n  }",
                "startLine": 76,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\t\t\t$ar = \\func_get_args();\n\t\t\t$cn = bbn\\str::encode_filename(str_replace('\\\\', '_', \\get_class($this)));\n\t\t\tforeach ( $ar as $a ){\n\t\t\t\tbbn\\x::log($a, $cn);\n\t\t\t}\n\t\t}\n  }",
            "startLine": 80,
            "endLine": 88,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\t\t\t$ar = \\func_get_args();\n\t\t\t$cn = bbn\\str::encode_filename(str_replace('\\\\', '_', \\get_class($this)));\n\t\t\tforeach ( $ar as $a ){\n\t\t\t\tbbn\\x::log($a, $cn);\n\t\t\t}\n\t\t}\n  }",
                "startLine": 80,
                "endLine": 88,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $this->log([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]);\n    die(var_dump([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]));\n  }",
            "startLine": 95,
            "endLine": 99,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $this->log([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]);\n    die(var_dump([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]));\n  }",
                "startLine": 95,
                "endLine": 99,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "is_debug": {
            "name": "is_debug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 104,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "is_debug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n  }",
                "startLine": 104,
                "endLine": 106,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "set_debug": {
            "name": "set_debug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\models\\cls\\basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($debug)\n  {\n  }",
            "startLine": 112,
            "endLine": 114,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "set_debug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\models\\cls\\basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($debug)\n  {\n  }",
                "startLine": 112,
                "endLine": 114,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "types": {
            "static": true,
            "visibility": "public",
            "value": {
                "js": [
                    "js",
                    "coffee"
                ],
                "css": [
                    "css",
                    "less",
                    "sass",
                    "scss"
                ],
                "html": [
                    "html",
                    "php"
                ],
                "lang": [
                    "lang"
                ]
            }
        }
    },
    "staticProperties": {
        "min_suffixes": [
            ".min",
            "-min",
            ".pack"
        ],
        "types": {
            "js": [
                "js",
                "coffee"
            ],
            "css": [
                "css",
                "less",
                "sass",
                "scss"
            ],
            "html": [
                "html",
                "php"
            ],
            "lang": [
                "lang"
            ]
        }
    },
    "constants": null,
    "numMethods": 17,
    "numProperties": 1,
    "numConstants": 0,
    "numStaticProperties": 2,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\cdn\\common"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\models\\cls\\basic",
    "isSubclassOf": false,
    "defaultProperties": {
        "min_suffixes": [
            ".min",
            "-min",
            ".pack"
        ],
        "types": {
            "js": [
                "js",
                "coffee"
            ],
            "css": [
                "css",
                "less",
                "sass",
                "scss"
            ],
            "html": [
                "html",
                "php"
            ],
            "lang": [
                "lang"
            ]
        },
        "cfg": null,
        "final_file": null,
        "errors": [],
        "error": false,
        "debug": false,
        "log": [],
        "prefix": "",
        "fpath": "",
        "furl": ""
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\cdn",
    "shortName": "compiler",
    "summary": ""
}